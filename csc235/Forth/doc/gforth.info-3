This is gforth.info, produced by makeinfo version 6.7 from gforth.texi.

This manual is for Gforth (version 0.7.3, June 14, 2014), a fast and
portable implementation of the ANS Forth language.  It serves as
reference manual, but it also contains an introduction to Forth and a
Forth tutorial.

   Copyright (C) 1995, 1996, 1997, 1998, 2000, 2003,
2004,2005,2006,2007,2008 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by the
     Free Software Foundation raise funds for GNU development."
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Gforth: (gforth).             A fast interpreter for the Forth language.
END-INFO-DIR-ENTRY


File: gforth.info,  Node: How the Cross Compiler Works,  Prev: Using the Cross Compiler,  Up: Cross Compiler

15.2 How the Cross Compiler Works
=================================


File: gforth.info,  Node: Bugs,  Next: Origin,  Prev: Cross Compiler,  Up: Top

Appendix A Bugs
***************

Known bugs are described in the file 'BUGS' in the Gforth distribution.

   If you find a bug, please submit a bug report through
<https://savannah.gnu.org/bugs/?func=addbug&group=gforth>.

   * A program (or a sequence of keyboard commands) that reproduces the
     bug.
   * A description of what you think constitutes the buggy behaviour.
   * The Gforth version used (it is announced at the start of an
     interactive Gforth session).
   * The machine and operating system (on Unix systems 'uname -a' will
     report this information).
   * The installation options (you can find the configure options at the
     start of 'config.status') and configuration ('configure' output or
     'config.cache').
   * A complete list of changes (if any) you (or your installer) have
     made to the Gforth sources.

   For a thorough guide on reporting bugs read *note How to Report Bugs:
(gcc.info)Bug Reporting.


File: gforth.info,  Node: Origin,  Next: Forth-related information,  Prev: Bugs,  Up: Top

Appendix B Authors and Ancestors of Gforth
******************************************

B.1 Authors and Contributors
============================

The Gforth project was started in mid-1992 by Bernd Paysan and Anton
Ertl.  The third major author was Jens Wilke.  Neal Crook contributed a
lot to the manual.  Assemblers and disassemblers were contributed by
Andrew McKewan, Christian Pirker, Bernd Thallner, and Michal Revucky.
Lennart Benschop (who was one of Gforth's first users, in mid-1993) and
Stuart Ramsden inspired us with their continuous feedback.  Lennart
Benshop contributed 'glosgen.fs', while Stuart Ramsden has been working
on automatic support for calling C libraries.  Helpful comments also
came from Paul Kleinrubatscher, Christian Pirker, Dirk Zoller, Marcel
Hendrix, John Wavrik, Barrie Stott, Marc de Groot, Jorge Acerada, Bruce
Hoyt, Robert Epprecht, Dennis Ruffer and David N. Williams.  Since the
release of Gforth-0.2.1 there were also helpful comments from many
others; thank you all, sorry for not listing you here (but digging
through my mailbox to extract your names is on my to-do list).

   Gforth also owes a lot to the authors of the tools we used (GCC, CVS,
and autoconf, among others), and to the creators of the Internet: Gforth
was developed across the Internet, and its authors did not meet
physically for the first 4 years of development.

B.2 Pedigree
============

Gforth descends from bigFORTH (1993) and fig-Forth.  Of course, a
significant part of the design of Gforth was prescribed by ANS Forth.

   Bernd Paysan wrote bigFORTH, a descendent from TurboForth, an
unreleased 32 bit native code version of VolksForth for the Atari ST,
written mostly by Dietrich Weineck.

   VolksForth was written by Klaus Schleisiek, Bernd Pennemann, Georg
Rehfeld and Dietrich Weineck for the C64 (called UltraForth there) in
the mid-80s and ported to the Atari ST in 1986.  It descends from
fig-Forth.

   A team led by Bill Ragsdale implemented fig-Forth on many processors
in 1979.  Robert Selzer and Bill Ragsdale developed the original
implementation of fig-Forth for the 6502 based on microForth.

   The principal architect of microForth was Dean Sanderson.  microForth
was FORTH, Inc.'s first off-the-shelf product.  It was developed in 1976
for the 1802, and subsequently implemented on the 8080, the 6800 and the
Z80.

   All earlier Forth systems were custom-made, usually by Charles Moore,
who discovered (as he puts it) Forth during the late 60s.  The first
full Forth existed in 1971.

   A part of the information in this section comes from 'The Evolution
of Forth (http://www.forth.com/Content/History/History1.htm)' by
Elizabeth D. Rather, Donald R. Colburn and Charles H. Moore, presented
at the HOPL-II conference and preprinted in SIGPLAN Notices 28(3), 1993.
You can find more historical and genealogical information about Forth
there.  For a more general (and graphical) Forth family tree look see
'<http://www.complang.tuwien.ac.at/forth/family-tree/>, Forth Family
Tree and Timeline'.


File: gforth.info,  Node: Forth-related information,  Next: Licenses,  Prev: Origin,  Up: Top

Appendix C Other Forth-related information
******************************************

There is an active news group (comp.lang.forth) discussing Forth
(including Gforth) and Forth-related issues.  Its FAQs
(http://www.complang.tuwien.ac.at/forth/faq/faq-general-2.html)
(frequently asked questions and their answers) contains a lot of
information on Forth.  You should read it before posting to
comp.lang.forth.

   The ANS Forth standard is most usable in its HTML form
(http://www.taygeta.com/forth/dpans.html).


File: gforth.info,  Node: Licenses,  Next: Word Index,  Prev: Forth-related information,  Up: Top

Appendix D Licenses
*******************

* Menu:

* GNU Free Documentation License::  License for copying this manual.
* Copying::                     GPL (for copying this software).


File: gforth.info,  Node: GNU Free Documentation License,  Next: Copying,  Prev: Licenses,  Up: Licenses

D.1 GNU Free Documentation License
==================================

                      Version 1.2, November 2002

     Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses terminated
     so long as such parties remain in full compliance.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.

D.1.1 ADDENDUM: How to use this License for your documents
----------------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: gforth.info,  Node: Copying,  Prev: GNU Free Documentation License,  Up: Licenses

D.2 GNU GENERAL PUBLIC LICENSE
==============================

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

   The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: gforth.info,  Node: Word Index,  Next: Concept Index,  Prev: Licenses,  Up: Top

Word Index
**********

This index is a list of Forth words that have "glossary" entries within
this manual.  Each word is listed with its stack effect and wordset.

 [index ]
* Menu:

* ! W A-ADDR -- core:                    Memory Access.       (line   9)
* # UD1 -- UD2 core:                     Formatted numeric output.
                                                              (line  39)
* #! -- gforth:                          Running Image Files. (line  44)
* #> XD -- ADDR U core:                  Formatted numeric output.
                                                              (line  63)
* #>> -- gforth:                         Formatted numeric output.
                                                              (line  68)
* #s UD -- 0 0 core:                     Formatted numeric output.
                                                              (line  47)
* #tib -- ADDR core-ext-obsolescent:     The Text Interpreter.
                                                              (line 133)
* $? -- N gforth:                        Passing Commands to the OS.
                                                              (line  20)
* %align ALIGN SIZE -- gforth:           Structure Glossary.  (line   6)
* %alignment ALIGN SIZE -- ALIGN gforth: Structure Glossary.  (line   9)
* %alloc ALIGN SIZE -- ADDR gforth:      Structure Glossary.  (line  12)
* %allocate ALIGN SIZE -- ADDR IOR gforth: Structure Glossary.
                                                              (line  16)
* %allot ALIGN SIZE -- ADDR gforth:      Structure Glossary.  (line  20)
* %size ALIGN SIZE -- SIZE gforth:       Structure Glossary.  (line  52)
* ' "NAME" -- XT core:                   Execution token.     (line  15)
* ' "NAME" -- XT oof:                    The OOF base class.  (line  77)
* 'cold -- gforth:                       Modifying the Startup Sequence.
                                                              (line  40)
* ( COMPILATION 'CCC<CLOSE-PAREN>' -- ; RUN-TIME -- core,file: Comments.
                                                              (line   9)
* (local) ADDR U -- local:               ANS Forth locals.    (line  42)
* ) -- gforth:                           Assertions.          (line  46)
* * N1 N2 -- N core:                     Single precision.    (line  25)
* */ N1 N2 N3 -- N4 core:                Mixed precision.     (line   8)
* */mod N1 N2 N3 -- N4 N5 core:          Mixed precision.     (line  11)
* + N1 N2 -- N core:                     Single precision.    (line  14)
* +! N A-ADDR -- core:                   Memory Access.       (line  12)
* +DO COMPILATION -- DO-SYS ; RUN-TIME N1 N2 -- | LOOP-SYS gforth: Arbitrary control structures.
                                                              (line  61)
* +field N1 N2 "NAME" -- N3 X:structures: Forth200x Structures.
                                                              (line  29)
* +load I*X N -- J*X gforth:             Blocks.              (line 193)
* +LOOP COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 N -- | LOOP-SYS2 core: Arbitrary control structures.
                                                              (line  75)
* +thru I*X N1 N2 -- J*X gforth:         Blocks.              (line 197)
* +x/string XC-ADDR1 U1 -- XC-ADDR2 U2 xchar: Xchars and Unicode.
                                                              (line  58)
* , W -- core:                           Dictionary allocation.
                                                              (line  45)
* - N1 N2 -- N core:                     Single precision.    (line  21)
* --> -- gforth:                         Blocks.              (line 201)
* -DO COMPILATION -- DO-SYS ; RUN-TIME N1 N2 -- | LOOP-SYS gforth: Arbitrary control structures.
                                                              (line  65)
* -LOOP COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 U -- | LOOP-SYS2 gforth: Arbitrary control structures.
                                                              (line  77)
* -rot W1 W2 W3 -- W3 W1 W2 gforth:      Data stack.          (line  23)
* -trailing C_ADDR U1 -- C_ADDR U2 string: Memory Blocks.     (line  61)
* -trailing-garbage XC-ADDR U1 -- ADDR U2 xchar-ext: Xchars and Unicode.
                                                              (line  69)
* . N -- core:                           Simple numeric output.
                                                              (line  11)
* ." COMPILATION 'CCC"' -- ; RUN-TIME -- core: Displaying characters and strings.
                                                              (line  25)
* .( COMPILATION&INTERPRETATION "CCC<PAREN>" -- core-ext: Displaying characters and strings.
                                                              (line  32)
* .debugline NFILE NLINE -- gforth:      Debugging.           (line  34)
* .id NT -- F83:                         Name token.          (line  55)
* .name NT -- gforth-obsolete:           Name token.          (line  52)
* .path PATH-ADDR -- gforth:             General Search Paths.
                                                              (line  26)
* .r N1 N2 -- core-ext:                  Simple numeric output.
                                                              (line  26)
* .s -- tools:                           Examining.           (line   8)
* .\" COMPILATION 'CCC"' -- ; RUN-TIME -- gforth: Displaying characters and strings.
                                                              (line  38)
* / N1 N2 -- N core:                     Single precision.    (line  27)
* /does-handler -- N gforth:             Threading Words.     (line  60)
* /l -- U gforth:                        Address arithmetic.  (line 123)
* /mod N1 N2 -- N3 N4 core:              Single precision.    (line  31)
* /string C-ADDR1 U1 N -- C-ADDR2 U2 string: Memory Blocks.   (line  65)
* /w -- U gforth:                        Address arithmetic.  (line 120)
* 0< N -- F core:                        Numeric comparison.  (line  21)
* 0<= N -- F gforth:                     Numeric comparison.  (line  23)
* 0<> N -- F core-ext:                   Numeric comparison.  (line  25)
* 0= N -- F core:                        Numeric comparison.  (line  27)
* 0> N -- F core-ext:                    Numeric comparison.  (line  29)
* 0>= N -- F gforth:                     Numeric comparison.  (line  31)
* 1+ N1 -- N2 core:                      Single precision.    (line  16)
* 1- N1 -- N2 core:                      Single precision.    (line  23)
* 1/f R1 -- R2 gforth:                   Floating Point.      (line  76)
* 2! W1 W2 A-ADDR -- core:               Memory Access.       (line  25)
* 2* N1 -- N2 core:                      Bitwise operations.  (line  19)
* 2, W1 W2 -- gforth:                    Dictionary allocation.
                                                              (line  48)
* 2/ N1 -- N2 core:                      Bitwise operations.  (line  25)
* 2>r D -- R:D core-ext:                 Return stack.        (line  21)
* 2@ A-ADDR -- W1 W2 core:               Memory Access.       (line  21)
* 2Constant W1 W2 "NAME" -- double:      Constants.           (line  29)
* 2drop W1 W2 -- core:                   Data stack.          (line  31)
* 2dup W1 W2 -- W1 W2 W1 W2 core:        Data stack.          (line  35)
* 2field: U1 "NAME" -- U2 gforth:        Forth200x Structures.
                                                              (line  35)
* 2Literal COMPILATION W1 W2 -- ; RUN-TIME -- W1 W2 double: Literals.
                                                              (line  53)
* 2nip W1 W2 W3 W4 -- W3 W4 gforth:      Data stack.          (line  33)
* 2over W1 W2 W3 W4 -- W1 W2 W3 W4 W1 W2 core: Data stack.    (line  37)
* 2r> R:D -- D core-ext:                 Return stack.        (line  23)
* 2r@ R:D -- R:D D core-ext:             Return stack.        (line  25)
* 2rdrop R:D -- gforth:                  Return stack.        (line  27)
* 2rot W1 W2 W3 W4 W5 W6 -- W3 W4 W5 W6 W1 W2 double-ext: Data stack.
                                                              (line  43)
* 2swap W1 W2 W3 W4 -- W3 W4 W1 W2 core: Data stack.          (line  41)
* 2tuck W1 W2 W3 W4 -- W3 W4 W1 W2 W3 W4 gforth: Data stack.  (line  39)
* 2Variable "NAME" -- double:            Variables.           (line  33)
* : "NAME" -- oof:                       The OOF base class.  (line  43)
* : "NAME" -- COLON-SYS core:            Colon Definitions.   (line  17)
* :: "NAME" -- oof:                      The OOF base class.  (line  55)
* :: CLASS "NAME" -- mini-oof:           Basic Mini-OOF Usage.
                                                              (line  32)
* :m "NAME" -- XT; RUN-TIME: OBJECT -- objects: Objects Glossary.
                                                              (line 103)
* :noname -- XT COLON-SYS core-ext:      Anonymous Definitions.
                                                              (line   9)
* ; COMPILATION COLON-SYS -- ; RUN-TIME NEST-SYS core: Colon Definitions.
                                                              (line  19)
* ;code COMPILATION. COLON-SYS1 -- COLON-SYS2 tools-ext: Code and ;code.
                                                              (line  27)
* ;m COLON-SYS --; RUN-TIME: -- objects: Objects Glossary.    (line 107)
* ;s R:W -- gforth:                      Calls and returns.   (line  47)
* < N1 N2 -- F core:                     Numeric comparison.  (line   9)
* <# -- core:                            Formatted numeric output.
                                                              (line  30)
* <<# -- gforth:                         Formatted numeric output.
                                                              (line  33)
* <= N1 N2 -- F gforth:                  Numeric comparison.  (line  11)
* <> N1 N2 -- F core-ext:                Numeric comparison.  (line  13)
* <bind> CLASS SELECTOR-XT -- XT objects: Objects Glossary.   (line   9)
* <compilation COMPILATION. ORIG COLON-SYS -- gforth: Combined words.
                                                              (line 100)
* <interpretation COMPILATION. ORIG COLON-SYS -- gforth: Combined words.
                                                              (line  96)
* <to-inst> W XT -- objects:             Objects Glossary.    (line 148)
* = N1 N2 -- F core:                     Numeric comparison.  (line  15)
* > N1 N2 -- F core:                     Numeric comparison.  (line  17)
* >= N1 N2 -- F gforth:                  Numeric comparison.  (line  19)
* >body XT -- A_ADDR core:               CREATE..DOES> details.
                                                              (line  49)
* >code-address XT -- C_ADDR gforth:     Threading Words.     (line  30)
* >definer XT -- DEFINER gforth:         Threading Words.     (line  87)
* >does-code XT -- A_ADDR gforth:        Threading Words.     (line  43)
* >float C-ADDR U -- F:... FLAG float:   Line input and conversion.
                                                              (line  43)
* >in -- ADDR core:                      The Text Interpreter.
                                                              (line 123)
* >l W -- gforth:                        Locals implementation.
                                                              (line  24)
* >name XT -- NT|0 gforth:               Name token.          (line  28)
* >number UD1 C-ADDR1 U1 -- UD2 C-ADDR2 U2 core: Line input and conversion.
                                                              (line  30)
* >order WID -- gforth:                  Word Lists.          (line  63)
* >r W -- R:W core:                      Return stack.        (line  13)
* ? A-ADDR -- tools:                     Examining.           (line  41)
* ?DO COMPILATION -- DO-SYS ; RUN-TIME W1 W2 -- | LOOP-SYS core-ext: Arbitrary control structures.
                                                              (line  59)
* ?dup W -- S:... W core:                Data stack.          (line  25)
* ?DUP-0=-IF COMPILATION -- ORIG ; RUN-TIME N -- N| gforth: Arbitrary control structures.
                                                              (line  55)
* ?DUP-IF COMPILATION -- ORIG ; RUN-TIME N -- N| gforth: Arbitrary control structures.
                                                              (line  50)
* ?LEAVE COMPILATION -- ; RUN-TIME F | F LOOP-SYS -- gforth: Arbitrary control structures.
                                                              (line  83)
* @ A-ADDR -- W core:                    Memory Access.       (line   6)
* @local# #NOFFSET -- W gforth:          Locals implementation.
                                                              (line  12)
* [ -- core:                             Literals.            (line  36)
* ['] COMPILATION. "NAME" -- ; RUN-TIME. -- XT core: Execution token.
                                                              (line  27)
* [+LOOP] N -- gforth:                   Interpreter Directives.
                                                              (line  72)
* [?DO] N-LIMIT N-INDEX -- gforth:       Interpreter Directives.
                                                              (line  64)
* [AGAIN] -- gforth:                     Interpreter Directives.
                                                              (line  80)
* [BEGIN] -- gforth:                     Interpreter Directives.
                                                              (line  76)
* [bind] COMPILE-TIME: "CLASS" "SELECTOR" -- ; RUN-TIME: ... OBJECT -- ... objects: Objects Glossary.
                                                              (line  15)
* [Char] COMPILATION '<SPACES>CCC' -- ; RUN-TIME -- C core: Displaying characters and strings.
                                                              (line  82)
* [COMP'] COMPILATION "NAME" -- ; RUN-TIME -- W XT gforth: Compilation token.
                                                              (line  24)
* [compile] COMPILATION "NAME" -- ; RUN-TIME ? -- ? core-ext: Macros.
                                                              (line  26)
* [current] COMPILE-TIME: "SELECTOR" -- ; RUN-TIME: ... OBJECT -- ... objects: Objects Glossary.
                                                              (line  48)
* [DO] N-LIMIT N-INDEX -- gforth:        Interpreter Directives.
                                                              (line  66)
* [ELSE] -- tools-ext:                   Interpreter Directives.
                                                              (line  38)
* [ENDIF] -- gforth:                     Interpreter Directives.
                                                              (line  51)
* [FOR] N -- gforth:                     Interpreter Directives.
                                                              (line  68)
* [IFDEF] "<SPACES>NAME" -- gforth:      Interpreter Directives.
                                                              (line  54)
* [IFUNDEF] "<SPACES>NAME" -- gforth:    Interpreter Directives.
                                                              (line  59)
* [IF] FLAG -- tools-ext:                Interpreter Directives.
                                                              (line  30)
* [LOOP] -- gforth:                      Interpreter Directives.
                                                              (line  70)
* [NEXT] N -- gforth:                    Interpreter Directives.
                                                              (line  74)
* [parent] COMPILE-TIME: "SELECTOR" -- ; RUN-TIME: ... OBJECT -- ... objects: Objects Glossary.
                                                              (line 126)
* [REPEAT] -- gforth:                    Interpreter Directives.
                                                              (line  84)
* [THEN] -- tools-ext:                   Interpreter Directives.
                                                              (line  47)
* [to-inst] COMPILE-TIME: "NAME" -- ; RUN-TIME: W -- objects: Objects Glossary.
                                                              (line 151)
* [UNTIL] FLAG -- gforth:                Interpreter Directives.
                                                              (line  78)
* [WHILE] FLAG -- gforth:                Interpreter Directives.
                                                              (line  82)
* [] N "NAME" -- oof:                    The OOF base class.  (line  49)
* \ COMPILATION 'CCC<NEWLINE>' -- ; RUN-TIME -- core-ext,block-ext: Comments.
                                                              (line  16)
* \c "REST-OF-LINE" -- gforth:           Declaring C Functions.
                                                              (line  76)
* \G COMPILATION 'CCC<NEWLINE>' -- ; RUN-TIME -- gforth: Comments.
                                                              (line  22)
* ] -- core:                             Literals.            (line  39)
* ]L COMPILATION: N -- ; RUN-TIME: -- N gforth: Literals.     (line  47)
* ~~ -- gforth:                          Debugging.           (line  28)
* abort ?? -- ?? core,exception-ext:     Exception Handling.  (line 209)
* ABORT" COMPILATION 'CCC"' -- ; RUN-TIME F -- core,exception-ext: Exception Handling.
                                                              (line 204)
* abs N -- U core:                       Single precision.    (line  35)
* accept C-ADDR +N1 -- +N2 core:         Line input and conversion.
                                                              (line  11)
* action-of INTERPRETATION "NAME" -- XT; COMPILATION "NAME" -- ; RUN-TIME -- XT gforth: Deferred Words.
                                                              (line  92)
* add-lib C-ADDR U -- gforth:            Declaring OS-level libraries.
                                                              (line  33)
* ADDRESS-UNIT-BITS -- N environment:    Address arithmetic.  (line 117)
* AGAIN COMPILATION DEST -- ; RUN-TIME -- core-ext: Arbitrary control structures.
                                                              (line  26)
* AHEAD COMPILATION -- ORIG ; RUN-TIME -- tools-ext: Arbitrary control structures.
                                                              (line  18)
* Alias XT "NAME" -- gforth:             Aliases.             (line  33)
* align -- core:                         Dictionary allocation.
                                                              (line  62)
* aligned C-ADDR -- A-ADDR core:         Address arithmetic.  (line  70)
* allocate U -- A-ADDR WIOR memory:      Heap Allocation.     (line  16)
* allot N -- core:                       Dictionary allocation.
                                                              (line  31)
* also -- search-ext:                    Word Lists.          (line  69)
* also-path C-ADDR LEN PATH-ADDR -- gforth: General Search Paths.
                                                              (line  23)
* and W1 W2 -- W core:                   Bitwise operations.  (line   6)
* arg U -- ADDR COUNT gforth:            OS command line arguments.
                                                              (line  41)
* argc -- ADDR gforth:                   OS command line arguments.
                                                              (line  55)
* argv -- ADDR gforth:                   OS command line arguments.
                                                              (line  59)
* asptr CLASS -- oof:                    Class Declaration.   (line  16)
* asptr O "NAME" -- oof:                 The OOF base class.  (line  47)
* assembler -- tools-ext:                Code and ;code.      (line  19)
* assert( -- gforth:                     Assertions.          (line  43)
* assert-level -- A-ADDR gforth:         Assertions.          (line  61)
* assert0( -- gforth:                    Assertions.          (line  30)
* assert1( -- gforth:                    Assertions.          (line  33)
* assert2( -- gforth:                    Assertions.          (line  36)
* assert3( -- gforth:                    Assertions.          (line  39)
* ASSUME-LIVE ORIG -- ORIG gforth:       Where are locals visible by name?.
                                                              (line 122)
* at-xy U1 U2 -- facility:               Terminal output.     (line   9)
* base -- A-ADDR core:                   Number Conversion.   (line  62)
* base-execute I*X XT U -- J*X gforth:   Number Conversion.   (line  58)
* BEGIN COMPILATION -- DEST ; RUN-TIME -- core: Arbitrary control structures.
                                                              (line  22)
* begin-structure "NAME" -- STRUCT-SYS 0 X:structures: Forth200x Structures.
                                                              (line  25)
* bin FAM1 -- FAM2 file:                 General files.       (line  15)
* bind ... "CLASS" "SELECTOR" -- ... objects: Objects Glossary.
                                                              (line   6)
* bind O "NAME" -- oof:                  The OOF base class.  (line  66)
* bind' "CLASS" "SELECTOR" -- XT objects: Objects Glossary.   (line  12)
* bl -- C-CHAR core:                     Displaying characters and strings.
                                                              (line   9)
* blank C-ADDR U -- string:              Memory Blocks.       (line  38)
* blk -- ADDR block:                     Input Sources.       (line  23)
* block U -- A-ADDR block:               Blocks.              (line 147)
* block-included A-ADDR U -- gforth:     Blocks.              (line 208)
* block-offset -- ADDR gforth:           Blocks.              (line 126)
* block-position U -- block:             Blocks.              (line 136)
* bootmessage -- gforth:                 Modifying the Startup Sequence.
                                                              (line  45)
* bound CLASS ADDR "NAME" -- oof:        The OOF base class.  (line  68)
* bounds ADDR U -- ADDR+U ADDR gforth:   Memory Blocks.       (line  69)
* break" 'CCC"' -- gforth:               Singlestep Debugger. (line  67)
* break: -- gforth:                      Singlestep Debugger. (line  65)
* broken-pipe-error -- N gforth:         Pipes.               (line  21)
* buffer U -- A-ADDR block:              Blocks.              (line 154)
* bye -- tools-ext:                      Leaving Gforth.      (line  12)
* c! C C-ADDR -- core:                   Memory Access.       (line  18)
* C" COMPILATION "CCC<QUOTE>" -- ; RUN-TIME -- C-ADDR core-ext: Displaying characters and strings.
                                                              (line  73)
* c, C -- core:                          Dictionary allocation.
                                                              (line  38)
* c-function "FORTH-NAME" "C-NAME" "{TYPE}" "--" "TYPE" -- gforth: Declaring C Functions.
                                                              (line  79)
* c-library "NAME" -- gforth:            Defining library interfaces.
                                                              (line  36)
* c-library-name C-ADDR U -- gforth:     Defining library interfaces.
                                                              (line  33)
* c@ C-ADDR -- C core:                   Memory Access.       (line  15)
* call-c ... W -- ... gforth:            Low-Level C Interface Words.
                                                              (line  13)
* case COMPILATION -- CASE-SYS ; RUN-TIME -- core-ext: Arbitrary control structures.
                                                              (line  98)
* catch ... XT -- ... N exception:       Exception Handling.  (line  50)
* cell -- U gforth:                      Address arithmetic.  (line  67)
* cell% -- ALIGN SIZE gforth:            Structure Glossary.  (line  24)
* cell+ A-ADDR1 -- A-ADDR2 core:         Address arithmetic.  (line  64)
* cells N1 -- N2 core:                   Address arithmetic.  (line  61)
* cfalign -- gforth:                     Dictionary allocation.
                                                              (line  81)
* cfaligned ADDR1 -- ADDR2 gforth:       Address arithmetic.  (line 113)
* cfield: U1 "NAME" -- U2 X:structures:  Forth200x Structures.
                                                              (line  31)
* char '<SPACES>CCC' -- C core:          Displaying characters and strings.
                                                              (line  78)
* char% -- ALIGN SIZE gforth:            Structure Glossary.  (line  26)
* char+ C-ADDR1 -- C-ADDR2 core:         Address arithmetic.  (line  58)
* chars N1 -- N2 core:                   Address arithmetic.  (line  55)
* class "NAME" -- oof:                   The OOF base class.  (line  20)
* class CLASS -- CLASS SELECTORS VARS mini-oof: Basic Mini-OOF Usage.
                                                              (line  20)
* class PARENT-CLASS -- ALIGN OFFSET objects: Objects Glossary.
                                                              (line  18)
* class->map CLASS -- MAP objects:       Objects Glossary.    (line  22)
* class-inst-size CLASS -- ADDR objects: Objects Glossary.    (line  27)
* class-override! XT SEL-XT CLASS-MAP -- objects: Objects Glossary.
                                                              (line  31)
* class-previous CLASS -- objects:       Objects Glossary.    (line  34)
* class; -- oof:                         Class Declaration.   (line  42)
* class>order CLASS -- objects:          Objects Glossary.    (line  38)
* class? O -- FLAG oof:                  The OOF base class.  (line  24)
* clear-libs -- gforth:                  Declaring OS-level libraries.
                                                              (line  30)
* clear-path PATH-ADDR -- gforth:        General Search Paths.
                                                              (line  20)
* clearstack ... -- gforth:              Examining.           (line  33)
* clearstacks ... -- gforth:             Examining.           (line  36)
* close-file WFILEID -- WIOR file:       General files.       (line  26)
* close-pipe WFILEID -- WRETVAL WIOR gforth: Pipes.           (line  12)
* cmove C-FROM C-TO U -- string:         Memory Blocks.       (line  25)
* cmove> C-FROM C-TO U -- string:        Memory Blocks.       (line  30)
* code "NAME" -- COLON-SYS tools-ext:    Code and ;code.      (line  23)
* code-address! C_ADDR XT -- gforth:     Threading Words.     (line  33)
* common-list LIST1 LIST2 -- LIST3 gforth-internal: Locals implementation.
                                                              (line  94)
* COMP' "NAME" -- W XT gforth:           Compilation token.   (line  27)
* compare C-ADDR1 U1 C-ADDR2 U2 -- N string: Memory Blocks.   (line  41)
* compilation> COMPILATION. -- ORIG COLON-SYS gforth: Combined words.
                                                              (line  98)
* compile, XT -- core-ext:               Macros.              (line  90)
* compile-lp+! N -- gforth:              Locals implementation.
                                                              (line  34)
* compile-only -- gforth:                Interpretation and Compilation Semantics.
                                                              (line  36)
* const-does> RUN-TIME: W*UW R*UR UW UR "NAME" -- gforth: Const-does>.
                                                              (line   9)
* Constant W "NAME" -- core:             Constants.           (line  24)
* construct ... OBJECT -- objects:       Objects Glossary.    (line  41)
* context -- ADDR gforth:                Word Lists.          (line 139)
* convert UD1 C-ADDR1 -- UD2 C-ADDR2 core-ext-obsolescent: Line input and conversion.
                                                              (line  53)
* count C-ADDR1 -- C-ADDR2 U core:       String Formats.      (line  19)
* cputime -- DUSER DSYSTEM gforth:       Keeping track of Time.
                                                              (line  16)
* cr -- core:                            Displaying characters and strings.
                                                              (line  48)
* Create "NAME" -- core:                 CREATE.              (line  19)
* create-file C-ADDR U WFAM -- WFILEID WIOR file: General files.
                                                              (line  24)
* create-interpret/compile "NAME" -- gforth: Combined words.  (line  92)
* CS-PICK ... U -- ... DESTU tools-ext:  Arbitrary control structures.
                                                              (line  28)
* CS-ROLL DESTU/ORIGU .. DEST0/ORIG0 U -- .. DEST0/ORIG0 DESTU/ORIGU tools-ext: Arbitrary control structures.
                                                              (line  30)
* current -- ADDR gforth:                Word Lists.          (line 136)
* current' "SELECTOR" -- XT objects:     Objects Glossary.    (line  45)
* current-interface -- ADDR objects:     Objects Glossary.    (line  51)
* d+ D1 D2 -- D double:                  Double precision.    (line  25)
* d- D1 D2 -- D double:                  Double precision.    (line  27)
* d. D -- double:                        Simple numeric output.
                                                              (line  36)
* d.r D N -- double:                     Simple numeric output.
                                                              (line  44)
* d0< D -- F double:                     Numeric comparison.  (line  62)
* d0<= D -- F gforth:                    Numeric comparison.  (line  64)
* d0<> D -- F gforth:                    Numeric comparison.  (line  66)
* d0= D -- F double:                     Numeric comparison.  (line  68)
* d0> D -- F gforth:                     Numeric comparison.  (line  70)
* d0>= D -- F gforth:                    Numeric comparison.  (line  72)
* d2* D1 -- D2 double:                   Bitwise operations.  (line  22)
* d2/ D1 -- D2 double:                   Bitwise operations.  (line  29)
* d< D1 D2 -- F double:                  Numeric comparison.  (line  50)
* d<= D1 D2 -- F gforth:                 Numeric comparison.  (line  52)
* d<> D1 D2 -- F gforth:                 Numeric comparison.  (line  54)
* d= D1 D2 -- F double:                  Numeric comparison.  (line  56)
* d> D1 D2 -- F gforth:                  Numeric comparison.  (line  58)
* d>= D1 D2 -- F gforth:                 Numeric comparison.  (line  60)
* d>f D -- R float:                      Floating Point.      (line  22)
* d>s D -- N double:                     Double precision.    (line  23)
* dabs D -- UD double:                   Double precision.    (line  31)
* dbg "NAME" -- gforth:                  Singlestep Debugger. (line  63)
* dec. N -- gforth:                      Simple numeric output.
                                                              (line  15)
* decimal -- core:                       Number Conversion.   (line  71)
* Defer "NAME" -- gforth:                Deferred Words.      (line  77)
* defer -- oof:                          Class Declaration.   (line  21)
* defer! XT XT-DEFERRED -- gforth:       Deferred Words.      (line  81)
* defer@ XT-DEFERRED -- XT gforth:       Deferred Words.      (line  88)
* defers COMPILATION "NAME" -- ; RUN-TIME ... -- ... gforth: Deferred Words.
                                                              (line  95)
* definer! DEFINER XT -- gforth:         Threading Words.     (line  92)
* defines XT CLASS "NAME" -- mini-oof:   Basic Mini-OOF Usage.
                                                              (line  26)
* definitions -- oof:                    The OOF base class.  (line  22)
* definitions -- search:                 Word Lists.          (line  33)
* delete-file C-ADDR U -- WIOR file:     General files.       (line  28)
* depth -- +N core:                      Examining.           (line  25)
* df! R DF-ADDR -- float-ext:            Memory Access.       (line  46)
* df@ DF-ADDR -- R float-ext:            Memory Access.       (line  42)
* dfalign -- float-ext:                  Dictionary allocation.
                                                              (line  74)
* dfaligned C-ADDR -- DF-ADDR float-ext: Address arithmetic.  (line 105)
* dffield: U1 "NAME" -- U2 X:structures: Forth200x Structures.
                                                              (line  41)
* dfloat% -- ALIGN SIZE gforth:          Structure Glossary.  (line  28)
* dfloat+ DF-ADDR1 -- DF-ADDR2 float-ext: Address arithmetic. (line 102)
* dfloats N1 -- N2 float-ext:            Address arithmetic.  (line  98)
* dict-new ... CLASS -- OBJECT objects:  Objects Glossary.    (line  54)
* discode ADDR U -- gforth:              Common Disassembler. (line   9)
* dispose -- oof:                        The OOF base class.  (line  34)
* dmax D1 D2 -- D double:                Double precision.    (line  35)
* dmin D1 D2 -- D double:                Double precision.    (line  33)
* dnegate D1 -- D2 double:               Double precision.    (line  29)
* DO COMPILATION -- DO-SYS ; RUN-TIME W1 W2 -- LOOP-SYS core: Arbitrary control structures.
                                                              (line  69)
* docol: -- ADDR gforth:                 Threading Words.     (line  66)
* docon: -- ADDR gforth:                 Threading Words.     (line  69)
* dodefer: -- ADDR gforth:               Threading Words.     (line  78)
* does-code! A_ADDR XT -- gforth:        Threading Words.     (line  52)
* does-handler! A_ADDR -- gforth:        Threading Words.     (line  56)
* DOES> COMPILATION COLON-SYS1 -- COLON-SYS2 ; RUN-TIME NEST-SYS -- core: CREATE..DOES> details.
                                                              (line   6)
* dofield: -- ADDR gforth:               Threading Words.     (line  81)
* DONE COMPILATION ORIG -- ; RUN-TIME -- gforth: Arbitrary control structures.
                                                              (line  87)
* double% -- ALIGN SIZE gforth:          Structure Glossary.  (line  30)
* douser: -- ADDR gforth:                Threading Words.     (line  75)
* dovar: -- ADDR gforth:                 Threading Words.     (line  72)
* dpl -- A-ADDR gforth:                  Number Conversion.   (line  51)
* drop W -- core:                        Data stack.          (line   6)
* du< UD1 UD2 -- F double-ext:           Numeric comparison.  (line  74)
* du<= UD1 UD2 -- F gforth:              Numeric comparison.  (line  76)
* du> UD1 UD2 -- F gforth:               Numeric comparison.  (line  78)
* du>= UD1 UD2 -- F gforth:              Numeric comparison.  (line  80)
* dump ADDR U -- tools:                  Examining.           (line  44)
* dup W -- W W core:                     Data stack.          (line  10)
* early -- oof:                          Class Declaration.   (line  26)
* edit-line C-ADDR N1 N2 -- N3 gforth:   Line input and conversion.
                                                              (line  18)
* ekey -- U facility-ext:                Single-key input.    (line  38)
* ekey>char U -- U FALSE | C TRUE facility-ext: Single-key input.
                                                              (line  41)
* ekey>fkey U1 -- U2 F X:ekeys:          Single-key input.    (line  44)
* ekey? -- FLAG facility-ext:            Single-key input.    (line  48)
* ELSE COMPILATION ORIG1 -- ORIG2 ; RUN-TIME -- core: Arbitrary control structures.
                                                              (line  40)
* emit C -- core:                        Displaying characters and strings.
                                                              (line  18)
* emit-file C WFILEID -- WIOR gforth:    General files.       (line  54)
* empty-buffer BUFFER -- gforth:         Blocks.              (line 167)
* empty-buffers -- block-ext:            Blocks.              (line 163)
* end-c-library -- gforth:               Defining library interfaces.
                                                              (line  39)
* end-class ALIGN OFFSET "NAME" -- objects: Objects Glossary. (line  57)
* end-class CLASS SELECTORS VARS "NAME" -- mini-oof: Basic Mini-OOF Usage.
                                                              (line  23)
* end-class-noname ALIGN OFFSET -- CLASS objects: Objects Glossary.
                                                              (line  61)
* end-code COLON-SYS -- gforth:          Code and ;code.      (line  25)
* end-interface "NAME" -- objects:       Objects Glossary.    (line  64)
* end-interface-noname -- INTERFACE objects: Objects Glossary.
                                                              (line  68)
* end-methods -- objects:                Objects Glossary.    (line  71)
* end-struct ALIGN SIZE "NAME" -- gforth: Structure Glossary. (line  32)
* end-structure STRUCT-SYS +N -- X:structures: Forth200x Structures.
                                                              (line  27)
* endcase COMPILATION CASE-SYS -- ; RUN-TIME X -- core-ext: Arbitrary control structures.
                                                              (line 100)
* ENDIF COMPILATION ORIG -- ; RUN-TIME -- gforth: Arbitrary control structures.
                                                              (line  48)
* endof COMPILATION CASE-SYS1 OF-SYS -- CASE-SYS2 ; RUN-TIME -- core-ext: Arbitrary control structures.
                                                              (line 104)
* endscope COMPILATION SCOPE -- ; RUN-TIME -- gforth: Where are locals visible by name?.
                                                              (line  13)
* endtry COMPILATION -- ; RUN-TIME R:SYS1 -- gforth: Exception Handling.
                                                              (line  94)
* endtry-iferror COMPILATION ORIG1 -- ORIG2 ; RUN-TIME R:SYS1 -- gforth: Exception Handling.
                                                              (line 173)
* endwith -- oof:                        The OOF base class.  (line  88)
* environment-wordlist -- WID gforth:    Environmental Queries.
                                                              (line  29)
* environment? C-ADDR U -- FALSE / ... TRUE core: Environmental Queries.
                                                              (line  24)
* erase ADDR U -- core-ext:              Memory Blocks.       (line  22)
* evaluate ... ADDR U -- ... core,block: Input Sources.       (line  40)
* exception ADDR U -- N gforth:          Exception Handling.  (line  31)
* execute XT -- core:                    Execution token.     (line  53)
* execute-parsing ... ADDR U XT -- ... gforth: The Input Stream.
                                                              (line  65)
* execute-parsing-file I*X FILEID XT -- J*X gforth: The Input Stream.
                                                              (line  75)
* EXIT COMPILATION -- ; RUN-TIME NEST-SYS -- core: Calls and returns.
                                                              (line  42)
* exitm -- objects:                      Objects Glossary.    (line  75)
* expect C-ADDR +N -- core-ext-obsolescent: Line input and conversion.
                                                              (line  56)
* f! R F-ADDR -- float:                  Memory Access.       (line  31)
* f* R1 R2 -- R3 float:                  Floating Point.      (line  30)
* f** R1 R2 -- R3 float-ext:             Floating Point.      (line  49)
* f+ R1 R2 -- R3 float:                  Floating Point.      (line  26)
* f, F -- gforth:                        Dictionary allocation.
                                                              (line  41)
* f- R1 R2 -- R3 float:                  Floating Point.      (line  28)
* f. R -- float-ext:                     Simple numeric output.
                                                              (line  53)
* f.rdp RF +NR +ND +NP -- gforth:        Simple numeric output.
                                                              (line  65)
* f.s -- gforth:                         Examining.           (line  13)
* f/ R1 R2 -- R3 float:                  Floating Point.      (line  32)
* f0< R -- F float:                      Floating Point.      (line 153)
* f0<= R -- F gforth:                    Floating Point.      (line 155)
* f0<> R -- F gforth:                    Floating Point.      (line 157)
* f0= R -- F float:                      Floating Point.      (line 159)
* f0> R -- F gforth:                     Floating Point.      (line 161)
* f0>= R -- F gforth:                    Floating Point.      (line 163)
* f2* R1 -- R2 gforth:                   Floating Point.      (line  70)
* f2/ R1 -- R2 gforth:                   Floating Point.      (line  73)
* f< R1 R2 -- F float:                   Floating Point.      (line 145)
* f<= R1 R2 -- F gforth:                 Floating Point.      (line 147)
* f<> R1 R2 -- F gforth:                 Floating Point.      (line 143)
* f= R1 R2 -- F gforth:                  Floating Point.      (line 141)
* f> R1 R2 -- F gforth:                  Floating Point.      (line 149)
* f>= R1 R2 -- F gforth:                 Floating Point.      (line 151)
* f>buf-rdp RF C-ADDR +NR +ND +NP -- gforth: Formatted numeric output.
                                                              (line  79)
* f>d R -- D float:                      Floating Point.      (line  24)
* f>l R -- gforth:                       Locals implementation.
                                                              (line  26)
* f>str-rdp RF +NR +ND +NP -- C-ADDR NR gforth: Formatted numeric output.
                                                              (line  73)
* f@ F-ADDR -- R float:                  Memory Access.       (line  28)
* f@local# #NOFFSET -- R gforth:         Locals implementation.
                                                              (line  14)
* fabs R1 -- R2 float-ext:               Floating Point.      (line  36)
* facos R1 -- R2 float-ext:              Floating Point.      (line 101)
* facosh R1 -- R2 float-ext:             Floating Point.      (line 117)
* falign -- float:                       Dictionary allocation.
                                                              (line  66)
* faligned C-ADDR -- F-ADDR float:       Address arithmetic.  (line  83)
* falog R1 -- R2 float-ext:              Floating Point.      (line  67)
* false -- F core-ext:                   Boolean Flags.       (line  14)
* fasin R1 -- R2 float-ext:              Floating Point.      (line  99)
* fasinh R1 -- R2 float-ext:             Floating Point.      (line 115)
* fatan R1 -- R2 float-ext:              Floating Point.      (line 103)
* fatan2 R1 R2 -- R3 float-ext:          Floating Point.      (line 105)
* fatanh R1 -- R2 float-ext:             Floating Point.      (line 119)
* fconstant R "NAME" -- float:           Constants.           (line  31)
* fcos R1 -- R2 float-ext:               Floating Point.      (line  92)
* fcosh R1 -- R2 float-ext:              Floating Point.      (line 111)
* fdepth -- +N float:                    Examining.           (line  29)
* fdrop R -- float:                      Floating point stack.
                                                              (line  19)
* fdup R -- R R float:                   Floating point stack.
                                                              (line  23)
* fe. R -- float-ext:                    Simple numeric output.
                                                              (line  57)
* fexp R1 -- R2 float-ext:               Floating Point.      (line  54)
* fexpm1 R1 -- R2 float-ext:             Floating Point.      (line  56)
* ffield: U1 "NAME" -- U2 X:structures:  Forth200x Structures.
                                                              (line  37)
* field ALIGN1 OFFSET1 ALIGN SIZE "NAME" -- ALIGN2 OFFSET2 gforth: Structure Glossary.
                                                              (line  37)
* field: U1 "NAME" -- U2 X:structures:   Forth200x Structures.
                                                              (line  33)
* file-position WFILEID -- UD WIOR file: General files.       (line  60)
* file-size WFILEID -- UD WIOR file:     General files.       (line  64)
* file-status C-ADDR U -- WFAM WIOR file-ext: General files.  (line  58)
* fill C-ADDR U C -- core:               Memory Blocks.       (line  35)
* find C-ADDR -- XT +-1 | C-ADDR 0 core,search: Word Lists.   (line  88)
* find-name C-ADDR U -- NT | 0 gforth:   Name token.          (line  20)
* FLiteral COMPILATION R -- ; RUN-TIME -- R float: Literals.  (line  57)
* fln R1 -- R2 float-ext:                Floating Point.      (line  59)
* flnp1 R1 -- R2 float-ext:              Floating Point.      (line  61)
* float -- U gforth:                     Address arithmetic.  (line  79)
* float% -- ALIGN SIZE gforth:           Structure Glossary.  (line  44)
* float+ F-ADDR1 -- F-ADDR2 float:       Address arithmetic.  (line  76)
* floating-stack -- N environment:       Floating point stack.
                                                              (line  15)
* floats N1 -- N2 float:                 Address arithmetic.  (line  73)
* flog R1 -- R2 float-ext:               Floating Point.      (line  64)
* floor R1 -- R2 float:                  Floating Point.      (line  42)
* FLOORED -- F environment:              Single precision.    (line  41)
* flush -- block:                        Blocks.              (line 182)
* flush-file WFILEID -- WIOR file-ext:   General files.       (line  56)
* flush-icache C-ADDR U -- gforth:       Code and ;code.      (line  29)
* fm/mod D1 N1 -- N2 N3 core:            Mixed precision.     (line  25)
* fmax R1 R2 -- R3 float:                Floating Point.      (line  38)
* fmin R1 R2 -- R3 float:                Floating Point.      (line  40)
* fnegate R1 -- R2 float:                Floating Point.      (line  34)
* fnip R1 R2 -- R2 gforth:               Floating point stack.
                                                              (line  21)
* FOR COMPILATION -- DO-SYS ; RUN-TIME U -- LOOP-SYS gforth: Arbitrary control structures.
                                                              (line  71)
* form -- UROWS UCOLS gforth:            Terminal output.     (line  17)
* Forth -- search-ext:                   Word Lists.          (line  74)
* forth-wordlist -- WID search:          Word Lists.          (line  28)
* fover R1 R2 -- R1 R2 R1 float:         Floating point stack.
                                                              (line  25)
* fp! F-ADDR -- F:... gforth:            Stack pointer manipulation.
                                                              (line  19)
* fp0 -- A-ADDR gforth:                  Stack pointer manipulation.
                                                              (line  14)
* fp@ F:... -- F-ADDR gforth:            Stack pointer manipulation.
                                                              (line  17)
* fpath -- PATH-ADDR gforth:             Source Search Paths. (line  10)
* fpick F:... U -- F:... R gforth:       Floating point stack.
                                                              (line  31)
* free A-ADDR -- WIOR memory:            Heap Allocation.     (line  23)
* frot R1 R2 R3 -- R2 R3 R1 float:       Floating point stack.
                                                              (line  34)
* fround R1 -- R2 float:                 Floating Point.      (line  46)
* fs. R -- float-ext:                    Simple numeric output.
                                                              (line  61)
* fsin R1 -- R2 float-ext:               Floating Point.      (line  90)
* fsincos R1 -- R2 R3 float-ext:         Floating Point.      (line  94)
* fsinh R1 -- R2 float-ext:              Floating Point.      (line 109)
* fsqrt R1 -- R2 float-ext:              Floating Point.      (line  52)
* fswap R1 R2 -- R2 R1 float:            Floating point stack.
                                                              (line  29)
* ftan R1 -- R2 float-ext:               Floating Point.      (line  97)
* ftanh R1 -- R2 float-ext:              Floating Point.      (line 113)
* ftuck R1 R2 -- R2 R1 R2 gforth:        Floating point stack.
                                                              (line  27)
* fvariable "NAME" -- float:             Variables.           (line  35)
* f~ R1 R2 R3 -- FLAG float-ext:         Floating Point.      (line 137)
* f~abs R1 R2 R3 -- FLAG gforth:         Floating Point.      (line 134)
* f~rel R1 R2 R3 -- FLAG gforth:         Floating Point.      (line 131)
* get-block-fid -- WFILEID gforth:       Blocks.              (line 132)
* get-current -- WID search:             Word Lists.          (line  37)
* get-order -- WIDN .. WID1 N search:    Word Lists.          (line  43)
* getenv C-ADDR1 U1 -- C-ADDR2 U2 gforth: Passing Commands to the OS.
                                                              (line  24)
* gforth -- C-ADDR U gforth-environment: Environmental Queries.
                                                              (line  33)
* heap-new ... CLASS -- OBJECT objects:  Objects Glossary.    (line  78)
* here -- ADDR core:                     Dictionary allocation.
                                                              (line  24)
* hex -- core-ext:                       Number Conversion.   (line  67)
* hex. U -- gforth:                      Simple numeric output.
                                                              (line  18)
* hold CHAR -- core:                     Formatted numeric output.
                                                              (line  53)
* how: -- oof:                           Class Declaration.   (line  39)
* i R:N -- R:N N core:                   Counted Loops.       (line  23)
* id. NT -- gforth:                      Name token.          (line  49)
* IF COMPILATION -- ORIG ; RUN-TIME F -- core: Arbitrary control structures.
                                                              (line  16)
* iferror COMPILATION ORIG1 -- ORIG2 ; RUN-TIME -- gforth: Exception Handling.
                                                              (line  97)
* immediate -- core:                     Interpretation and Compilation Semantics.
                                                              (line  32)
* implementation INTERFACE -- objects:   Objects Glossary.    (line  81)
* include ... "FILE" -- ... gforth:      Forth source files.  (line  46)
* include-file I*X WFILEID -- J*X file:  Forth source files.  (line  32)
* included I*X C-ADDR U -- J*X file:     Forth source files.  (line  36)
* included? C-ADDR U -- F gforth:        Forth source files.  (line  39)
* infile-execute ... XT FILE-ID -- ... gforth: Redirection.   (line  24)
* init ... -- oof:                       The OOF base class.  (line  32)
* init-asm -- gforth:                    Code and ;code.      (line  21)
* init-object ... CLASS OBJECT -- objects: Objects Glossary.  (line  85)
* inst-value ALIGN1 OFFSET1 "NAME" -- ALIGN2 OFFSET2 objects: Objects Glossary.
                                                              (line  89)
* inst-var ALIGN1 OFFSET1 ALIGN SIZE "NAME" -- ALIGN2 OFFSET2 objects: Objects Glossary.
                                                              (line  93)
* interface -- objects:                  Objects Glossary.    (line  97)
* interpret/compile: INTERP-XT COMP-XT "NAME" -- gforth: Combined words.
                                                              (line   9)
* interpretation> COMPILATION. -- ORIG COLON-SYS gforth: Combined words.
                                                              (line  94)
* invert W1 -- W2 core:                  Bitwise operations.  (line  12)
* IS COMPILATION/INTERPRETATION "NAME-DEFERRED" -- ; RUN-TIME XT -- gforth: Deferred Words.
                                                              (line  84)
* is XT "NAME" -- oof:                   The OOF base class.  (line  72)
* j R:W R:W1 R:W2 -- W R:W R:W1 R:W2 core: Counted Loops.     (line  25)
* k R:W R:W1 R:W2 R:W3 R:W4 -- W R:W R:W1 R:W2 R:W3 R:W4 gforth: Counted Loops.
                                                              (line  27)
* k-alt-mask -- U X:ekeys:               Single-key input.    (line 111)
* k-ctrl-mask -- U X:ekeys:              Single-key input.    (line 109)
* k-delete -- U X:ekeys:                 Single-key input.    (line  74)
* k-down -- U X:ekeys:                   Single-key input.    (line  59)
* k-end -- U X:ekeys:                    Single-key input.    (line  64)
* k-f1 -- U X:ekeys:                     Single-key input.    (line  78)
* k-f10 -- U X:ekeys:                    Single-key input.    (line  96)
* k-f11 -- U X:ekeys:                    Single-key input.    (line  98)
* k-f12 -- U X:ekeys:                    Single-key input.    (line 100)
* k-f2 -- U X:ekeys:                     Single-key input.    (line  80)
* k-f3 -- U X:ekeys:                     Single-key input.    (line  82)
* k-f4 -- U X:ekeys:                     Single-key input.    (line  84)
* k-f5 -- U X:ekeys:                     Single-key input.    (line  86)
* k-f6 -- U X:ekeys:                     Single-key input.    (line  88)
* k-f7 -- U X:ekeys:                     Single-key input.    (line  90)
* k-f8 -- U X:ekeys:                     Single-key input.    (line  92)
* k-f9 -- U X:ekeys:                     Single-key input.    (line  94)
* k-home -- U X:ekeys:                   Single-key input.    (line  61)
* k-insert -- U X:ekeys:                 Single-key input.    (line  72)
* k-left -- U X:ekeys:                   Single-key input.    (line  53)
* k-next -- U X:ekeys:                   Single-key input.    (line  69)
* k-prior -- U X:ekeys:                  Single-key input.    (line  66)
* k-right -- U X:ekeys:                  Single-key input.    (line  55)
* k-shift-mask -- U X:ekeys:             Single-key input.    (line 107)
* k-up -- U X:ekeys:                     Single-key input.    (line  57)
* key -- CHAR core:                      Single-key input.    (line   9)
* key-file WFILEID -- C gforth:          General files.       (line  37)
* key? -- FLAG facility:                 Single-key input.    (line  12)
* key?-file WFILEID -- F gforth:         General files.       (line  44)
* l! W C-ADDR -- gforth:                 Memory Access.       (line  65)
* laddr# #NOFFSET -- C-ADDR gforth:      Locals implementation.
                                                              (line  16)
* latest -- NT gforth:                   Name token.          (line  24)
* latestxt -- XT gforth:                 Anonymous Definitions.
                                                              (line  28)
* LEAVE COMPILATION -- ; RUN-TIME LOOP-SYS -- core: Arbitrary control structures.
                                                              (line  81)
* lib-error -- C-ADDR U gforth:          Low-Level C Interface Words.
                                                              (line  10)
* lib-sym C-ADDR1 U1 U2 -- U3 gforth:    Low-Level C Interface Words.
                                                              (line   8)
* link "NAME" -- CLASS ADDR oof:         The OOF base class.  (line  70)
* list U -- block-ext:                   Blocks.              (line 139)
* list-size LIST -- U gforth-internal:   Locals implementation.
                                                              (line  98)
* Literal COMPILATION N -- ; RUN-TIME -- N core: Literals.    (line  42)
* load I*X N -- J*X block:               Blocks.              (line 185)
* LOOP COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 -- | LOOP-SYS2 core: Arbitrary control structures.
                                                              (line  73)
* lp! C-ADDR -- gforth:                  Stack pointer manipulation.
                                                              (line  35)
* lp! C-ADDR -- gforth <1>:              Locals implementation.
                                                              (line  22)
* lp+!# #NOFFSET -- gforth:              Locals implementation.
                                                              (line  18)
* lp0 -- A-ADDR gforth:                  Stack pointer manipulation.
                                                              (line  29)
* lp@ -- ADDR gforth:                    Stack pointer manipulation.
                                                              (line  33)
* lshift U1 N -- U2 core:                Bitwise operations.  (line  14)
* m* N1 N2 -- D core:                    Mixed precision.     (line  14)
* m*/ D1 N2 U3 -- DQUOT double:          Mixed precision.     (line  18)
* m+ D1 N -- D2 double:                  Mixed precision.     (line   6)
* m: -- XT COLON-SYS; RUN-TIME: OBJECT -- objects: Objects Glossary.
                                                              (line 100)
* marker "<SPACES> NAME" -- core-ext:    Forgetting words.    (line   9)
* max N1 N2 -- N core:                   Single precision.    (line  39)
* maxalign -- gforth:                    Dictionary allocation.
                                                              (line  78)
* maxaligned ADDR1 -- ADDR2 gforth:      Address arithmetic.  (line 109)
* maxdepth-.s -- ADDR gforth:            Examining.           (line  18)
* method -- oof:                         Class Declaration.   (line  29)
* method M V "NAME" -- M' V mini-oof:    Basic Mini-OOF Usage.
                                                              (line  14)
* method XT "NAME" -- objects:           Objects Glossary.    (line 110)
* methods CLASS -- objects:              Objects Glossary.    (line 114)
* min N1 N2 -- N core:                   Single precision.    (line  37)
* mod N1 N2 -- N core:                   Single precision.    (line  29)
* move C-FROM C-TO UCOUNT -- core:       Memory Blocks.       (line  18)
* ms U -- facility-ext:                  Keeping track of Time.
                                                              (line   6)
* naligned ADDR1 N -- ADDR2 gforth:      Structure Glossary.  (line  46)
* name -- C-ADDR U gforth-obsolete:      The Input Stream.    (line  36)
* name>comp NT -- W XT gforth:           Name token.          (line  43)
* name>int NT -- XT gforth:              Name token.          (line  33)
* name>string NT -- ADDR COUNT gforth:   Name token.          (line  46)
* name?int NT -- XT gforth:              Name token.          (line  39)
* needs ... "NAME" -- ... gforth:        Forth source files.  (line  58)
* negate N1 -- N2 core:                  Single precision.    (line  33)
* new -- O oof:                          The OOF base class.  (line  39)
* new CLASS -- O mini-oof:               Basic Mini-OOF Usage.
                                                              (line  29)
* new[] N -- O oof:                      The OOF base class.  (line  41)
* NEXT COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 -- | LOOP-SYS2 gforth: Arbitrary control structures.
                                                              (line  79)
* next-arg -- ADDR U gforth:             OS command line arguments.
                                                              (line  15)
* nextname C-ADDR U -- gforth:           Supplying names.     (line  10)
* nip W1 W2 -- W2 core-ext:              Data stack.          (line   8)
* noname -- gforth:                      Anonymous Definitions.
                                                              (line  23)
* nothrow -- gforth:                     Exception Handling.  (line  52)
* object -- A-ADDR mini-oof:             Basic Mini-OOF Usage.
                                                              (line  11)
* object -- CLASS objects:               Objects Glossary.    (line 119)
* of COMPILATION -- OF-SYS ; RUN-TIME X1 X2 -- |X1 core-ext: Arbitrary control structures.
                                                              (line 102)
* off A-ADDR -- gforth:                  Boolean Flags.       (line  20)
* on A-ADDR -- gforth:                   Boolean Flags.       (line  17)
* Only -- search-ext:                    Word Lists.          (line  78)
* open-blocks C-ADDR U -- gforth:        Blocks.              (line 120)
* open-file C-ADDR U WFAM -- WFILEID WIOR file: General files.
                                                              (line  22)
* open-lib C-ADDR1 U1 -- U2 gforth:      Low-Level C Interface Words.
                                                              (line   6)
* open-path-file ADDR1 U1 PATH-ADDR -- WFILEID ADDR2 U2 0 | IOR gforth: General Search Paths.
                                                              (line  11)
* open-pipe C-ADDR U WFAM -- WFILEID WIOR gforth: Pipes.      (line  10)
* or W1 W2 -- W core:                    Bitwise operations.  (line   8)
* order -- search-ext:                   Word Lists.          (line  82)
* os-class -- C-ADDR U gforth-environment: Environmental Queries.
                                                              (line  38)
* outfile-execute ... XT FILE-ID -- ... gforth: Redirection.  (line  21)
* over W1 W2 -- W1 W2 W1 core:           Data stack.          (line  12)
* overrides XT "SELECTOR" -- objects:    Objects Glossary.    (line 122)
* pad -- C-ADDR core-ext:                Memory Blocks.       (line  74)
* page -- facility:                      Terminal output.     (line  27)
* parse CHAR "CCC<CHAR>" -- C-ADDR U core-ext: The Input Stream.
                                                              (line  25)
* parse-name "NAME" -- C-ADDR U gforth:  The Input Stream.    (line  30)
* parse-word -- C-ADDR U gforth-obsolete: The Input Stream.   (line  33)
* path+ PATH-ADDR "DIR" -- gforth:       General Search Paths.
                                                              (line  29)
* path-allot UMAX -- gforth:             General Search Paths.
                                                              (line  17)
* path= PATH-ADDR "DIR1|DIR2|DIR3" gforth: General Search Paths.
                                                              (line  32)
* perform A-ADDR -- gforth:              Execution token.     (line  56)
* pi -- R gforth:                        Floating Point.      (line 121)
* pick S:... U -- S:... W core-ext:      Data stack.          (line  18)
* postpone "NAME" -- core:               Macros.              (line  23)
* postpone "NAME" -- oof:                The OOF base class.  (line  79)
* postpone, W XT -- gforth:              Compilation token.   (line  30)
* precision -- U float-ext:              Floating Point.      (line  79)
* previous -- search-ext:                Word Lists.          (line  66)
* print OBJECT -- objects:               Objects Glossary.    (line 129)
* printdebugdata -- gforth:              Debugging.           (line  32)
* protected -- objects:                  Objects Glossary.    (line 133)
* ptr "NAME" -- oof:                     The OOF base class.  (line  45)
* ptr -- oof:                            Class Declaration.   (line  13)
* public -- objects:                     Objects Glossary.    (line 136)
* query -- core-ext-obsolescent:         Input Sources.       (line  46)
* quit ?? -- ?? core:                    Miscellaneous Words. (line   9)
* r/o -- FAM file:                       General files.       (line   9)
* r/w -- FAM file:                       General files.       (line  11)
* r> R:W -- W core:                      Return stack.        (line  15)
* r@ -- W ; R: W -- W core:              Return stack.        (line  17)
* rdrop R:W -- gforth:                   Return stack.        (line  19)
* read-file C-ADDR U1 WFILEID -- U2 WIOR file: General files. (line  33)
* read-line C_ADDR U1 WFILEID -- U2 FLAG WIOR file: General files.
                                                              (line  35)
* recurse COMPILATION -- ; RUN-TIME ?? -- ?? core: Calls and returns.
                                                              (line  16)
* recursive COMPILATION -- ; RUN-TIME -- gforth: Calls and returns.
                                                              (line  12)
* refill -- FLAG core-ext,block-ext,file-ext: The Input Stream.
                                                              (line  48)
* rename-file C-ADDR1 U1 C-ADDR2 U2 -- WIOR file-ext: General files.
                                                              (line  30)
* REPEAT COMPILATION ORIG DEST -- ; RUN-TIME -- core: Arbitrary control structures.
                                                              (line  44)
* reposition-file UD WFILEID -- WIOR file: General files.     (line  62)
* represent R C-ADDR U -- N F1 F2 float: Formatted numeric output.
                                                              (line  71)
* require ... "FILE" -- ... gforth:      Forth source files.  (line  55)
* required I*X ADDR U -- I*X gforth:     Forth source files.  (line  49)
* resize A-ADDR1 U -- A-ADDR2 WIOR memory: Heap Allocation.   (line  29)
* resize-file UD WFILEID -- WIOR file:   General files.       (line  66)
* restore COMPILATION ORIG1 -- ; RUN-TIME -- gforth: Exception Handling.
                                                              (line 169)
* restore-input X1 .. XN N -- FLAG core-ext: Input Sources.   (line  31)
* restrict -- gforth:                    Interpretation and Compilation Semantics.
                                                              (line  39)
* roll X0 X1 .. XN N -- X1 .. XN X0 core-ext: Data stack.     (line  29)
* Root -- gforth:                        Word Lists.          (line 119)
* rot W1 W2 W3 -- W2 W3 W1 core:         Data stack.          (line  21)
* rp! A-ADDR -- gforth:                  Stack pointer manipulation.
                                                              (line  27)
* rp0 -- A-ADDR gforth:                  Stack pointer manipulation.
                                                              (line  21)
* rp@ -- A-ADDR gforth:                  Stack pointer manipulation.
                                                              (line  25)
* rshift U1 N -- U2 core:                Bitwise operations.  (line  16)
* S" COMPILATION 'CCC"' -- ; RUN-TIME -- C-ADDR U core,file: Displaying characters and strings.
                                                              (line  54)
* s>d N -- D core:                       Double precision.    (line  21)
* s>number? ADDR U -- D F gforth:        Line input and conversion.
                                                              (line  24)
* s>unumber? C-ADDR U -- UD FLAG gforth: Line input and conversion.
                                                              (line  27)
* save-buffer BUFFER -- gforth:          Blocks.              (line 180)
* save-buffers -- block:                 Blocks.              (line 176)
* save-input -- X1 .. XN N core-ext:     Input Sources.       (line  26)
* savesystem "NAME" -- gforth:           Non-Relocatable Image Files.
                                                              (line  16)
* scope COMPILATION -- SCOPE ; RUN-TIME -- gforth: Where are locals visible by name?.
                                                              (line  11)
* scr -- A-ADDR block-ext:               Blocks.              (line 143)
* seal -- gforth:                        Word Lists.          (line 129)
* search C-ADDR1 U1 C-ADDR2 U2 -- C-ADDR3 U3 FLAG string: Memory Blocks.
                                                              (line  55)
* search-wordlist C-ADDR COUNT WID -- 0 | XT +-1 search: Word Lists.
                                                              (line 104)
* see "<SPACES>NAME" -- tools:           Examining.           (line  52)
* see-code "NAME" -- gforth:             Examining.           (line  66)
* see-code-range ADDR1 ADDR2 -- gforth:  Examining.           (line  70)
* selector "NAME" -- objects:            Objects Glossary.    (line 140)
* self -- O oof:                         The OOF base class.  (line  61)
* set-current WID -- search:             Word Lists.          (line  40)
* set-order WIDN .. WID1 N -- search:    Word Lists.          (line  49)
* set-precision U -- float-ext:          Floating Point.      (line  83)
* sf! R SF-ADDR -- float-ext:            Memory Access.       (line  38)
* sf@ SF-ADDR -- R float-ext:            Memory Access.       (line  34)
* sfalign -- float-ext:                  Dictionary allocation.
                                                              (line  70)
* sfaligned C-ADDR -- SF-ADDR float-ext: Address arithmetic.  (line  94)
* sffield: U1 "NAME" -- U2 X:structures: Forth200x Structures.
                                                              (line  39)
* sfloat% -- ALIGN SIZE gforth:          Structure Glossary.  (line  50)
* sfloat+ SF-ADDR1 -- SF-ADDR2 float-ext: Address arithmetic. (line  91)
* sfloats N1 -- N2 float-ext:            Address arithmetic.  (line  87)
* sh "..." -- gforth:                    Passing Commands to the OS.
                                                              (line   9)
* shift-args -- gforth:                  OS command line arguments.
                                                              (line  49)
* sign N -- core:                        Formatted numeric output.
                                                              (line  57)
* simple-see "NAME" -- gforth:           Examining.           (line  61)
* simple-see-range ADDR1 ADDR2 -- gforth: Examining.          (line  64)
* sl@ C-ADDR -- N gforth:                Memory Access.       (line  59)
* SLiteral COMPILATION C-ADDR1 U ; RUN-TIME -- C-ADDR2 U string: Literals.
                                                              (line  61)
* slurp-fid FID -- ADDR U gforth:        General files.       (line  71)
* slurp-file C-ADDR1 U1 -- C-ADDR2 U2 gforth: General files.  (line  68)
* sm/rem D1 N1 -- N2 N3 core:            Mixed precision.     (line  28)
* source -- ADDR U core:                 The Text Interpreter.
                                                              (line 128)
* source-id -- 0 | -1 | FILEID core-ext,file: Input Sources.  (line  18)
* sourcefilename -- C-ADDR U gforth:     Forth source files.  (line  61)
* sourceline# -- U gforth:               Forth source files.  (line  68)
* sp! A-ADDR -- S:... gforth:            Stack pointer manipulation.
                                                              (line  12)
* sp0 -- A-ADDR gforth:                  Stack pointer manipulation.
                                                              (line   6)
* sp@ S:... -- A-ADDR gforth:            Stack pointer manipulation.
                                                              (line  10)
* space -- core:                         Displaying characters and strings.
                                                              (line  12)
* spaces U -- core:                      Displaying characters and strings.
                                                              (line  15)
* span -- C-ADDR core-ext-obsolescent:   Line input and conversion.
                                                              (line  64)
* static -- oof:                         Class Declaration.   (line  34)
* stderr -- WFILEID gforth:              General files.       (line  80)
* stdin -- WFILEID gforth:               General files.       (line  74)
* stdout -- WFILEID gforth:              General files.       (line  77)
* str< C-ADDR1 U1 C-ADDR2 U2 -- F gforth: Memory Blocks.      (line  50)
* str= C-ADDR1 U1 C-ADDR2 U2 -- F gforth: Memory Blocks.      (line  48)
* string-prefix? C-ADDR1 U1 C-ADDR2 U2 -- F gforth: Memory Blocks.
                                                              (line  52)
* struct -- ALIGN SIZE gforth:           Structure Glossary.  (line  55)
* sub-list? LIST1 LIST2 -- F gforth-internal: Locals implementation.
                                                              (line  96)
* super "NAME" -- oof:                   The OOF base class.  (line  57)
* sw@ C-ADDR -- N gforth:                Memory Access.       (line  50)
* swap W1 W2 -- W2 W1 core:              Data stack.          (line  16)
* system C-ADDR U -- gforth:             Passing Commands to the OS.
                                                              (line  13)
* s\" COMPILATION 'CCC"' -- ; RUN-TIME -- C-ADDR U gforth: Displaying characters and strings.
                                                              (line  65)
* table -- WID gforth:                   Word Lists.          (line  60)
* THEN COMPILATION ORIG -- ; RUN-TIME -- core: Arbitrary control structures.
                                                              (line  20)
* this -- OBJECT objects:                Objects Glossary.    (line 145)
* threading-method -- N gforth:          Threading Words.     (line  26)
* throw Y1 .. YM NERROR -- Y1 .. YM / Z1 .. ZN ERROR exception: Exception Handling.
                                                              (line  10)
* thru I*X N1 N2 -- J*X block-ext:       Blocks.              (line 190)
* tib -- ADDR core-ext-obsolescent:      The Text Interpreter.
                                                              (line 131)
* time&date -- NSEC NMIN NHOUR NDAY NMONTH NYEAR facility-ext: Keeping track of Time.
                                                              (line   9)
* TO C|W|D|R "NAME" -- core-ext,local:   Values.              (line  19)
* to-this OBJECT -- objects:             Objects Glossary.    (line 154)
* toupper C1 -- C2 gforth:               Displaying characters and strings.
                                                              (line  21)
* true -- F core-ext:                    Boolean Flags.       (line  11)
* try COMPILATION -- ORIG ; RUN-TIME -- R:SYS1 gforth: Exception Handling.
                                                              (line  91)
* tuck W1 W2 -- W2 W1 W2 core-ext:       Data stack.          (line  14)
* type C-ADDR U -- core:                 Displaying characters and strings.
                                                              (line  41)
* typewhite ADDR N -- gforth:            Displaying characters and strings.
                                                              (line  45)
* U+DO COMPILATION -- DO-SYS ; RUN-TIME U1 U2 -- | LOOP-SYS gforth: Arbitrary control structures.
                                                              (line  63)
* U-DO COMPILATION -- DO-SYS ; RUN-TIME U1 U2 -- | LOOP-SYS gforth: Arbitrary control structures.
                                                              (line  67)
* u. U -- core:                          Simple numeric output.
                                                              (line  22)
* u.r U N -- core-ext:                   Simple numeric output.
                                                              (line  32)
* u< U1 U2 -- F core:                    Numeric comparison.  (line  33)
* u<= U1 U2 -- F gforth:                 Numeric comparison.  (line  35)
* u> U1 U2 -- F core-ext:                Numeric comparison.  (line  37)
* u>= U1 U2 -- F gforth:                 Numeric comparison.  (line  39)
* ud. UD -- gforth:                      Simple numeric output.
                                                              (line  40)
* ud.r UD N -- gforth:                   Simple numeric output.
                                                              (line  49)
* ul@ C-ADDR -- U gforth:                Memory Access.       (line  62)
* um* U1 U2 -- UD core:                  Mixed precision.     (line  16)
* um/mod UD U1 -- U2 U3 core:            Mixed precision.     (line  22)
* under+ N1 N2 N3 -- N N2 gforth:        Single precision.    (line  18)
* unloop R:W1 R:W2 -- core:              Arbitrary control structures.
                                                              (line  85)
* UNREACHABLE -- gforth:                 Where are locals visible by name?.
                                                              (line  49)
* UNTIL COMPILATION DEST -- ; RUN-TIME F -- core: Arbitrary control structures.
                                                              (line  24)
* unused -- U core-ext:                  Dictionary allocation.
                                                              (line  27)
* update -- block:                       Blocks.              (line 169)
* updated? N -- F gforth:                Blocks.              (line 172)
* use "FILE" -- gforth:                  Blocks.              (line 123)
* User "NAME" -- gforth:                 Variables.           (line  42)
* utime -- DTIME gforth:                 Keeping track of Time.
                                                              (line  13)
* uw@ C-ADDR -- U gforth:                Memory Access.       (line  53)
* Value W "NAME" -- core-ext:            Values.              (line  17)
* var M V SIZE "NAME" -- M V' mini-oof:  Basic Mini-OOF Usage.
                                                              (line  17)
* var SIZE -- oof:                       Class Declaration.   (line   8)
* Variable "NAME" -- core:               Variables.           (line  31)
* vlist -- gforth:                       Word Lists.          (line 116)
* Vocabulary "NAME" -- gforth:           Word Lists.          (line 124)
* vocs -- gforth:                        Word Lists.          (line 133)
* w! W C-ADDR -- gforth:                 Memory Access.       (line  56)
* w/o -- FAM file:                       General files.       (line  13)
* WHILE COMPILATION DEST -- ORIG DEST ; RUN-TIME F -- core: Arbitrary control structures.
                                                              (line  42)
* with O -- oof:                         The OOF base class.  (line  86)
* within U1 U2 U3 -- F core-ext:         Numeric comparison.  (line  41)
* word CHAR "<CHARS>CCC<CHAR>-- C-ADDR core: The Input Stream.
                                                              (line  39)
* wordlist -- WID search:                Word Lists.          (line  57)
* words -- tools:                        Word Lists.          (line 112)
* write-file C-ADDR U1 WFILEID -- WIOR file: General files.   (line  50)
* write-line C-ADDR U FILEID -- IOR file: General files.      (line  52)
* x-size XC-ADDR U1 -- U2 xchar:         Xchars and Unicode.  (line  34)
* x-width XC-ADDR U -- N xchar-ext:      Xchars and Unicode.  (line  74)
* xc!+? XC XC-ADDR1 U1 -- XC-ADDR2 U2 F xchar-ext: Xchars and Unicode.
                                                              (line  42)
* xc-size XC -- U xchar-ext:             Xchars and Unicode.  (line  31)
* xc@+ XC-ADDR1 -- XC-ADDR2 XC xchar-ext: Xchars and Unicode. (line  38)
* xchar+ XC-ADDR1 -- XC-ADDR2 xchar-ext: Xchars and Unicode.  (line  50)
* xchar- XC-ADDR1 -- XC-ADDR2 xchar-ext: Xchars and Unicode.  (line  54)
* xchar-encoding -- ADDR U xchar-ext:    Xchars and Unicode.  (line  89)
* xemit XC -- xchar-ext:                 Xchars and Unicode.  (line  84)
* xkey -- XC xchar-ext:                  Xchars and Unicode.  (line  80)
* xor W1 W2 -- W core:                   Bitwise operations.  (line  10)
* xt-new ... CLASS XT -- OBJECT objects: Objects Glossary.    (line 157)
* xt-see XT -- gforth:                   Examining.           (line  58)
* x\string- XC-ADDR1 U1 -- XC-ADDR1 U2 xchar: Xchars and Unicode.
                                                              (line  63)


File: gforth.info,  Node: Concept Index,  Prev: Word Index,  Up: Top

Concept and Word Index
**********************

Not all entries listed in this index are present verbatim in the text.
This index also duplicates, in abbreviated form, all of the words listed
in the Word Index (only the names are listed for the words here).

 [index ]
* Menu:

* !:                                     Memory Access.       (line   9)
* ", stack item type:                    Notation.            (line  90)
* #:                                     Formatted numeric output.
                                                              (line  39)
* #!:                                    Running Image Files. (line  44)
* #-prefix for decimal numbers:          Number Conversion.   (line  75)
* #>:                                    Formatted numeric output.
                                                              (line  63)
* #>>:                                   Formatted numeric output.
                                                              (line  68)
* #s:                                    Formatted numeric output.
                                                              (line  47)
* #tib:                                  The Text Interpreter.
                                                              (line 133)
* $-prefix for hexadecimal numbers:      Number Conversion.   (line  75)
* $?:                                    Passing Commands to the OS.
                                                              (line  20)
* %-prefix for binary numbers:           Number Conversion.   (line  75)
* %align:                                Structure Glossary.  (line   6)
* %alignment:                            Structure Glossary.  (line   9)
* %alloc:                                Structure Glossary.  (line  12)
* %allocate:                             Structure Glossary.  (line  16)
* %allot:                                Structure Glossary.  (line  20)
* %size:                                 Structure Glossary.  (line  52)
* &-prefix for decimal numbers:          Number Conversion.   (line  75)
* ':                                     Execution token.     (line  15)
* ' <1>:                                 The OOF base class.  (line  77)
* '-prefix for character strings:        Number Conversion.   (line  75)
* 'cold:                                 Modifying the Startup Sequence.
                                                              (line  40)
* (:                                     Comments.            (line   9)
* (local):                               ANS Forth locals.    (line  42)
* ):                                     Assertions.          (line  46)
* *:                                     Single precision.    (line  25)
* */:                                    Mixed precision.     (line   8)
* */mod:                                 Mixed precision.     (line  11)
* +:                                     Single precision.    (line  14)
* +!:                                    Memory Access.       (line  12)
* +DO:                                   Arbitrary control structures.
                                                              (line  61)
* +field:                                Forth200x Structures.
                                                              (line  29)
* +load:                                 Blocks.              (line 193)
* +LOOP:                                 Arbitrary control structures.
                                                              (line  75)
* +thru:                                 Blocks.              (line 197)
* +x/string:                             Xchars and Unicode.  (line  58)
* ,:                                     Dictionary allocation.
                                                              (line  45)
* -:                                     Single precision.    (line  21)
* -, tutorial:                           Stack-Effect Comments Tutorial.
                                                              (line   6)
* -->:                                   Blocks.              (line 201)
* -appl-image, command-line option:      Invoking Gforth.     (line  37)
* -application, gforthmi option:         gforthmi.            (line  34)
* -clear-dictionary, command-line option: Invoking Gforth.    (line 113)
* -d, command-line option:               Invoking Gforth.     (line  61)
* -data-stack-size, command-line option: Invoking Gforth.     (line  61)
* -debug, command-line option:           Invoking Gforth.     (line 102)
* -DFORCE_REG:                           Portability.         (line  40)
* -dictionary-size, command-line option: Invoking Gforth.     (line  51)
* -die-on-signal, command-line-option:   Invoking Gforth.     (line 117)
* -DO:                                   Arbitrary control structures.
                                                              (line  65)
* -DUSE_FTOS:                            TOS Optimization.    (line  27)
* -DUSE_NO_FTOS:                         TOS Optimization.    (line  27)
* -DUSE_NO_TOS:                          TOS Optimization.    (line  15)
* -DUSE_TOS:                             TOS Optimization.    (line  15)
* -dynamic command-line option:          Dynamic Superinstructions.
                                                              (line  91)
* -dynamic, command-line option:         Invoking Gforth.     (line 126)
* -enable-force-reg, configuration flag: Portability.         (line  40)
* -f, command-line option:               Invoking Gforth.     (line  71)
* -fp-stack-size, command-line option:   Invoking Gforth.     (line  71)
* -h, command-line option:               Invoking Gforth.     (line  94)
* -help, command-line option:            Invoking Gforth.     (line  94)
* -i, command-line option:               Invoking Gforth.     (line  32)
* -i, invoke image file:                 Running Image Files. (line   6)
* -image file, invoke image file:        Running Image Files. (line   6)
* -image-file, command-line option:      Invoking Gforth.     (line  32)
* -l, command-line option:               Invoking Gforth.     (line  77)
* -locals-stack-size, command-line option: Invoking Gforth.   (line  77)
* -LOOP:                                 Arbitrary control structures.
                                                              (line  77)
* -m, command-line option:               Invoking Gforth.     (line  51)
* -no-dynamic command-line option:       Dynamic Superinstructions.
                                                              (line  79)
* -no-dynamic, command-line option:      Invoking Gforth.     (line 126)
* -no-offset-im, command-line option:    Invoking Gforth.     (line 110)
* -no-super command-line option:         Dynamic Superinstructions.
                                                              (line  79)
* -no-super, command-line option:        Invoking Gforth.     (line 131)
* -offset-image, command-line option:    Invoking Gforth.     (line 105)
* -p, command-line option:               Invoking Gforth.     (line  43)
* -path, command-line option:            Invoking Gforth.     (line  43)
* -print-metrics, command-line option:   Invoking Gforth.     (line 169)
* -r, command-line option:               Invoking Gforth.     (line  66)
* -return-stack-size, command-line option: Invoking Gforth.   (line  66)
* -rot:                                  Data stack.          (line  23)
* -ss-greedy, command-line option:       Invoking Gforth.     (line 156)
* -ss-min-..., command-line options:     Invoking Gforth.     (line 142)
* -ss-number, command-line option:       Invoking Gforth.     (line 136)
* -trailing:                             Memory Blocks.       (line  61)
* -trailing-garbage:                     Xchars and Unicode.  (line  69)
* -v, command-line option:               Invoking Gforth.     (line  98)
* -version, command-line option:         Invoking Gforth.     (line  98)
* -vm-commit, command-line option:       Invoking Gforth.     (line  82)
* .:                                     Simple numeric output.
                                                              (line  11)
* .":                                    Displaying characters and strings.
                                                              (line  25)
* .", how it works:                      How does that work?. (line 153)
* .(:                                    Displaying characters and strings.
                                                              (line  32)
* .debugline:                            Debugging.           (line  34)
* .emacs:                                Installing gforth.el.
                                                              (line   6)
* .fi files:                             Image Files.         (line   6)
* .gforth-history:                       Command-line editing.
                                                              (line  38)
* .id:                                   Name token.          (line  55)
* .name:                                 Name token.          (line  52)
* .path:                                 General Search Paths.
                                                              (line  26)
* .r:                                    Simple numeric output.
                                                              (line  26)
* .s:                                    Examining.           (line   8)
* .\":                                   Displaying characters and strings.
                                                              (line  38)
* /:                                     Single precision.    (line  27)
* /does-handler:                         Threading Words.     (line  60)
* /l:                                    Address arithmetic.  (line 123)
* /mod:                                  Single precision.    (line  31)
* /string:                               Memory Blocks.       (line  65)
* /w:                                    Address arithmetic.  (line 120)
* 0<:                                    Numeric comparison.  (line  21)
* 0<=:                                   Numeric comparison.  (line  23)
* 0<>:                                   Numeric comparison.  (line  25)
* 0=:                                    Numeric comparison.  (line  27)
* 0>:                                    Numeric comparison.  (line  29)
* 0>=:                                   Numeric comparison.  (line  31)
* 0x-prefix for hexadecimal numbers:     Number Conversion.   (line  75)
* 1+:                                    Single precision.    (line  16)
* 1-:                                    Single precision.    (line  23)
* 1/f:                                   Floating Point.      (line  76)
* 2!:                                    Memory Access.       (line  25)
* 2*:                                    Bitwise operations.  (line  19)
* 2,:                                    Dictionary allocation.
                                                              (line  48)
* 2/:                                    Bitwise operations.  (line  25)
* 2>r:                                   Return stack.        (line  21)
* 2@:                                    Memory Access.       (line  21)
* 2Constant:                             Constants.           (line  29)
* 2drop:                                 Data stack.          (line  31)
* 2dup:                                  Data stack.          (line  35)
* 2field::                               Forth200x Structures.
                                                              (line  35)
* 2Literal:                              Literals.            (line  53)
* 2nip:                                  Data stack.          (line  33)
* 2over:                                 Data stack.          (line  37)
* 2r>:                                   Return stack.        (line  23)
* 2r@:                                   Return stack.        (line  25)
* 2rdrop:                                Return stack.        (line  27)
* 2rot:                                  Data stack.          (line  43)
* 2swap:                                 Data stack.          (line  41)
* 2tuck:                                 Data stack.          (line  39)
* 2Variable:                             Variables.           (line  33)
* ::                                     Colon Definitions.   (line  17)
* : <1>:                                 The OOF base class.  (line  43)
* :, passing data across:                Literals.            (line  66)
* :::                                    The OOF base class.  (line  55)
* :: <1>:                                Basic Mini-OOF Usage.
                                                              (line  32)
* :m:                                    Objects Glossary.    (line 103)
* :noname:                               Anonymous Definitions.
                                                              (line   9)
* ;:                                     Colon Definitions.   (line  19)
* ;code:                                 Code and ;code.      (line  27)
* ;CODE ending sequence:                 programming-idef.    (line   7)
* ;CODE, name not defined via CREATE:    programming-ambcond. (line  19)
* ;CODE, processing input:               programming-idef.    (line  10)
* ;m:                                    Objects Glossary.    (line 107)
* ;m usage:                              Method conveniences. (line  12)
* ;s:                                    Calls and returns.   (line  47)
* <:                                     Numeric comparison.  (line   9)
* <#:                                    Formatted numeric output.
                                                              (line  30)
* <<#:                                   Formatted numeric output.
                                                              (line  33)
* <=:                                    Numeric comparison.  (line  11)
* <>:                                    Numeric comparison.  (line  13)
* <bind>:                                Objects Glossary.    (line   9)
* <compilation:                          Combined words.      (line 100)
* <interpretation:                       Combined words.      (line  96)
* <to-inst>:                             Objects Glossary.    (line 148)
* =:                                     Numeric comparison.  (line  15)
* >:                                     Numeric comparison.  (line  17)
* >=:                                    Numeric comparison.  (line  19)
* >body:                                 CREATE..DOES> details.
                                                              (line  49)
* >BODY of non-CREATEd words:            core-ambcond.        (line 174)
* >code-address:                         Threading Words.     (line  30)
* >definer:                              Threading Words.     (line  87)
* >does-code:                            Threading Words.     (line  43)
* >float:                                Line input and conversion.
                                                              (line  43)
* >in:                                   The Text Interpreter.
                                                              (line 123)
* >IN greater than input buffer:         core-ambcond.        (line 105)
* >l:                                    Locals implementation.
                                                              (line  24)
* >name:                                 Name token.          (line  28)
* >number:                               Line input and conversion.
                                                              (line  30)
* >order:                                Word Lists.          (line  63)
* >r:                                    Return stack.        (line  13)
* ?:                                     Examining.           (line  41)
* ?DO:                                   Arbitrary control structures.
                                                              (line  59)
* ?dup:                                  Data stack.          (line  25)
* ?DUP-0=-IF:                            Arbitrary control structures.
                                                              (line  55)
* ?DUP-IF:                               Arbitrary control structures.
                                                              (line  50)
* ?LEAVE:                                Arbitrary control structures.
                                                              (line  83)
* @:                                     Memory Access.       (line   6)
* @local#:                               Locals implementation.
                                                              (line  12)
* [:                                     Literals.            (line  36)
* [']:                                   Execution token.     (line  27)
* [+LOOP]:                               Interpreter Directives.
                                                              (line  72)
* [?DO]:                                 Interpreter Directives.
                                                              (line  64)
* [AGAIN]:                               Interpreter Directives.
                                                              (line  80)
* [BEGIN]:                               Interpreter Directives.
                                                              (line  76)
* [bind]:                                Objects Glossary.    (line  15)
* [bind] usage:                          Class Binding.       (line  15)
* [Char]:                                Displaying characters and strings.
                                                              (line  82)
* [COMP']:                               Compilation token.   (line  24)
* [compile]:                             Macros.              (line  26)
* [current]:                             Objects Glossary.    (line  48)
* [DO]:                                  Interpreter Directives.
                                                              (line  66)
* [ELSE]:                                Interpreter Directives.
                                                              (line  38)
* [ENDIF]:                               Interpreter Directives.
                                                              (line  51)
* [FOR]:                                 Interpreter Directives.
                                                              (line  68)
* [IFDEF]:                               Interpreter Directives.
                                                              (line  54)
* [IFUNDEF]:                             Interpreter Directives.
                                                              (line  59)
* [IF]:                                  Interpreter Directives.
                                                              (line  30)
* [IF] and POSTPONE:                     programming-ambcond. (line  24)
* [IF], end of the input source before matching [ELSE] or [THEN]: programming-ambcond.
                                                              (line  28)
* [LOOP]:                                Interpreter Directives.
                                                              (line  70)
* [NEXT]:                                Interpreter Directives.
                                                              (line  74)
* [parent]:                              Objects Glossary.    (line 126)
* [parent] usage:                        Class Binding.       (line  34)
* [REPEAT]:                              Interpreter Directives.
                                                              (line  84)
* [THEN]:                                Interpreter Directives.
                                                              (line  47)
* [to-inst]:                             Objects Glossary.    (line 151)
* [UNTIL]:                               Interpreter Directives.
                                                              (line  78)
* [WHILE]:                               Interpreter Directives.
                                                              (line  82)
* []:                                    The OOF base class.  (line  49)
* \:                                     Comments.            (line  16)
* \, editing with Emacs:                 Emacs and Gforth.    (line   6)
* \, line length in blocks:              block-idef.          (line  11)
* \c:                                    Declaring C Functions.
                                                              (line  76)
* \G:                                    Comments.            (line  22)
* ]:                                     Literals.            (line  39)
* ]L:                                    Literals.            (line  47)
* ~~:                                    Debugging.           (line  28)
* ~~, removal with Emacs:                Emacs and Gforth.    (line   6)
* abort:                                 Exception Handling.  (line 209)
* ABORT":                                Exception Handling.  (line 204)
* ABORT", exception abort sequence:      core-idef.           (line  75)
* abs:                                   Single precision.    (line  35)
* abstract class:                        Basic Objects Usage. (line  20)
* abstract class <1>:                    Basic OOF Usage.     (line  23)
* accept:                                Line input and conversion.
                                                              (line  11)
* ACCEPT, display after end of input:    core-idef.           (line  71)
* ACCEPT, editing:                       core-idef.           (line  17)
* action-of:                             Deferred Words.      (line  92)
* add-lib:                               Declaring OS-level libraries.
                                                              (line  33)
* address alignment exception:           core-ambcond.        (line 127)
* address alignment exception, stack overflow: core-ambcond.  (line  34)
* address arithmetic for structures:     Why explicit structure support?.
                                                              (line   6)
* address arithmetic restrictions, ANS vs. Gforth: Memory model.
                                                              (line  17)
* address arithmetic words:              Address arithmetic.  (line   6)
* address of counted string:             String Formats.      (line   9)
* address unit:                          Address arithmetic.  (line  10)
* address unit, size in bits:            core-idef.           (line 111)
* ADDRESS-UNIT-BITS:                     Address arithmetic.  (line 117)
* AGAIN:                                 Arbitrary control structures.
                                                              (line  26)
* AHEAD:                                 Arbitrary control structures.
                                                              (line  18)
* Alias:                                 Aliases.             (line  33)
* aliases:                               Aliases.             (line   6)
* align:                                 Dictionary allocation.
                                                              (line  62)
* aligned:                               Address arithmetic.  (line  70)
* aligned addresses:                     core-idef.           (line   7)
* alignment faults:                      core-ambcond.        (line 127)
* alignment of addresses for types:      Address arithmetic.  (line  33)
* alignment tutorial:                    Alignment Tutorial.  (line   6)
* allocate:                              Heap Allocation.     (line  16)
* allot:                                 Dictionary allocation.
                                                              (line  31)
* also:                                  Word Lists.          (line  69)
* also, too many word lists in search order: search-ambcond.  (line  18)
* also-path:                             General Search Paths.
                                                              (line  23)
* ambiguous conditions, block words:     block-ambcond.       (line   6)
* ambiguous conditions, core words:      core-ambcond.        (line   6)
* ambiguous conditions, double words:    double-ambcond.      (line   6)
* ambiguous conditions, facility words:  facility-ambcond.    (line   6)
* ambiguous conditions, file words:      file-ambcond.        (line   6)
* ambiguous conditions, floating-point words: floating-ambcond.
                                                              (line   6)
* ambiguous conditions, locals words:    locals-ambcond.      (line   6)
* ambiguous conditions, programming-tools words: programming-ambcond.
                                                              (line   6)
* ambiguous conditions, search-order words: search-ambcond.   (line   6)
* and:                                   Bitwise operations.  (line   6)
* angles in trigonometric operations:    Floating Point.      (line  87)
* ANS conformance of Gforth:             ANS conformance.     (line   6)
* ans-report.fs:                         ANS Report.          (line   6)
* arg:                                   OS command line arguments.
                                                              (line  41)
* argc:                                  OS command line arguments.
                                                              (line  55)
* argument input source different than current input source for RESTORE-INPUT: core-ambcond.
                                                              (line 113)
* argument type mismatch:                core-ambcond.        (line  19)
* argument type mismatch, RESTORE-INPUT: core-ambcond.        (line 113)
* arguments, OS command line:            OS command line arguments.
                                                              (line   6)
* argv:                                  OS command line arguments.
                                                              (line  59)
* arithmetic words:                      Arithmetic.          (line   6)
* arithmetics tutorial:                  Arithmetics Tutorial.
                                                              (line   6)
* arrays:                                CREATE.              (line  40)
* arrays tutorial:                       Arrays and Records Tutorial.
                                                              (line   6)
* asptr:                                 The OOF base class.  (line  47)
* asptr <1>:                             Class Declaration.   (line  16)
* assembler:                             Assembler and Code Words.
                                                              (line   6)
* assembler <1>:                         Code and ;code.      (line  19)
* ASSEMBLER, search order capability:    programming-idef.    (line  15)
* assert(:                               Assertions.          (line  43)
* assert-level:                          Assertions.          (line  61)
* assert0(:                              Assertions.          (line  30)
* assert1(:                              Assertions.          (line  33)
* assert2(:                              Assertions.          (line  36)
* assert3(:                              Assertions.          (line  39)
* assertions:                            Assertions.          (line   6)
* ASSUME-LIVE:                           Where are locals visible by name?.
                                                              (line 122)
* at-xy:                                 Terminal output.     (line   9)
* AT-XY can't be performed on user output device: facility-ambcond.
                                                              (line   7)
* Attempt to use zero-length string as a name: core-ambcond.  (line  99)
* au (address unit):                     Address arithmetic.  (line  10)
* authors of Gforth:                     Origin.              (line   9)
* auto-indentation of Forth code in Emacs: Auto-Indentation.  (line   6)
* a_, stack item type:                   Notation.            (line  71)
* backtrace:                             Error messages.      (line   6)
* backtraces with gforth-fast:           Error messages.      (line  53)
* base:                                  Number Conversion.   (line  62)
* base is not decimal (REPRESENT, F., FE., FS.): floating-ambcond.
                                                              (line  26)
* base-execute:                          Number Conversion.   (line  58)
* basic objects usage:                   Basic Objects Usage. (line   6)
* batch processing with Gforth:          Invoking Gforth.     (line 180)
* BEGIN:                                 Arbitrary control structures.
                                                              (line  22)
* begin-structure:                       Forth200x Structures.
                                                              (line  25)
* benchmarking Forth systems:            Performance.         (line   6)
* Benchres:                              Performance.         (line  86)
* bin:                                   General files.       (line  15)
* bind:                                  Objects Glossary.    (line   6)
* bind <1>:                              The OOF base class.  (line  66)
* bind usage:                            Class Binding.       (line  19)
* bind':                                 Objects Glossary.    (line  12)
* bitwise operation words:               Bitwise operations.  (line   6)
* bl:                                    Displaying characters and strings.
                                                              (line   9)
* blank:                                 Memory Blocks.       (line  38)
* blk:                                   Input Sources.       (line  23)
* BLK, altering BLK:                     block-ambcond.       (line  19)
* block:                                 Blocks.              (line 147)
* block buffers:                         Blocks.              (line  40)
* block number invalid:                  block-ambcond.       (line  16)
* block read not possible:               block-ambcond.       (line   7)
* block transfer, I/O exception:         block-ambcond.       (line  12)
* block words, ambiguous conditions:     block-ambcond.       (line   6)
* block words, implementation-defined options: block-idef.    (line   6)
* block words, other system documentation: block-other.       (line   6)
* block words, system documentation:     The optional Block word set.
                                                              (line   6)
* block-included:                        Blocks.              (line 208)
* block-offset:                          Blocks.              (line 126)
* block-position:                        Blocks.              (line 136)
* blocks:                                Blocks.              (line   6)
* blocks file:                           Blocks.              (line  29)
* blocks files, use with Emacs:          Blocks Files.        (line   6)
* blocks in files:                       file-idef.           (line  49)
* blocks.fb:                             Blocks.              (line  35)
* Boolean flags:                         Boolean Flags.       (line   6)
* bootmessage:                           Modifying the Startup Sequence.
                                                              (line  45)
* bound:                                 The OOF base class.  (line  68)
* bounds:                                Memory Blocks.       (line  69)
* break":                                Singlestep Debugger. (line  67)
* break::                                Singlestep Debugger. (line  65)
* broken-pipe-error:                     Pipes.               (line  21)
* buffer:                                Blocks.              (line 154)
* bug reporting:                         Bugs.                (line   6)
* bye:                                   Leaving Gforth.      (line  12)
* bye during gforthmi:                   gforthmi.            (line  44)
* C function pointers to Forth words:    Callbacks.           (line   6)
* C function pointers, calling from Forth: Calling C function pointers.
                                                              (line   6)
* C functions, calls to:                 Calling C Functions. (line   6)
* C functions, declarations:             Declaring C Functions.
                                                              (line   6)
* C interface:                           C Interface.         (line   6)
* c!:                                    Memory Access.       (line  18)
* C":                                    Displaying characters and strings.
                                                              (line  73)
* c,:                                    Dictionary allocation.
                                                              (line  38)
* c, stack item type:                    Notation.            (line  57)
* C, using C for the engine:             Portability.         (line  13)
* c-function:                            Declaring C Functions.
                                                              (line  79)
* c-library:                             Defining library interfaces.
                                                              (line  36)
* c-library-name:                        Defining library interfaces.
                                                              (line  33)
* c@:                                    Memory Access.       (line  15)
* call-c:                                Low-Level C Interface Words.
                                                              (line  13)
* Callback functions written in Forth:   Callbacks.           (line   6)
* calling a definition:                  Calls and returns.   (line   6)
* calling C functions:                   Calling C Functions. (line   6)
* case:                                  Arbitrary control structures.
                                                              (line  98)
* CASE control structure:                Selection.           (line  43)
* case sensitivity:                      Case insensitivity.  (line   6)
* case-sensitivity characteristics:      core-idef.           (line 156)
* case-sensitivity for name lookup:      core-idef.           (line  34)
* catch:                                 Exception Handling.  (line  50)
* catch and backtraces:                  Error messages.      (line  42)
* catch and this:                        Objects Implementation.
                                                              (line  43)
* catch in m: ... ;m:                    Method conveniences. (line  15)
* cell:                                  Address arithmetic.  (line  67)
* cell size:                             core-idef.           (line 136)
* cell%:                                 Structure Glossary.  (line  24)
* cell+:                                 Address arithmetic.  (line  64)
* cell-aligned addresses:                core-idef.           (line   7)
* cells:                                 Address arithmetic.  (line  61)
* CFA:                                   Execution token.     (line  49)
* cfalign:                               Dictionary allocation.
                                                              (line  81)
* cfaligned:                             Address arithmetic.  (line 113)
* cfield::                               Forth200x Structures.
                                                              (line  31)
* changing the compilation word list (during compilation): search-ambcond.
                                                              (line   7)
* char:                                  Displaying characters and strings.
                                                              (line  78)
* char size:                             core-idef.           (line 139)
* char%:                                 Structure Glossary.  (line  26)
* char+:                                 Address arithmetic.  (line  58)
* character editing of ACCEPT and EXPECT: core-idef.          (line  17)
* character set:                         core-idef.           (line  24)
* character strings - compiling and displaying: Displaying characters and strings.
                                                              (line   6)
* character strings - formats:           String Formats.      (line   6)
* character strings - moving and copying: Memory Blocks.      (line   6)
* character-aligned address requirements: core-idef.          (line  29)
* character-set extensions and matching of names: core-idef.  (line  34)
* characters - compiling and displaying: Displaying characters and strings.
                                                              (line   6)
* characters tutorial:                   Characters and Strings Tutorial.
                                                              (line   6)
* chars:                                 Address arithmetic.  (line  55)
* child class:                           Object-Oriented Terminology.
                                                              (line  43)
* child words:                           User-defined Defining Words.
                                                              (line  71)
* class:                                 Object-Oriented Terminology.
                                                              (line  10)
* class <1>:                             Objects Glossary.    (line  18)
* class <2>:                             The OOF base class.  (line  20)
* class <3>:                             Basic Mini-OOF Usage.
                                                              (line  20)
* class binding:                         Class Binding.       (line   6)
* class binding as optimization:         Class Binding.       (line  39)
* class binding, alternative to:         Class Binding.       (line  21)
* class binding, implementation:         Objects Implementation.
                                                              (line  39)
* class declaration:                     Class Declaration.   (line   6)
* class definition, restrictions:        Basic Objects Usage. (line  58)
* class definition, restrictions <1>:    Basic OOF Usage.     (line  56)
* class implementation:                  Class Implementation.
                                                              (line   5)
* class implementation and representation: Objects Implementation.
                                                              (line  24)
* class scoping implementation:          Objects Implementation.
                                                              (line  58)
* class usage:                           Basic Objects Usage. (line   8)
* class usage <1>:                       Basic OOF Usage.     (line  11)
* class->map:                            Objects Glossary.    (line  22)
* class-inst-size:                       Objects Glossary.    (line  27)
* class-inst-size discussion:            Creating objects.    (line  12)
* class-override!:                       Objects Glossary.    (line  31)
* class-previous:                        Objects Glossary.    (line  34)
* class;:                                Class Declaration.   (line  42)
* class; usage:                          Basic OOF Usage.     (line  11)
* class>order:                           Objects Glossary.    (line  38)
* class?:                                The OOF base class.  (line  24)
* classes and scoping:                   Classes and Scoping. (line   6)
* clear screen:                          Terminal output.     (line  25)
* clear-libs:                            Declaring OS-level libraries.
                                                              (line  30)
* clear-path:                            General Search Paths.
                                                              (line  20)
* clearstack:                            Examining.           (line  33)
* clearstacks:                           Examining.           (line  36)
* clock tick duration:                   facility-idef.       (line  13)
* close-file:                            General files.       (line  26)
* close-pipe:                            Pipes.               (line  12)
* cmove:                                 Memory Blocks.       (line  25)
* cmove>:                                Memory Blocks.       (line  30)
* code:                                  Code and ;code.      (line  23)
* code address:                          Threading Words.     (line   6)
* code address <1>:                      Threading Words.     (line  22)
* CODE ending sequence:                  programming-idef.    (line   7)
* code examination:                      Examining.           (line   6)
* code field address:                    Execution token.     (line  49)
* code field address <1>:                Threading Words.     (line  22)
* code words:                            Assembler and Code Words.
                                                              (line   6)
* code words, portable:                  Code and ;code.      (line  95)
* CODE, processing input:                programming-idef.    (line  10)
* code-address!:                         Threading Words.     (line  33)
* colon definitions:                     Colon Definitions.   (line   6)
* colon definitions <1>:                 Anonymous Definitions.
                                                              (line   6)
* colon definitions, tutorial:           Colon Definitions Tutorial.
                                                              (line   6)
* colon-sys, passing data across ::      Literals.            (line  66)
* combined words:                        Combined words.      (line   6)
* command line arguments, OS:            OS command line arguments.
                                                              (line   6)
* command-line editing:                  Command-line editing.
                                                              (line   6)
* command-line options:                  Invoking Gforth.     (line   6)
* comment editing commands:              Emacs and Gforth.    (line   6)
* comments:                              Comments.            (line   6)
* comments tutorial:                     Comments Tutorial.   (line   6)
* common-list:                           Locals implementation.
                                                              (line  94)
* COMP':                                 Compilation token.   (line  27)
* comp-i.fs:                             gforthmi.            (line   6)
* comp.lang.forth:                       Forth-related information.
                                                              (line   6)
* compare:                               Memory Blocks.       (line  41)
* comparison of object models:           Comparison with other object models.
                                                              (line   6)
* comparison tutorial:                   Flags and Comparisons Tutorial.
                                                              (line   6)
* compilation semantics:                 How does that work?. (line  67)
* compilation semantics <1>:             Interpretation and Compilation Semantics.
                                                              (line  13)
* compilation semantics tutorial:        Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                              (line   6)
* compilation token:                     Compilation token.   (line   6)
* compilation tokens, tutorial:          Compilation Tokens Tutorial.
                                                              (line   6)
* compilation word list:                 Word Lists.          (line  15)
* compilation word list, change before definition ends: search-ambcond.
                                                              (line   7)
* compilation>:                          Combined words.      (line  98)
* compile state:                         The Text Interpreter.
                                                              (line  11)
* compile,:                              Macros.              (line  90)
* compile-lp+!:                          Locals implementation.
                                                              (line  34)
* compile-only:                          Interpretation and Compilation Semantics.
                                                              (line  36)
* compile-only words:                    Interpretation and Compilation Semantics.
                                                              (line  30)
* compiling compilation semantics:       Macros.              (line   6)
* compiling words:                       Compiling words.     (line   6)
* conditional compilation:               Interpreter Directives.
                                                              (line   6)
* conditionals, tutorial:                Conditional execution Tutorial.
                                                              (line   6)
* const-does>:                           Const-does>.         (line   9)
* Constant:                              Constants.           (line  24)
* constants:                             Constants.           (line   6)
* construct:                             Objects Glossary.    (line  41)
* construct discussion:                  Creating objects.    (line   6)
* context:                               Word Lists.          (line 139)
* context-sensitive help:                Emacs and Gforth.    (line  29)
* contiguous regions and address arithmetic: Address arithmetic.
                                                              (line  21)
* contiguous regions and heap allocation: Heap Allocation.    (line   6)
* contiguous regions in dictionary allocation: Dictionary allocation.
                                                              (line  10)
* contiguous regions, ANS vs. Gforth:    Memory model.        (line  17)
* contributors to Gforth:                Origin.              (line   9)
* control characters as delimiters:      core-idef.           (line  50)
* control structures:                    Control Structures.  (line   6)
* control structures for selection:      Selection.           (line   6)
* control structures programming style:  Arbitrary control structures.
                                                              (line 112)
* control structures, user-defined:      Arbitrary control structures.
                                                              (line   6)
* control-flow stack:                    Arbitrary control structures.
                                                              (line   6)
* control-flow stack items, locals information: Locals implementation.
                                                              (line  84)
* control-flow stack underflow:          programming-ambcond. (line  10)
* control-flow stack, format:            core-idef.           (line  58)
* convert:                               Line input and conversion.
                                                              (line  53)
* convertin strings to numbers:          Line input and conversion.
                                                              (line   6)
* core words, ambiguous conditions:      core-ambcond.        (line   6)
* core words, implementation-defined options: core-idef.      (line   6)
* core words, other system documentation: core-other.         (line   6)
* core words, system documentation:      The Core Words.      (line   6)
* count:                                 String Formats.      (line  19)
* counted loops:                         Counted Loops.       (line   6)
* counted loops with negative increment: Counted Loops.       (line  74)
* counted string:                        String Formats.      (line   9)
* counted string, maximum size:          core-idef.           (line  84)
* counted strings:                       String Formats.      (line   6)
* cputime:                               Keeping track of Time.
                                                              (line  16)
* cr:                                    Displaying characters and strings.
                                                              (line  48)
* Create:                                CREATE.              (line  19)
* CREATE ... DOES>:                      User-defined Defining Words.
                                                              (line  60)
* CREATE ... DOES>, applications:        CREATE..DOES> applications.
                                                              (line   6)
* CREATE ... DOES>, details:             CREATE..DOES> details.
                                                              (line   6)
* CREATE and alignment:                  Address arithmetic.  (line  48)
* create-file:                           General files.       (line  24)
* create-interpret/compile:              Combined words.      (line  92)
* create...does> tutorial:               Defining Words Tutorial.
                                                              (line   6)
* creating objects:                      Creating objects.    (line   6)
* cross-compiler:                        cross.fs.            (line   6)
* cross-compiler <1>:                    Cross Compiler.      (line   6)
* cross.fs:                              cross.fs.            (line   6)
* cross.fs <1>:                          Cross Compiler.      (line   6)
* CS-PICK:                               Arbitrary control structures.
                                                              (line  28)
* CS-PICK, fewer than u+1 items on the control flow-stack: programming-ambcond.
                                                              (line  10)
* CS-ROLL:                               Arbitrary control structures.
                                                              (line  30)
* CS-ROLL, fewer than u+1 items on the control flow-stack: programming-ambcond.
                                                              (line  10)
* CT (compilation token):                Compilation token.   (line   6)
* CT, tutorial:                          Compilation Tokens Tutorial.
                                                              (line   6)
* current:                               Word Lists.          (line 136)
* current':                              Objects Glossary.    (line  45)
* current-interface:                     Objects Glossary.    (line  51)
* current-interface discussion:          Objects Implementation.
                                                              (line  24)
* currying:                              CREATE..DOES> applications.
                                                              (line  27)
* cursor control:                        Displaying characters and strings.
                                                              (line  54)
* cursor positioning:                    Terminal output.     (line   7)
* c_, stack item type:                   Notation.            (line  73)
* d+:                                    Double precision.    (line  25)
* d, stack item type:                    Notation.            (line  65)
* d-:                                    Double precision.    (line  27)
* d.:                                    Simple numeric output.
                                                              (line  36)
* d.r:                                   Simple numeric output.
                                                              (line  44)
* d0<:                                   Numeric comparison.  (line  62)
* d0<=:                                  Numeric comparison.  (line  64)
* d0<>:                                  Numeric comparison.  (line  66)
* d0=:                                   Numeric comparison.  (line  68)
* d0>:                                   Numeric comparison.  (line  70)
* d0>=:                                  Numeric comparison.  (line  72)
* d2*:                                   Bitwise operations.  (line  22)
* d2/:                                   Bitwise operations.  (line  29)
* d<:                                    Numeric comparison.  (line  50)
* d<=:                                   Numeric comparison.  (line  52)
* d<>:                                   Numeric comparison.  (line  54)
* d=:                                    Numeric comparison.  (line  56)
* d>:                                    Numeric comparison.  (line  58)
* d>=:                                   Numeric comparison.  (line  60)
* d>f:                                   Floating Point.      (line  22)
* D>F, d cannot be presented precisely as a float: floating-ambcond.
                                                              (line  38)
* d>s:                                   Double precision.    (line  23)
* D>S, d out of range of n:              double-ambcond.      (line   7)
* dabs:                                  Double precision.    (line  31)
* data examination:                      Examining.           (line   6)
* data space - reserving some:           Dictionary allocation.
                                                              (line   6)
* data space available:                  core-other.          (line  16)
* data space containing definitions gets de-allocated: core-ambcond.
                                                              (line 123)
* data space pointer not properly aligned, ,, C,: core-ambcond.
                                                              (line 135)
* data space read/write with incorrect alignment: core-ambcond.
                                                              (line 127)
* data stack:                            Stack Manipulation.  (line   8)
* data stack manipulation words:         Data stack.          (line   6)
* data-relocatable image files:          Data-Relocatable Image Files.
                                                              (line   6)
* data-space, read-only regions:         core-idef.           (line 126)
* dbg:                                   Singlestep Debugger. (line  63)
* debug tracer editing commands:         Emacs and Gforth.    (line   6)
* debugging:                             Debugging.           (line   6)
* debugging output, finding the source location in Emacs: Emacs and Gforth.
                                                              (line  21)
* debugging Singlestep:                  Singlestep Debugger. (line   6)
* dec.:                                  Simple numeric output.
                                                              (line  15)
* decimal:                               Number Conversion.   (line  71)
* declaring C functions:                 Declaring C Functions.
                                                              (line   6)
* decompilation tutorial:                Decompilation Tutorial.
                                                              (line   6)
* default type of locals:                Gforth locals.       (line  51)
* Defer:                                 Deferred Words.      (line  77)
* defer:                                 Class Declaration.   (line  21)
* defer!:                                Deferred Words.      (line  81)
* defer@:                                Deferred Words.      (line  88)
* deferred words:                        Deferred Words.      (line   6)
* defers:                                Deferred Words.      (line  95)
* definer:                               Threading Words.     (line  84)
* definer!:                              Threading Words.     (line  92)
* defines:                               Basic Mini-OOF Usage.
                                                              (line  26)
* defining defining words:               User-defined Defining Words.
                                                              (line  60)
* defining words:                        Defining Words.      (line   6)
* defining words tutorial:               Defining Words Tutorial.
                                                              (line   6)
* defining words with arbitrary semantics combinations: Combined words.
                                                              (line  62)
* defining words without name:           Anonymous Definitions.
                                                              (line   6)
* defining words, name given in a string: Supplying names.    (line   6)
* defining words, simple:                CREATE.              (line   6)
* defining words, user-defined:          User-defined Defining Words.
                                                              (line   6)
* definition:                            Introducing the Text Interpreter.
                                                              (line  47)
* definitions:                           Word Lists.          (line  33)
* definitions <1>:                       The OOF base class.  (line  22)
* definitions, tutorial:                 Colon Definitions Tutorial.
                                                              (line   6)
* delete-file:                           General files.       (line  28)
* depth:                                 Examining.           (line  25)
* depth changes during interpretation:   Stack depth changes. (line   6)
* depth-changes.fs:                      Stack depth changes. (line   6)
* design of stack effects, tutorial:     Designing the stack effect Tutorial.
                                                              (line   6)
* dest, control-flow stack item:         Arbitrary control structures.
                                                              (line  11)
* df!:                                   Memory Access.       (line  46)
* df@:                                   Memory Access.       (line  42)
* df@ or df! used with an address that is not double-float aligned: floating-ambcond.
                                                              (line   7)
* dfalign:                               Dictionary allocation.
                                                              (line  74)
* dfaligned:                             Address arithmetic.  (line 105)
* dffield::                              Forth200x Structures.
                                                              (line  41)
* dfloat%:                               Structure Glossary.  (line  28)
* dfloat+:                               Address arithmetic.  (line 102)
* dfloats:                               Address arithmetic.  (line  98)
* df_, stack item type:                  Notation.            (line  78)
* dict-new:                              Objects Glossary.    (line  54)
* dict-new discussion:                   Creating objects.    (line   6)
* dictionary:                            The Text Interpreter.
                                                              (line  28)
* dictionary in persistent form:         Image Files.         (line   6)
* dictionary overflow:                   core-ambcond.        (line  50)
* dictionary size default:               Stack and Dictionary Sizes.
                                                              (line   6)
* digits > 35:                           core-idef.           (line  67)
* direct threaded inner interpreter:     Threading.           (line  23)
* disassembler, general:                 Common Disassembler. (line   6)
* discode:                               Common Disassembler. (line   9)
* dispose:                               The OOF base class.  (line  34)
* dividing by zero:                      core-ambcond.        (line  29)
* dividing by zero, floating-point:      floating-ambcond.    (line  41)
* Dividing classes:                      Dividing classes.    (line   6)
* division rounding:                     core-idef.           (line 166)
* division with potentially negative operands: Arithmetic.    (line   6)
* dmax:                                  Double precision.    (line  35)
* dmin:                                  Double precision.    (line  33)
* dnegate:                               Double precision.    (line  29)
* DO:                                    Arbitrary control structures.
                                                              (line  69)
* DO loops:                              Counted Loops.       (line   6)
* docol::                                Threading Words.     (line  66)
* docon::                                Threading Words.     (line  69)
* dodefer::                              Threading Words.     (line  78)
* dodoes routine:                        DOES>.               (line   6)
* does-code!:                            Threading Words.     (line  52)
* does-handler!:                         Threading Words.     (line  56)
* DOES>:                                 CREATE..DOES> details.
                                                              (line   6)
* DOES> implementation:                  DOES>.               (line   6)
* DOES> in a separate definition:        CREATE..DOES> details.
                                                              (line   8)
* DOES> in interpretation state:         CREATE..DOES> details.
                                                              (line  31)
* DOES> of non-CREATEd words:            core-ambcond.        (line 176)
* does> tutorial:                        Defining Words Tutorial.
                                                              (line   6)
* DOES>, visibility of current definition: core-idef.         (line 186)
* does>-code:                            Threading Words.     (line  36)
* DOES>-code:                            DOES>.               (line   6)
* does>-handler:                         Threading Words.     (line  36)
* DOES>-parts, stack effect:             User-defined Defining Words.
                                                              (line 149)
* dofield::                              Threading Words.     (line  81)
* DONE:                                  Arbitrary control structures.
                                                              (line  87)
* double precision arithmetic words:     Double precision.    (line   6)
* double words, ambiguous conditions:    double-ambcond.      (line   6)
* double words, system documentation:    The optional Double Number word set.
                                                              (line   6)
* double%:                               Structure Glossary.  (line  30)
* double-cell numbers, input format:     Number Conversion.   (line   6)
* doubly indirect threaded code:         gforthmi.            (line  44)
* douser::                               Threading Words.     (line  75)
* dovar::                                Threading Words.     (line  72)
* dpl:                                   Number Conversion.   (line  51)
* drop:                                  Data stack.          (line   6)
* du<:                                   Numeric comparison.  (line  74)
* du<=:                                  Numeric comparison.  (line  76)
* du>:                                   Numeric comparison.  (line  78)
* du>=:                                  Numeric comparison.  (line  80)
* dump:                                  Examining.           (line  44)
* dup:                                   Data stack.          (line  10)
* duration of a system clock tick:       facility-idef.       (line  13)
* dynamic allocation of memory:          Heap Allocation.     (line   6)
* Dynamic superinstructions with replication: Dynamic Superinstructions.
                                                              (line   6)
* Dynamically linked libraries in C interface: Declaring OS-level libraries.
                                                              (line   6)
* early:                                 Class Declaration.   (line  26)
* early binding:                         Class Binding.       (line   6)
* edit-line:                             Line input and conversion.
                                                              (line  18)
* editing in ACCEPT and EXPECT:          core-idef.           (line  17)
* eforth performance:                    Performance.         (line  22)
* ekey:                                  Single-key input.    (line  38)
* EKEY, encoding of keyboard events:     facility-idef.       (line   7)
* ekey>char:                             Single-key input.    (line  41)
* ekey>fkey:                             Single-key input.    (line  44)
* ekey?:                                 Single-key input.    (line  48)
* elements of a Forth system:            Review - elements of a Forth system.
                                                              (line   6)
* ELSE:                                  Arbitrary control structures.
                                                              (line  40)
* Emacs and Gforth:                      Emacs and Gforth.    (line   6)
* emit:                                  Displaying characters and strings.
                                                              (line  18)
* EMIT and non-graphic characters:       core-idef.           (line  13)
* emit-file:                             General files.       (line  54)
* empty-buffer:                          Blocks.              (line 167)
* empty-buffers:                         Blocks.              (line 163)
* end-c-library:                         Defining library interfaces.
                                                              (line  39)
* end-class:                             Objects Glossary.    (line  57)
* end-class <1>:                         Basic Mini-OOF Usage.
                                                              (line  23)
* end-class usage:                       Basic Objects Usage. (line   8)
* end-class-noname:                      Objects Glossary.    (line  61)
* end-code:                              Code and ;code.      (line  25)
* end-interface:                         Objects Glossary.    (line  64)
* end-interface usage:                   Object Interfaces.   (line  27)
* end-interface-noname:                  Objects Glossary.    (line  68)
* end-methods:                           Objects Glossary.    (line  71)
* end-struct:                            Structure Glossary.  (line  32)
* end-struct usage:                      Structure Usage.     (line   6)
* end-structure:                         Forth200x Structures.
                                                              (line  27)
* endcase:                               Arbitrary control structures.
                                                              (line 100)
* ENDIF:                                 Arbitrary control structures.
                                                              (line  48)
* endless loop:                          Simple Loops.        (line  28)
* endof:                                 Arbitrary control structures.
                                                              (line 104)
* endscope:                              Where are locals visible by name?.
                                                              (line  13)
* endtry:                                Exception Handling.  (line  94)
* endtry-iferror:                        Exception Handling.  (line 173)
* endwith:                               The OOF base class.  (line  88)
* engine:                                Engine.              (line   6)
* engine performance:                    Performance.         (line   6)
* engine portability:                    Portability.         (line   6)
* engine.s:                              Produced code.       (line   6)
* engines, gforth vs. gforth-fast vs. gforth-itc: Direct or Indirect Threaded?.
                                                              (line  39)
* environment variables:                 Environment variables.
                                                              (line   6)
* environment variables <1>:             gforthmi.            (line  44)
* environment wordset:                   Notation.            (line  36)
* environment-wordlist:                  Environmental Queries.
                                                              (line  29)
* environment?:                          Environmental Queries.
                                                              (line  24)
* ENVIRONMENT? string length, maximum:   core-idef.           (line  94)
* environmental queries:                 Environmental Queries.
                                                              (line   6)
* environmental restrictions:            ANS conformance.     (line  39)
* equality of floats:                    Floating Point.      (line 125)
* erase:                                 Memory Blocks.       (line  22)
* error messages:                        Error messages.      (line   6)
* error output, finding the source location in Emacs: Emacs and Gforth.
                                                              (line  21)
* etags.fs:                              Emacs Tags.          (line   6)
* evaluate:                              Input Sources.       (line  40)
* examining data and code:               Examining.           (line   6)
* exception:                             Exception Handling.  (line  31)
* exception abort sequence of ABORT":    core-idef.           (line  75)
* exception when including source:       file-idef.           (line  33)
* exception words, implementation-defined options: exception-idef.
                                                              (line   6)
* exception words, system documentation: The optional Exception word set.
                                                              (line   6)
* exceptions:                            Exception Handling.  (line   6)
* exceptions tutorial:                   Exceptions Tutorial. (line   6)
* executable image file:                 Running Image Files. (line  10)
* execute:                               Execution token.     (line  53)
* execute-parsing:                       The Input Stream.    (line  65)
* execute-parsing-file:                  The Input Stream.    (line  75)
* executing code on startup:             Invoking Gforth.     (line 180)
* execution semantics:                   Interpretation and Compilation Semantics.
                                                              (line  18)
* execution token:                       Introducing the Text Interpreter.
                                                              (line  47)
* execution token <1>:                   Execution token.     (line   6)
* execution token of last defined word:  Anonymous Definitions.
                                                              (line  28)
* execution token of words with undefined execution semantics: core-ambcond.
                                                              (line  24)
* execution tokens tutorial:             Execution Tokens Tutorial.
                                                              (line   6)
* exercises:                             Exercises.           (line   6)
* EXIT:                                  Calls and returns.   (line  42)
* exit in m: ... ;m:                     Method conveniences. (line  15)
* exitm:                                 Objects Glossary.    (line  75)
* exitm discussion:                      Method conveniences. (line  15)
* expect:                                Line input and conversion.
                                                              (line  56)
* EXPECT, display after end of input:    core-idef.           (line  71)
* EXPECT, editing:                       core-idef.           (line  17)
* explicit register declarations:        Portability.         (line  40)
* exponent too big for conversion (DF!, DF@, SF!, SF@): floating-ambcond.
                                                              (line  46)
* extended records:                      Structure Usage.     (line  51)
* f!:                                    Memory Access.       (line  31)
* f! used with an address that is not float aligned: floating-ambcond.
                                                              (line  11)
* f*:                                    Floating Point.      (line  30)
* f**:                                   Floating Point.      (line  49)
* f+:                                    Floating Point.      (line  26)
* f,:                                    Dictionary allocation.
                                                              (line  41)
* f, stack item type:                    Notation.            (line  55)
* f-:                                    Floating Point.      (line  28)
* f.:                                    Simple numeric output.
                                                              (line  53)
* f.rdp:                                 Simple numeric output.
                                                              (line  65)
* f.s:                                   Examining.           (line  13)
* f/:                                    Floating Point.      (line  32)
* f0<:                                   Floating Point.      (line 153)
* f0<=:                                  Floating Point.      (line 155)
* f0<>:                                  Floating Point.      (line 157)
* f0=:                                   Floating Point.      (line 159)
* f0>:                                   Floating Point.      (line 161)
* f0>=:                                  Floating Point.      (line 163)
* f2*:                                   Floating Point.      (line  70)
* f2/:                                   Floating Point.      (line  73)
* f83name, stack item type:              Notation.            (line  88)
* f<:                                    Floating Point.      (line 145)
* f<=:                                   Floating Point.      (line 147)
* f<>:                                   Floating Point.      (line 143)
* f=:                                    Floating Point.      (line 141)
* f>:                                    Floating Point.      (line 149)
* f>=:                                   Floating Point.      (line 151)
* f>buf-rdp:                             Formatted numeric output.
                                                              (line  79)
* f>d:                                   Floating Point.      (line  24)
* F>D, integer part of float cannot be represented by d: floating-ambcond.
                                                              (line  69)
* f>l:                                   Locals implementation.
                                                              (line  26)
* f>str-rdp:                             Formatted numeric output.
                                                              (line  73)
* f@:                                    Memory Access.       (line  28)
* f@ used with an address that is not float aligned: floating-ambcond.
                                                              (line  11)
* f@local#:                              Locals implementation.
                                                              (line  14)
* fabs:                                  Floating Point.      (line  36)
* facility words, ambiguous conditions:  facility-ambcond.    (line   6)
* facility words, implementation-defined options: facility-idef.
                                                              (line   6)
* facility words, system documentation:  The optional Facility word set.
                                                              (line   6)
* facos:                                 Floating Point.      (line 101)
* FACOS, |float|>1:                      floating-ambcond.    (line  66)
* facosh:                                Floating Point.      (line 117)
* FACOSH, float<1:                       floating-ambcond.    (line  50)
* factoring:                             Introduction.        (line  30)
* factoring similar colon definitions:   CREATE..DOES> applications.
                                                              (line   8)
* factoring tutorial:                    Factoring Tutorial.  (line   6)
* falign:                                Dictionary allocation.
                                                              (line  66)
* faligned:                              Address arithmetic.  (line  83)
* falog:                                 Floating Point.      (line  67)
* false:                                 Boolean Flags.       (line  14)
* fam (file access method):              General files.       (line   9)
* fasin:                                 Floating Point.      (line  99)
* FASIN, |float|>1:                      floating-ambcond.    (line  66)
* fasinh:                                Floating Point.      (line 115)
* FASINH, float<0:                       floating-ambcond.    (line  61)
* fatan:                                 Floating Point.      (line 103)
* fatan2:                                Floating Point.      (line 105)
* FATAN2, both arguments are equal to zero: floating-ambcond. (line  29)
* fatanh:                                Floating Point.      (line 119)
* FATANH, |float|>1:                     floating-ambcond.    (line  66)
* fconstant:                             Constants.           (line  31)
* fcos:                                  Floating Point.      (line  92)
* fcosh:                                 Floating Point.      (line 111)
* fdepth:                                Examining.           (line  29)
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
                                                              (line   6)
* fdrop:                                 Floating point stack.
                                                              (line  19)
* fdup:                                  Floating point stack.
                                                              (line  23)
* fe.:                                   Simple numeric output.
                                                              (line  57)
* fexp:                                  Floating Point.      (line  54)
* fexpm1:                                Floating Point.      (line  56)
* ffield::                               Forth200x Structures.
                                                              (line  37)
* field:                                 Structure Glossary.  (line  37)
* field naming convention:               Structure Naming Convention.
                                                              (line  14)
* field usage:                           Structure Usage.     (line   6)
* field usage in class definition:       Basic Objects Usage. (line  29)
* field::                                Forth200x Structures.
                                                              (line  33)
* file access methods used:              file-idef.           (line   7)
* file exceptions:                       file-idef.           (line  14)
* file input nesting, maximum depth:     file-idef.           (line  42)
* file line terminator:                  file-idef.           (line  18)
* file name format:                      file-idef.           (line  23)
* file search path:                      Search Paths.        (line   6)
* file words, ambiguous conditions:      file-ambcond.        (line   6)
* file words, implementation-defined options: file-idef.      (line   6)
* file words, system documentation:      The optional File-Access word set.
                                                              (line   6)
* file-handling:                         General files.       (line   6)
* file-position:                         General files.       (line  60)
* file-size:                             General files.       (line  64)
* file-status:                           General files.       (line  58)
* FILE-STATUS, returned information:     file-idef.           (line  27)
* filenames in assertion output:         Assertions.          (line  70)
* filenames in ~~ output:                Debugging.           (line  39)
* files:                                 Files.               (line   6)
* files containing blocks:               file-idef.           (line  49)
* files containing Forth code, tutorial: Using files for Forth code Tutorial.
                                                              (line   6)
* files tutorial:                        Files Tutorial.      (line   6)
* fill:                                  Memory Blocks.       (line  35)
* find:                                  Word Lists.          (line  88)
* find-name:                             Name token.          (line  20)
* first definition:                      Your first definition.
                                                              (line   6)
* first field optimization:              Structure Usage.     (line  71)
* first field optimization, implementation: Structure Implementation.
                                                              (line  24)
* flags on the command line:             Invoking Gforth.     (line   6)
* flags tutorial:                        Flags and Comparisons Tutorial.
                                                              (line   6)
* flavours of locals:                    Gforth locals.       (line  40)
* FLiteral:                              Literals.            (line  57)
* fln:                                   Floating Point.      (line  59)
* FLN, float=<0:                         floating-ambcond.    (line  57)
* flnp1:                                 Floating Point.      (line  61)
* FLNP1, float=<-1:                      floating-ambcond.    (line  53)
* float:                                 Address arithmetic.  (line  79)
* float%:                                Structure Glossary.  (line  44)
* float+:                                Address arithmetic.  (line  76)
* floating point arithmetic words:       Floating Point.      (line   6)
* floating point numbers, format and range: floating-idef.    (line   7)
* floating point tutorial:               Floating Point Tutorial.
                                                              (line   6)
* floating point unidentified fault, integer division: core-ambcond.
                                                              (line  29)
* floating-point arithmetic, pitfalls:   Floating Point.      (line  12)
* floating-point comparisons:            Floating Point.      (line 125)
* floating-point dividing by zero:       floating-ambcond.    (line  41)
* floating-point numbers, input format:  Number Conversion.   (line   6)
* floating-point numbers, rounding or truncation: floating-idef.
                                                              (line  14)
* floating-point result out of range:    floating-ambcond.    (line  15)
* floating-point stack:                  Stack Manipulation.  (line  11)
* floating-point stack in the standard:  Stack Manipulation.  (line   6)
* floating-point stack manipulation words: Floating point stack.
                                                              (line   6)
* floating-point stack size:             floating-idef.       (line  20)
* floating-point stack width:            floating-idef.       (line  26)
* floating-point unidentified fault, F>D: floating-ambcond.   (line  69)
* floating-point unidentified fault, FACOS, FASIN or FATANH: floating-ambcond.
                                                              (line  66)
* floating-point unidentified fault, FACOSH: floating-ambcond.
                                                              (line  50)
* floating-point unidentified fault, FASINH or FSQRT: floating-ambcond.
                                                              (line  61)
* floating-point unidentified fault, FLN or FLOG: floating-ambcond.
                                                              (line  57)
* floating-point unidentified fault, FLNP1: floating-ambcond. (line  53)
* floating-point unidentified fault, FP divide-by-zero: floating-ambcond.
                                                              (line  41)
* floating-point words, ambiguous conditions: floating-ambcond.
                                                              (line   6)
* floating-point words, implementation-defined options: floating-idef.
                                                              (line   6)
* floating-point words, system documentation: The optional Floating-Point word set.
                                                              (line   6)
* floating-stack:                        Floating point stack.
                                                              (line  15)
* floats:                                Address arithmetic.  (line  73)
* flog:                                  Floating Point.      (line  64)
* FLOG, float=<0:                        floating-ambcond.    (line  57)
* floor:                                 Floating Point.      (line  42)
* FLOORED:                               Single precision.    (line  41)
* flush:                                 Blocks.              (line 182)
* flush-file:                            General files.       (line  56)
* flush-icache:                          Code and ;code.      (line  29)
* fm/mod:                                Mixed precision.     (line  25)
* fmax:                                  Floating Point.      (line  38)
* fmin:                                  Floating Point.      (line  40)
* fnegate:                               Floating Point.      (line  34)
* fnip:                                  Floating point stack.
                                                              (line  21)
* FOR:                                   Arbitrary control structures.
                                                              (line  71)
* FOR loops:                             Counted Loops.       (line 101)
* foreign language interface:            C Interface.         (line   6)
* FORGET, deleting the compilation word list: programming-ambcond.
                                                              (line   7)
* FORGET, name can't be found:           programming-ambcond. (line  16)
* FORGET, removing a needed definition:  programming-ambcond. (line  33)
* forgeting words:                       Forgetting words.    (line   6)
* form:                                  Terminal output.     (line  17)
* format and range of floating point numbers: floating-idef.  (line   7)
* format of glossary entries:            Notation.            (line   6)
* formatted numeric output:              Formatted numeric output.
                                                              (line   6)
* Forth:                                 Word Lists.          (line  74)
* Forth - an introduction:               Introduction.        (line   6)
* Forth mode in Emacs:                   Emacs and Gforth.    (line   6)
* Forth source files:                    Forth source files.  (line   6)
* Forth Tutorial:                        Tutorial.            (line   6)
* Forth-related information:             Forth-related information.
                                                              (line   6)
* forth-wordlist:                        Word Lists.          (line  28)
* forth.el:                              Emacs and Gforth.    (line   6)
* fover:                                 Floating point stack.
                                                              (line  25)
* FP tutorial:                           Floating Point Tutorial.
                                                              (line   6)
* fp!:                                   Stack pointer manipulation.
                                                              (line  19)
* fp0:                                   Stack pointer manipulation.
                                                              (line  14)
* fp@:                                   Stack pointer manipulation.
                                                              (line  17)
* fpath:                                 Source Search Paths. (line  10)
* fpick:                                 Floating point stack.
                                                              (line  31)
* free:                                  Heap Allocation.     (line  23)
* frequently asked questions:            Forth-related information.
                                                              (line   6)
* frot:                                  Floating point stack.
                                                              (line  34)
* fround:                                Floating Point.      (line  46)
* fs.:                                   Simple numeric output.
                                                              (line  61)
* fsin:                                  Floating Point.      (line  90)
* fsincos:                               Floating Point.      (line  94)
* fsinh:                                 Floating Point.      (line 109)
* fsqrt:                                 Floating Point.      (line  52)
* FSQRT, float<0:                        floating-ambcond.    (line  61)
* fswap:                                 Floating point stack.
                                                              (line  29)
* ftan:                                  Floating Point.      (line  97)
* FTAN on an argument r1 where cos(r1) is zero: floating-ambcond.
                                                              (line  33)
* ftanh:                                 Floating Point.      (line 113)
* ftuck:                                 Floating point stack.
                                                              (line  27)
* fully relocatable image files:         Fully Relocatable Image Files.
                                                              (line   6)
* functions, tutorial:                   Colon Definitions Tutorial.
                                                              (line   6)
* fvariable:                             Variables.           (line  35)
* f_, stack item type:                   Notation.            (line  76)
* f~:                                    Floating Point.      (line 137)
* f~abs:                                 Floating Point.      (line 134)
* f~rel:                                 Floating Point.      (line 131)
* gdb disassembler:                      Common Disassembler. (line   6)
* general files:                         General files.       (line   6)
* get-block-fid:                         Blocks.              (line 132)
* get-current:                           Word Lists.          (line  37)
* get-order:                             Word Lists.          (line  43)
* getenv:                                Passing Commands to the OS.
                                                              (line  24)
* gforth:                                Environmental Queries.
                                                              (line  33)
* GFORTH - environment variable:         Environment variables.
                                                              (line  33)
* GFORTH - environment variable <1>:     gforthmi.            (line  44)
* Gforth - leaving:                      Leaving Gforth.      (line   6)
* gforth engine:                         Direct or Indirect Threaded?.
                                                              (line  39)
* Gforth environment:                    Gforth Environment.  (line   6)
* Gforth extensions:                     Standard vs Extensions.
                                                              (line   6)
* Gforth files:                          Gforth Files.        (line   6)
* Gforth locals:                         Gforth locals.       (line   6)
* Gforth performance:                    Performance.         (line   6)
* gforth-ditc:                           gforthmi.            (line  44)
* gforth-fast and backtraces:            Error messages.      (line  53)
* gforth-fast engine:                    Direct or Indirect Threaded?.
                                                              (line  39)
* gforth-fast, difference from gforth:   Error messages.      (line  53)
* gforth-itc engine:                     Direct or Indirect Threaded?.
                                                              (line  43)
* gforth.el:                             Emacs and Gforth.    (line   6)
* gforth.el, installation:               Installing gforth.el.
                                                              (line   6)
* gforth.fi, relocatability:             Fully Relocatable Image Files.
                                                              (line   6)
* GFORTHD - environment variable:        Environment variables.
                                                              (line  35)
* GFORTHD - environment variable <1>:    gforthmi.            (line  44)
* GFORTHHIST - environment variable:     Environment variables.
                                                              (line   8)
* gforthmi:                              gforthmi.            (line   6)
* GFORTHPATH - environment variable:     Environment variables.
                                                              (line  12)
* GFORTHSYSTEMPREFIX - environment variable: Environment variables.
                                                              (line  26)
* giving a name to a library interface:  Defining library interfaces.
                                                              (line   6)
* glossary notation format:              Notation.            (line   6)
* GNU C for the engine:                  Portability.         (line  23)
* goals of the Gforth project:           Goals.               (line   6)
* header space:                          Word Lists.          (line   6)
* heap allocation:                       Heap Allocation.     (line   6)
* heap-new:                              Objects Glossary.    (line  78)
* heap-new discussion:                   Creating objects.    (line   6)
* heap-new usage:                        Basic Objects Usage. (line  51)
* here:                                  Dictionary allocation.
                                                              (line  24)
* hex:                                   Number Conversion.   (line  67)
* hex.:                                  Simple numeric output.
                                                              (line  18)
* highlighting Forth code in Emacs:      Hilighting.          (line   6)
* hilighting Forth code in Emacs:        Hilighting.          (line   6)
* history file:                          Command-line editing.
                                                              (line  38)
* hold:                                  Formatted numeric output.
                                                              (line  53)
* how::                                  Class Declaration.   (line  39)
* hybrid direct/indirect threaded code:  Direct or Indirect Threaded?.
                                                              (line  31)
* i:                                     Counted Loops.       (line  23)
* I/O - blocks:                          Blocks.              (line   6)
* I/O - file-handling:                   Files.               (line   6)
* I/O - keyboard and display:            Other I/O.           (line   6)
* I/O - see character strings:           String Formats.      (line   6)
* I/O - see input:                       Line input and conversion.
                                                              (line   6)
* I/O exception in block transfer:       block-ambcond.       (line  12)
* id.:                                   Name token.          (line  49)
* IF:                                    Arbitrary control structures.
                                                              (line  16)
* IF control structure:                  Selection.           (line   6)
* if, tutorial:                          Conditional execution Tutorial.
                                                              (line   6)
* iferror:                               Exception Handling.  (line  97)
* image file:                            Image Files.         (line   6)
* image file background:                 Image File Background.
                                                              (line   6)
* image file initialization sequence:    Modifying the Startup Sequence.
                                                              (line   6)
* image file invocation:                 Running Image Files. (line   6)
* image file loader:                     Image File Background.
                                                              (line  34)
* image file, data-relocatable:          Data-Relocatable Image Files.
                                                              (line   6)
* image file, executable:                Running Image Files. (line  10)
* image file, fully relocatable:         Fully Relocatable Image Files.
                                                              (line   6)
* image file, non-relocatable:           Non-Relocatable Image Files.
                                                              (line   6)
* image file, stack and dictionary sizes: Stack and Dictionary Sizes.
                                                              (line   6)
* image file, turnkey applications:      Modifying the Startup Sequence.
                                                              (line  22)
* image license:                         Image Licensing Issues.
                                                              (line   6)
* immediate:                             Interpretation and Compilation Semantics.
                                                              (line  32)
* immediate words:                       How does that work?. (line  91)
* immediate words <1>:                   Interpretation and Compilation Semantics.
                                                              (line  30)
* immediate, tutorial:                   Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                              (line   6)
* implementation:                        Objects Glossary.    (line  81)
* implementation of locals:              Locals implementation.
                                                              (line   6)
* implementation of structures:          Structure Implementation.
                                                              (line   6)
* implementation usage:                  Object Interfaces.   (line  27)
* implementation-defined options, block words: block-idef.    (line   6)
* implementation-defined options, core words: core-idef.      (line   6)
* implementation-defined options, exception words: exception-idef.
                                                              (line   6)
* implementation-defined options, facility words: facility-idef.
                                                              (line   6)
* implementation-defined options, file words: file-idef.      (line   6)
* implementation-defined options, floating-point words: floating-idef.
                                                              (line   6)
* implementation-defined options, locals words: locals-idef.  (line   6)
* implementation-defined options, memory-allocation words: memory-idef.
                                                              (line   6)
* implementation-defined options, programming-tools words: programming-idef.
                                                              (line   6)
* implementation-defined options, search-order words: search-idef.
                                                              (line   6)
* in-lining of constants:                Constants.           (line  46)
* include:                               Forth source files.  (line  46)
* include search path:                   Search Paths.        (line   6)
* include, placement in files:           Emacs Tags.          (line   6)
* include-file:                          Forth source files.  (line  32)
* INCLUDE-FILE, file-id is invalid:      file-ambcond.        (line  15)
* INCLUDE-FILE, I/O exception reading or closing file-id: file-ambcond.
                                                              (line  19)
* included:                              Forth source files.  (line  36)
* INCLUDED, I/O exception reading or closing file-id: file-ambcond.
                                                              (line  19)
* INCLUDED, named file cannot be opened: file-ambcond.        (line  23)
* included?:                             Forth source files.  (line  39)
* including files:                       Forth source files.  (line   6)
* including files, stack effect:         Forth source files.  (line  20)
* indentation of Forth code in Emacs:    Auto-Indentation.    (line   6)
* indirect threaded inner interpreter:   Threading.           (line  12)
* infile-execute:                        Redirection.         (line  24)
* inheritance:                           Object-Oriented Terminology.
                                                              (line  43)
* init:                                  The OOF base class.  (line  32)
* init-asm:                              Code and ;code.      (line  21)
* init-object:                           Objects Glossary.    (line  85)
* init-object discussion:                Creating objects.    (line  12)
* initialization sequence of image file: Modifying the Startup Sequence.
                                                              (line   6)
* inner interpreter implementation:      Threading.           (line   6)
* inner interpreter optimization:        Scheduling.          (line   6)
* inner interpreter, direct threaded:    Threading.           (line  23)
* inner interpreter, indirect threaded:  Threading.           (line  12)
* input buffer:                          The Text Interpreter.
                                                              (line  20)
* input format for double-cell numbers:  Number Conversion.   (line   6)
* input format for floating-point numbers: Number Conversion. (line   6)
* input format for single-cell numbers:  Number Conversion.   (line   6)
* input from pipes:                      Gforth in pipes.     (line   9)
* input line size, maximum:              file-idef.           (line  46)
* input line terminator:                 core-idef.           (line  79)
* Input Redirection:                     Redirection.         (line   6)
* input sources:                         Input Sources.       (line   6)
* input stream:                          The Input Stream.    (line   6)
* input, linewise from terminal:         Line input and conversion.
                                                              (line   6)
* input, single-key:                     Single-key input.    (line   6)
* inst-value:                            Objects Glossary.    (line  89)
* inst-value usage:                      Method conveniences. (line  44)
* inst-value visibility:                 Classes and Scoping. (line  12)
* inst-var:                              Objects Glossary.    (line  93)
* inst-var implementation:               Objects Implementation.
                                                              (line  53)
* inst-var usage:                        Method conveniences. (line  22)
* inst-var visibility:                   Classes and Scoping. (line  12)
* instance variables:                    Object-Oriented Terminology.
                                                              (line  17)
* instruction pointer:                   Threading.           (line  16)
* insufficient data stack or return stack space: core-ambcond.
                                                              (line  34)
* insufficient space for loop control parameters: core-ambcond.
                                                              (line  47)
* insufficient space in the dictionary:  core-ambcond.        (line  50)
* integer types, ranges:                 core-idef.           (line 119)
* interface:                             Objects Glossary.    (line  97)
* interface implementation:              Objects Implementation.
                                                              (line  64)
* interface to C functions:              C Interface.         (line   6)
* interface usage:                       Object Interfaces.   (line  27)
* interfaces for objects:                Object Interfaces.   (line   6)
* interpret state:                       The Text Interpreter.
                                                              (line  11)
* Interpret/Compile states:              Interpret/Compile states.
                                                              (line   6)
* interpret/compile::                    Combined words.      (line   9)
* interpretation semantics:              How does that work?. (line  63)
* interpretation semantics <1>:          Interpretation and Compilation Semantics.
                                                              (line   6)
* interpretation semantics tutorial:     Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                              (line   6)
* interpretation>:                       Combined words.      (line  94)
* interpreter - outer:                   The Text Interpreter.
                                                              (line   6)
* interpreter directives:                Interpreter Directives.
                                                              (line   6)
* Interpreting a compile-only word:      core-ambcond.        (line  57)
* Interpreting a compile-only word, for ' etc.: core-ambcond. (line  24)
* Interpreting a compile-only word, for a local: locals-ambcond.
                                                              (line   7)
* interpreting a word with undefined interpretation semantics: core-ambcond.
                                                              (line  57)
* invalid block number:                  block-ambcond.       (line  16)
* Invalid memory address:                core-ambcond.        (line  13)
* Invalid memory address, stack overflow: core-ambcond.       (line  34)
* Invalid name argument, TO:             core-ambcond.        (line 149)
* Invalid name argument, TO <1>:         locals-ambcond.      (line  14)
* invert:                                Bitwise operations.  (line  12)
* invoking a selector:                   Object-Oriented Terminology.
                                                              (line  31)
* invoking Gforth:                       Invoking Gforth.     (line   6)
* invoking image files:                  Running Image Files. (line   6)
* ior type description:                  Notation.            (line  86)
* ior values and meaning:                file-idef.           (line  36)
* ior values and meaning <1>:            memory-idef.         (line   7)
* IS:                                    Deferred Words.      (line  84)
* is:                                    The OOF base class.  (line  72)
* items on the stack after interpretation: Stack depth changes.
                                                              (line   6)
* j:                                     Counted Loops.       (line  25)
* k:                                     Counted Loops.       (line  27)
* k-alt-mask:                            Single-key input.    (line 111)
* k-ctrl-mask:                           Single-key input.    (line 109)
* k-delete:                              Single-key input.    (line  74)
* k-down:                                Single-key input.    (line  59)
* k-end:                                 Single-key input.    (line  64)
* k-f1:                                  Single-key input.    (line  78)
* k-f10:                                 Single-key input.    (line  96)
* k-f11:                                 Single-key input.    (line  98)
* k-f12:                                 Single-key input.    (line 100)
* k-f2:                                  Single-key input.    (line  80)
* k-f3:                                  Single-key input.    (line  82)
* k-f4:                                  Single-key input.    (line  84)
* k-f5:                                  Single-key input.    (line  86)
* k-f6:                                  Single-key input.    (line  88)
* k-f7:                                  Single-key input.    (line  90)
* k-f8:                                  Single-key input.    (line  92)
* k-f9:                                  Single-key input.    (line  94)
* k-home:                                Single-key input.    (line  61)
* k-insert:                              Single-key input.    (line  72)
* k-left:                                Single-key input.    (line  53)
* k-next:                                Single-key input.    (line  69)
* k-prior:                               Single-key input.    (line  66)
* k-right:                               Single-key input.    (line  55)
* k-shift-mask:                          Single-key input.    (line 107)
* k-up:                                  Single-key input.    (line  57)
* kern*.fi, relocatability:              Fully Relocatable Image Files.
                                                              (line   6)
* key:                                   Single-key input.    (line   9)
* key-file:                              General files.       (line  37)
* key?:                                  Single-key input.    (line  12)
* key?-file:                             General files.       (line  44)
* keyboard events, encoding in EKEY:     facility-idef.       (line   7)
* Kuehling, David:                       Emacs and Gforth.    (line   6)
* l!:                                    Memory Access.       (line  65)
* labels as values:                      Threading.           (line   6)
* laddr#:                                Locals implementation.
                                                              (line  16)
* LANG - environment variable:           Environment variables.
                                                              (line  15)
* last word was headerless:              core-ambcond.        (line 146)
* late binding:                          Class Binding.       (line   6)
* latest:                                Name token.          (line  24)
* latestxt:                              Anonymous Definitions.
                                                              (line  28)
* LC_ALL - environment variable:         Environment variables.
                                                              (line  17)
* LC_CTYPE - environment variable:       Environment variables.
                                                              (line  19)
* LEAVE:                                 Arbitrary control structures.
                                                              (line  81)
* leaving definitions, tutorial:         Leaving definitions or loops Tutorial.
                                                              (line   6)
* leaving Gforth:                        Leaving Gforth.      (line   6)
* leaving loops, tutorial:               Leaving definitions or loops Tutorial.
                                                              (line   6)
* length of a line affected by \:        block-idef.          (line  11)
* lib-error:                             Low-Level C Interface Words.
                                                              (line  10)
* lib-sym:                               Low-Level C Interface Words.
                                                              (line   8)
* Libraries in C interface:              Declaring OS-level libraries.
                                                              (line   6)
* library interface names:               Defining library interfaces.
                                                              (line   6)
* license for images:                    Image Licensing Issues.
                                                              (line   6)
* lifetime of locals:                    How long do locals live?.
                                                              (line   6)
* line input from terminal:              Line input and conversion.
                                                              (line   6)
* line terminator on input:              core-idef.           (line  79)
* link:                                  The OOF base class.  (line  70)
* list:                                  Blocks.              (line 139)
* LIST display format:                   block-idef.          (line   7)
* list-size:                             Locals implementation.
                                                              (line  98)
* Literal:                               Literals.            (line  42)
* literal tutorial:                      Literal Tutorial.    (line   6)
* Literals:                              Literals.            (line   6)
* load:                                  Blocks.              (line 185)
* loader for image files:                Image File Background.
                                                              (line  34)
* loading files at startup:              Invoking Gforth.     (line 180)
* loading Forth code, tutorial:          Using files for Forth code Tutorial.
                                                              (line   6)
* local in interpretation state:         locals-ambcond.      (line   7)
* local variables, tutorial:             Local Variables Tutorial.
                                                              (line   6)
* locale and case-sensitivity:           core-idef.           (line  34)
* locals:                                Locals.              (line   6)
* locals and return stack:               Return stack.        (line   6)
* locals flavours:                       Gforth locals.       (line  40)
* locals implementation:                 Locals implementation.
                                                              (line   6)
* locals information on the control-flow stack: Locals implementation.
                                                              (line  84)
* locals lifetime:                       How long do locals live?.
                                                              (line   6)
* locals programming style:              Locals programming style.
                                                              (line   6)
* locals stack:                          Stack Manipulation.  (line  16)
* locals stack <1>:                      Locals implementation.
                                                              (line   6)
* locals types:                          Gforth locals.       (line  32)
* locals visibility:                     Where are locals visible by name?.
                                                              (line   6)
* locals words, ambiguous conditions:    locals-ambcond.      (line   6)
* locals words, implementation-defined options: locals-idef.  (line   6)
* locals words, system documentation:    The optional Locals word set.
                                                              (line   6)
* locals, ANS Forth style:               ANS Forth locals.    (line   6)
* locals, default type:                  Gforth locals.       (line  51)
* locals, Gforth style:                  Gforth locals.       (line   6)
* locals, maximum number in a definition: locals-idef.        (line   7)
* long long:                             Portability.         (line  23)
* LOOP:                                  Arbitrary control structures.
                                                              (line  73)
* loop control parameters not available: core-ambcond.        (line 141)
* loops without count:                   Simple Loops.        (line   6)
* loops, counted:                        Counted Loops.       (line   6)
* loops, counted, tutorial:              Counted loops Tutorial.
                                                              (line   6)
* loops, endless:                        Simple Loops.        (line  28)
* loops, indefinite, tutorial:           General Loops Tutorial.
                                                              (line   6)
* lp!:                                   Stack pointer manipulation.
                                                              (line  35)
* lp! <1>:                               Locals implementation.
                                                              (line  22)
* lp+!#:                                 Locals implementation.
                                                              (line  18)
* lp0:                                   Stack pointer manipulation.
                                                              (line  29)
* lp@:                                   Stack pointer manipulation.
                                                              (line  33)
* lshift:                                Bitwise operations.  (line  14)
* LSHIFT, large shift counts:            core-ambcond.        (line 170)
* m*:                                    Mixed precision.     (line  14)
* m*/:                                   Mixed precision.     (line  18)
* m+:                                    Mixed precision.     (line   6)
* m::                                    Objects Glossary.    (line 100)
* m: usage:                              Method conveniences. (line  12)
* macros:                                Compiling words.     (line   6)
* Macros:                                Macros.              (line   6)
* macros, advanced tutorial:             Advanced macros Tutorial.
                                                              (line   6)
* mapping block ranges to files:         file-idef.           (line  49)
* marker:                                Forgetting words.    (line   9)
* max:                                   Single precision.    (line  39)
* maxalign:                              Dictionary allocation.
                                                              (line  78)
* maxaligned:                            Address arithmetic.  (line 109)
* maxdepth-.s:                           Examining.           (line  18)
* maximum depth of file input nesting:   file-idef.           (line  42)
* maximum number of locals in a definition: locals-idef.      (line   7)
* maximum number of word lists in search order: search-idef.  (line   7)
* maximum size of a counted string:      core-idef.           (line  84)
* maximum size of a definition name, in characters: core-idef.
                                                              (line  91)
* maximum size of a parsed string:       core-idef.           (line  88)
* maximum size of input line:            file-idef.           (line  46)
* maximum string length for ENVIRONMENT?, in characters: core-idef.
                                                              (line  94)
* memory access words:                   Memory Access.       (line   6)
* memory access/allocation tutorial:     Memory Tutorial.     (line   6)
* memory alignment tutorial:             Alignment Tutorial.  (line   6)
* memory block words:                    Memory Blocks.       (line   6)
* memory overcommit for dictionary and stacks: Invoking Gforth.
                                                              (line  82)
* memory words:                          Memory.              (line   6)
* memory-allocation word set:            Heap Allocation.     (line   6)
* memory-allocation words, implementation-defined options: memory-idef.
                                                              (line   6)
* memory-allocation words, system documentation: The optional Memory-Allocation word set.
                                                              (line   6)
* message send:                          Object-Oriented Terminology.
                                                              (line  31)
* metacompiler:                          cross.fs.            (line   6)
* metacompiler <1>:                      Cross Compiler.      (line   6)
* method:                                Object-Oriented Terminology.
                                                              (line  26)
* method <1>:                            Objects Glossary.    (line 110)
* method <2>:                            Class Declaration.   (line  29)
* method <3>:                            Basic Mini-OOF Usage.
                                                              (line  14)
* method conveniences:                   Method conveniences. (line   6)
* method map:                            Objects Implementation.
                                                              (line  10)
* method selector:                       Object-Oriented Terminology.
                                                              (line  20)
* method usage:                          Basic OOF Usage.     (line  11)
* methods:                               Objects Glossary.    (line 114)
* methods...end-methods:                 Dividing classes.    (line   6)
* min:                                   Single precision.    (line  37)
* mini-oof:                              Mini-OOF.            (line   6)
* mini-oof example:                      Mini-OOF Example.    (line   6)
* mini-oof usage:                        Basic Mini-OOF Usage.
                                                              (line   6)
* mini-oof.fs, differences to other models: Comparison with other object models.
                                                              (line  63)
* minimum search order:                  search-idef.         (line  10)
* miscellaneous words:                   Miscellaneous Words. (line   6)
* mixed precision arithmetic words:      Mixed precision.     (line   6)
* mod:                                   Single precision.    (line  29)
* modifying >IN:                         How does that work?. (line  18)
* modifying the contents of the input buffer or a string literal: core-ambcond.
                                                              (line  61)
* most recent definition does not have a name (IMMEDIATE): core-ambcond.
                                                              (line 146)
* motivation for object-oriented programming: Why object-oriented programming?.
                                                              (line   6)
* move:                                  Memory Blocks.       (line  18)
* ms:                                    Keeping track of Time.
                                                              (line   6)
* MS, repeatability to be expected:      facility-idef.       (line  18)
* n, stack item type:                    Notation.            (line  61)
* naligned:                              Structure Glossary.  (line  46)
* name:                                  The Input Stream.    (line  36)
* name dictionary:                       Introducing the Text Interpreter.
                                                              (line  43)
* name field address:                    Name token.          (line  10)
* name lookup, case-sensitivity:         core-idef.           (line  34)
* name not defined by VALUE or (LOCAL) used by TO: locals-ambcond.
                                                              (line  14)
* name not defined by VALUE used by TO:  core-ambcond.        (line 149)
* name not found:                        core-ambcond.        (line   7)
* name not found (', POSTPONE, ['], [COMPILE]): core-ambcond. (line 154)
* name token:                            Name token.          (line   6)
* name, maximum length:                  core-idef.           (line  91)
* name>comp:                             Name token.          (line  43)
* name>int:                              Name token.          (line  33)
* name>string:                           Name token.          (line  46)
* name?int:                              Name token.          (line  39)
* names for defined words:               Supplying names.     (line   6)
* needs:                                 Forth source files.  (line  58)
* negate:                                Single precision.    (line  33)
* negative increment for counted loops:  Counted Loops.       (line  74)
* Neon model:                            Comparison with other object models.
                                                              (line  13)
* new:                                   The OOF base class.  (line  39)
* new <1>:                               Basic Mini-OOF Usage.
                                                              (line  29)
* newline character on input:            core-idef.           (line  79)
* new[]:                                 The OOF base class.  (line  41)
* NEXT:                                  Arbitrary control structures.
                                                              (line  79)
* NEXT, direct threaded:                 Threading.           (line  23)
* NEXT, indirect threaded:               Threading.           (line  12)
* next-arg:                              OS command line arguments.
                                                              (line  15)
* nextname:                              Supplying names.     (line  10)
* NFA:                                   Name token.          (line  10)
* nip:                                   Data stack.          (line   8)
* non-graphic characters and EMIT:       core-idef.           (line  13)
* non-relocatable image files:           Non-Relocatable Image Files.
                                                              (line   6)
* noname:                                Anonymous Definitions.
                                                              (line  23)
* notation of glossary entries:          Notation.            (line   6)
* nothrow:                               Exception Handling.  (line  52)
* NT Forth performance:                  Performance.         (line  22)
* number conversion:                     Number Conversion.   (line   6)
* number conversion - traps for the unwary: Number Conversion.
                                                              (line  93)
* number of bits in one address unit:    core-idef.           (line 111)
* number representation and arithmetic:  core-idef.           (line 115)
* numeric comparison words:              Numeric comparison.  (line   6)
* numeric output - formatted:            Formatted numeric output.
                                                              (line   6)
* numeric output - simple/free-format:   Simple numeric output.
                                                              (line   6)
* object:                                Object-Oriented Terminology.
                                                              (line  13)
* object <1>:                            Objects Glossary.    (line 119)
* object <2>:                            Basic Mini-OOF Usage.
                                                              (line  11)
* object allocation options:             Creating objects.    (line   6)
* object class:                          The Objects base class.
                                                              (line   6)
* object creation:                       Creating objects.    (line   6)
* object interfaces:                     Object Interfaces.   (line   6)
* object models, comparison:             Comparison with other object models.
                                                              (line   6)
* object-map discussion:                 Objects Implementation.
                                                              (line   6)
* object-oriented programming:           Objects.             (line   6)
* object-oriented programming <1>:       OOF.                 (line   6)
* object-oriented programming motivation: Why object-oriented programming?.
                                                              (line   6)
* object-oriented programming style:     Object-Oriented Programming Style.
                                                              (line   6)
* object-oriented terminology:           Object-Oriented Terminology.
                                                              (line   6)
* objects:                               Objects.             (line   6)
* objects, basic usage:                  Basic Objects Usage. (line   6)
* objects.fs:                            Objects.             (line   6)
* objects.fs <1>:                        OOF.                 (line   6)
* objects.fs Glossary:                   Objects Glossary.    (line   6)
* objects.fs implementation:             Objects Implementation.
                                                              (line   6)
* objects.fs properties:                 Properties of the Objects model.
                                                              (line   6)
* of:                                    Arbitrary control structures.
                                                              (line 102)
* off:                                   Boolean Flags.       (line  20)
* on:                                    Boolean Flags.       (line  17)
* Only:                                  Word Lists.          (line  78)
* oof:                                   OOF.                 (line   6)
* oof.fs:                                Objects.             (line   6)
* oof.fs <1>:                            OOF.                 (line   6)
* oof.fs base class:                     The OOF base class.  (line   6)
* oof.fs properties:                     Properties of the OOF model.
                                                              (line   6)
* oof.fs usage:                          Basic OOF Usage.     (line   6)
* oof.fs, differences to other models:   Comparison with other object models.
                                                              (line  48)
* open-blocks:                           Blocks.              (line 120)
* open-file:                             General files.       (line  22)
* open-lib:                              Low-Level C Interface Words.
                                                              (line   6)
* open-path-file:                        General Search Paths.
                                                              (line  11)
* open-pipe:                             Pipes.               (line  10)
* operating system - passing commands:   Passing Commands to the OS.
                                                              (line   6)
* operator's terminal facilities available: core-other.       (line  10)
* options on the command line:           Invoking Gforth.     (line   6)
* or:                                    Bitwise operations.  (line   8)
* order:                                 Word Lists.          (line  82)
* orig, control-flow stack item:         Arbitrary control structures.
                                                              (line  11)
* OS command line arguments:             OS command line arguments.
                                                              (line   6)
* os-class:                              Environmental Queries.
                                                              (line  38)
* other system documentation, block words: block-other.       (line   6)
* other system documentation, core words: core-other.         (line   6)
* outer interpreter:                     Introducing the Text Interpreter.
                                                              (line   6)
* outer interpreter <1>:                 Stacks and Postfix notation.
                                                              (line   6)
* outer interpreter <2>:                 The Text Interpreter.
                                                              (line   6)
* outfile-execute:                       Redirection.         (line  21)
* output in pipes:                       Gforth in pipes.     (line  17)
* Output Redirection:                    Redirection.         (line   6)
* output to terminal:                    Terminal output.     (line   6)
* over:                                  Data stack.          (line  12)
* overcommit memory for dictionary and stacks: Invoking Gforth.
                                                              (line  82)
* overflow of the pictured numeric output string: core-ambcond.
                                                              (line  64)
* overrides:                             Objects Glossary.    (line 122)
* overrides usage:                       Basic Objects Usage. (line  29)
* pad:                                   Memory Blocks.       (line  74)
* PAD size:                              core-idef.           (line 153)
* PAD use by nonstandard words:          core-other.          (line   7)
* page:                                  Terminal output.     (line  27)
* parameter stack:                       Stack Manipulation.  (line   8)
* parameters are not of the same type (DO, ?DO, WITHIN): core-ambcond.
                                                              (line 157)
* parent class:                          Object-Oriented Terminology.
                                                              (line  43)
* parent class binding:                  Class Binding.       (line  27)
* parse:                                 The Input Stream.    (line  25)
* parse area:                            The Text Interpreter.
                                                              (line  49)
* parse-name:                            The Input Stream.    (line  30)
* parse-word:                            The Input Stream.    (line  33)
* parsed string overflow:                core-ambcond.        (line  67)
* parsed string, maximum size:           core-idef.           (line  88)
* parsing words:                         How does that work?. (line   6)
* parsing words <1>:                     How does that work?. (line  30)
* parsing words <2>:                     The Text Interpreter.
                                                              (line  71)
* patching threaded code:                Dynamic Superinstructions.
                                                              (line  86)
* path for included:                     Search Paths.        (line   6)
* path+:                                 General Search Paths.
                                                              (line  29)
* path-allot:                            General Search Paths.
                                                              (line  17)
* path=:                                 General Search Paths.
                                                              (line  32)
* pedigree of Gforth:                    Origin.              (line  32)
* perform:                               Execution token.     (line  56)
* performance of some Forth interpreters: Performance.        (line   6)
* persistent form of dictionary:         Image Files.         (line   6)
* PFE performance:                       Performance.         (line  22)
* pi:                                    Floating Point.      (line 121)
* pick:                                  Data stack.          (line  18)
* pictured numeric output:               Formatted numeric output.
                                                              (line   6)
* pictured numeric output buffer, size:  core-idef.           (line 149)
* pictured numeric output string, overflow: core-ambcond.     (line  64)
* pipes, creating your own:              Pipes.               (line   6)
* pipes, Gforth as part of:              Gforth in pipes.     (line   6)
* postpone:                              Macros.              (line  23)
* postpone <1>:                          The OOF base class.  (line  79)
* POSTPONE applied to [IF]:              programming-ambcond. (line  24)
* POSTPONE or [COMPILE] applied to TO:   core-ambcond.        (line 162)
* postpone tutorial:                     POSTPONE Tutorial.   (line   6)
* postpone,:                             Compilation token.   (line  30)
* Pountain's object-oriented model:      Comparison with other object models.
                                                              (line  28)
* precision:                             Floating Point.      (line  79)
* precompiled Forth code:                Image Files.         (line   6)
* previous:                              Word Lists.          (line  66)
* previous, search order empty:          search-ambcond.      (line  15)
* primitive source format:               Automatic Generation.
                                                              (line  15)
* primitive-centric threaded code:       Direct or Indirect Threaded?.
                                                              (line  16)
* primitives, assembly code listing:     Produced code.       (line   6)
* primitives, automatic generation:      Automatic Generation.
                                                              (line   6)
* primitives, implementation:            Primitives.          (line   6)
* primitives, keeping the TOS in a register: TOS Optimization.
                                                              (line   6)
* prims2x.fs:                            Automatic Generation.
                                                              (line   6)
* print:                                 Objects Glossary.    (line 129)
* printdebugdata:                        Debugging.           (line  32)
* private discussion:                    Classes and Scoping. (line  21)
* procedures, tutorial:                  Colon Definitions Tutorial.
                                                              (line   6)
* program data space available:          core-other.          (line  16)
* programming style, arbitrary control structures: Arbitrary control structures.
                                                              (line 112)
* programming style, locals:             Locals programming style.
                                                              (line   6)
* programming style, object-oriented:    Object-Oriented Programming Style.
                                                              (line   6)
* programming tools:                     Programming Tools.   (line   6)
* programming-tools words, ambiguous conditions: programming-ambcond.
                                                              (line   6)
* programming-tools words, implementation-defined options: programming-idef.
                                                              (line   6)
* programming-tools words, system documentation: The optional Programming-Tools word set.
                                                              (line   6)
* prompt:                                core-idef.           (line 163)
* pronounciation of words:               Notation.            (line  33)
* protected:                             Objects Glossary.    (line 133)
* protected discussion:                  Classes and Scoping. (line  21)
* ptr:                                   The OOF base class.  (line  45)
* ptr <1>:                               Class Declaration.   (line  13)
* public:                                Objects Glossary.    (line 136)
* query:                                 Input Sources.       (line  46)
* quit:                                  Miscellaneous Words. (line   9)
* r, stack item type:                    Notation.            (line  69)
* r/o:                                   General files.       (line   9)
* r/w:                                   General files.       (line  11)
* r>:                                    Return stack.        (line  15)
* r@:                                    Return stack.        (line  17)
* ranges for integer types:              core-idef.           (line 119)
* rdrop:                                 Return stack.        (line  19)
* read-file:                             General files.       (line  33)
* read-line:                             General files.       (line  35)
* read-only data space regions:          core-idef.           (line 126)
* reading from file positions not yet written: file-ambcond.  (line  11)
* receiving object:                      Object-Oriented Terminology.
                                                              (line  37)
* records:                               Structures.          (line   6)
* records tutorial:                      Arrays and Records Tutorial.
                                                              (line   6)
* recover (old Gforth versions):         Exception Handling.  (line 136)
* recurse:                               Calls and returns.   (line  16)
* RECURSE appears after DOES>:           core-ambcond.        (line 109)
* recursion tutorial:                    Recursion Tutorial.  (line   6)
* recursive:                             Calls and returns.   (line  12)
* recursive definitions:                 Calls and returns.   (line   6)
* Redirection:                           Redirection.         (line   6)
* refill:                                The Input Stream.    (line  48)
* registers of the inner interpreter:    Code and ;code.      (line  57)
* relocating loader:                     Image File Background.
                                                              (line  34)
* relocation at load-time:               Image File Background.
                                                              (line  25)
* relocation at run-time:                Image File Background.
                                                              (line  20)
* rename-file:                           General files.       (line  30)
* REPEAT:                                Arbitrary control structures.
                                                              (line  44)
* repeatability to be expected from the execution of MS: facility-idef.
                                                              (line  18)
* Replication:                           Dynamic Superinstructions.
                                                              (line   6)
* report the words used in your program: ANS Report.          (line   6)
* reposition-file:                       General files.       (line  62)
* REPOSITION-FILE, outside the file's boundaries: file-ambcond.
                                                              (line   7)
* represent:                             Formatted numeric output.
                                                              (line  71)
* REPRESENT, results when float is out of range: floating-idef.
                                                              (line  10)
* require:                               Forth source files.  (line  55)
* require, placement in files:           Emacs Tags.          (line   6)
* required:                              Forth source files.  (line  49)
* reserving data space:                  Dictionary allocation.
                                                              (line   6)
* resize:                                Heap Allocation.     (line  29)
* resize-file:                           General files.       (line  66)
* restore:                               Exception Handling.  (line 169)
* restore-input:                         Input Sources.       (line  31)
* RESTORE-INPUT, Argument type mismatch: core-ambcond.        (line 113)
* restrict:                              Interpretation and Compilation Semantics.
                                                              (line  39)
* result out of range:                   core-ambcond.        (line  70)
* return stack:                          Stack Manipulation.  (line  13)
* return stack and locals:               Return stack.        (line   6)
* return stack dump with gforth-fast:    Error messages.      (line  53)
* return stack manipulation words:       Return stack.        (line   6)
* return stack space available:          core-other.          (line  21)
* return stack tutorial:                 Return Stack Tutorial.
                                                              (line   6)
* return stack underflow:                core-ambcond.        (line  81)
* returning from a definition:           Calls and returns.   (line   6)
* roll:                                  Data stack.          (line  29)
* Root:                                  Word Lists.          (line 119)
* rot:                                   Data stack.          (line  21)
* rounding of floating-point numbers:    floating-idef.       (line  14)
* rp!:                                   Stack pointer manipulation.
                                                              (line  27)
* rp0:                                   Stack pointer manipulation.
                                                              (line  21)
* rp@:                                   Stack pointer manipulation.
                                                              (line  25)
* rshift:                                Bitwise operations.  (line  16)
* RSHIFT, large shift counts:            core-ambcond.        (line 170)
* run-time code generation, tutorial:    Advanced macros Tutorial.
                                                              (line   6)
* running Gforth:                        Invoking Gforth.     (line   6)
* running image files:                   Running Image Files. (line   6)
* Rydqvist, Goran:                       Emacs and Gforth.    (line   6)
* S":                                    Displaying characters and strings.
                                                              (line  54)
* S", number of string buffers:          file-idef.           (line  53)
* S", size of string buffer:             file-idef.           (line  56)
* s>d:                                   Double precision.    (line  21)
* s>number?:                             Line input and conversion.
                                                              (line  24)
* s>unumber?:                            Line input and conversion.
                                                              (line  27)
* save-buffer:                           Blocks.              (line 180)
* save-buffers:                          Blocks.              (line 176)
* save-input:                            Input Sources.       (line  26)
* savesystem:                            Non-Relocatable Image Files.
                                                              (line  16)
* savesystem during gforthmi:            gforthmi.            (line  44)
* scope:                                 Where are locals visible by name?.
                                                              (line  11)
* scope of locals:                       Where are locals visible by name?.
                                                              (line   6)
* scoping and classes:                   Classes and Scoping. (line   6)
* scr:                                   Blocks.              (line 143)
* seal:                                  Word Lists.          (line 129)
* search:                                Memory Blocks.       (line  55)
* search order stack:                    Word Lists.          (line  10)
* search order, maximum depth:           search-idef.         (line   7)
* search order, minimum:                 search-idef.         (line  10)
* search order, tutorial:                Wordlists and Search Order Tutorial.
                                                              (line   6)
* search path control, source files:     Source Search Paths. (line   6)
* search path control, source files <1>: General Search Paths.
                                                              (line   6)
* search path for files:                 Search Paths.        (line   6)
* search-order words, ambiguous conditions: search-ambcond.   (line   6)
* search-order words, implementation-defined options: search-idef.
                                                              (line   6)
* search-order words, system documentation: The optional Search-Order word set.
                                                              (line   6)
* search-wordlist:                       Word Lists.          (line 104)
* see:                                   Examining.           (line  52)
* see tutorial:                          Decompilation Tutorial.
                                                              (line   6)
* SEE, source and format of output:      programming-idef.    (line  18)
* see-code:                              Examining.           (line  66)
* see-code-range:                        Examining.           (line  70)
* selection control structures:          Selection.           (line   6)
* selector:                              Object-Oriented Terminology.
                                                              (line  20)
* selector <1>:                          Objects Glossary.    (line 140)
* selector implementation, class:        Objects Implementation.
                                                              (line  14)
* selector invocation:                   Object-Oriented Terminology.
                                                              (line  31)
* selector invocation, restrictions:     Basic Objects Usage. (line  58)
* selector invocation, restrictions <1>: Basic OOF Usage.     (line  56)
* selector usage:                        Basic Objects Usage. (line   8)
* selectors and stack effects:           Object-Oriented Programming Style.
                                                              (line   8)
* selectors common to hardly-related classes: Object Interfaces.
                                                              (line  11)
* self:                                  The OOF base class.  (line  61)
* semantics tutorial:                    Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                              (line   6)
* semantics, interpretation and compilation: Interpretation and Compilation Semantics.
                                                              (line   6)
* set-current:                           Word Lists.          (line  40)
* set-order:                             Word Lists.          (line  49)
* set-precision:                         Floating Point.      (line  83)
* sf!:                                   Memory Access.       (line  38)
* sf@:                                   Memory Access.       (line  34)
* sf@ or sf! used with an address that is not single-float aligned: floating-ambcond.
                                                              (line  22)
* sfalign:                               Dictionary allocation.
                                                              (line  70)
* sfaligned:                             Address arithmetic.  (line  94)
* sffield::                              Forth200x Structures.
                                                              (line  39)
* sfloat%:                               Structure Glossary.  (line  50)
* sfloat+:                               Address arithmetic.  (line  91)
* sfloats:                               Address arithmetic.  (line  87)
* sf_, stack item type:                  Notation.            (line  80)
* sh:                                    Passing Commands to the OS.
                                                              (line   9)
* Shared libraries in C interface:       Declaring OS-level libraries.
                                                              (line   6)
* shell commands:                        Passing Commands to the OS.
                                                              (line   6)
* shift-args:                            OS command line arguments.
                                                              (line  49)
* sign:                                  Formatted numeric output.
                                                              (line  57)
* silent exiting from Gforth:            Gforth in pipes.     (line  19)
* simple defining words:                 CREATE.              (line   6)
* simple loops:                          Simple Loops.        (line   6)
* simple-see:                            Examining.           (line  61)
* simple-see-range:                      Examining.           (line  64)
* single precision arithmetic words:     Single precision.    (line   6)
* single-assignment style for locals:    Locals programming style.
                                                              (line  25)
* single-cell numbers, input format:     Number Conversion.   (line   6)
* single-key input:                      Single-key input.    (line   6)
* singlestep Debugger:                   Singlestep Debugger. (line   6)
* size of buffer at WORD:                core-idef.           (line 129)
* size of the dictionary and the stacks: Invoking Gforth.     (line  51)
* size of the keyboard terminal buffer:  core-idef.           (line 142)
* size of the pictured numeric output buffer: core-idef.      (line 149)
* size of the scratch area returned by PAD: core-idef.        (line 153)
* size parameters for command-line options: Invoking Gforth.  (line  51)
* sl@:                                   Memory Access.       (line  59)
* SLiteral:                              Literals.            (line  61)
* slurp-fid:                             General files.       (line  71)
* slurp-file:                            General files.       (line  68)
* sm/rem:                                Mixed precision.     (line  28)
* source:                                The Text Interpreter.
                                                              (line 128)
* source location of error or debugging output in Emacs: Emacs and Gforth.
                                                              (line  21)
* source-id:                             Input Sources.       (line  18)
* SOURCE-ID, behaviour when BLK is non-zero: file-ambcond.    (line  31)
* sourcefilename:                        Forth source files.  (line  61)
* sourceline#:                           Forth source files.  (line  68)
* sp!:                                   Stack pointer manipulation.
                                                              (line  12)
* sp0:                                   Stack pointer manipulation.
                                                              (line   6)
* sp@:                                   Stack pointer manipulation.
                                                              (line  10)
* space:                                 Displaying characters and strings.
                                                              (line  12)
* space delimiters:                      core-idef.           (line  50)
* spaces:                                Displaying characters and strings.
                                                              (line  15)
* span:                                  Line input and conversion.
                                                              (line  64)
* speed, startup:                        Startup speed.       (line   6)
* stack depth changes during interpretation: Stack depth changes.
                                                              (line   6)
* stack effect:                          Notation.            (line  16)
* Stack effect design, tutorial:         Designing the stack effect Tutorial.
                                                              (line   6)
* stack effect of DOES>-parts:           User-defined Defining Words.
                                                              (line 149)
* stack effect of included files:        Forth source files.  (line  20)
* stack effects of selectors:            Object-Oriented Programming Style.
                                                              (line   8)
* stack empty:                           core-ambcond.        (line  81)
* stack item types:                      Notation.            (line  51)
* stack manipulation tutorial:           Stack Manipulation Tutorial.
                                                              (line   6)
* stack manipulation words:              Stack Manipulation.  (line   6)
* stack manipulation words, floating-point stack: Floating point stack.
                                                              (line   6)
* stack manipulation words, return stack: Return stack.       (line   6)
* stack manipulations words, data stack: Data stack.          (line   6)
* stack overflow:                        core-ambcond.        (line  34)
* stack pointer manipulation words:      Stack pointer manipulation.
                                                              (line   6)
* stack size default:                    Stack and Dictionary Sizes.
                                                              (line   6)
* stack size, cache-friendly:            Stack and Dictionary Sizes.
                                                              (line  19)
* stack space available:                 core-other.          (line  26)
* stack tutorial:                        Stack Tutorial.      (line   6)
* stack underflow:                       core-ambcond.        (line  81)
* stack-effect comments, tutorial:       Stack-Effect Comments Tutorial.
                                                              (line   6)
* starting Gforth tutorial:              Starting Gforth Tutorial.
                                                              (line   6)
* startup sequence for image file:       Modifying the Startup Sequence.
                                                              (line   6)
* Startup speed:                         Startup speed.       (line   6)
* state - effect on the text interpreter: How does that work?.
                                                              (line  34)
* STATE values:                          core-idef.           (line 173)
* state-smart words (are a bad idea):    Combined words.      (line  40)
* static:                                Class Declaration.   (line  34)
* stderr:                                General files.       (line  80)
* stderr and pipes:                      Gforth in pipes.     (line  44)
* stdin:                                 General files.       (line  74)
* stdout:                                General files.       (line  77)
* str<:                                  Memory Blocks.       (line  50)
* str=:                                  Memory Blocks.       (line  48)
* string larger than pictured numeric output area (f., fe., fs.): floating-ambcond.
                                                              (line  73)
* string longer than a counted string returned by WORD: core-ambcond.
                                                              (line 166)
* string-prefix?:                        Memory Blocks.       (line  52)
* strings - see character strings:       String Formats.      (line   6)
* strings tutorial:                      Characters and Strings Tutorial.
                                                              (line   6)
* struct:                                Structure Glossary.  (line  55)
* struct usage:                          Structure Usage.     (line   6)
* structs tutorial:                      Arrays and Records Tutorial.
                                                              (line   6)
* structure extension:                   Structure Usage.     (line  51)
* structure glossary:                    Structure Glossary.  (line   6)
* structure implementation:              Structure Implementation.
                                                              (line   6)
* structure naming convention:           Structure Naming Convention.
                                                              (line   6)
* structure naming convention <1>:       Structure Naming Convention.
                                                              (line  20)
* structure of Forth programs:           Forth is written in Forth.
                                                              (line   6)
* structure usage:                       Structure Usage.     (line   6)
* structures:                            Structures.          (line   6)
* structures containing arrays:          Structure Usage.     (line  63)
* structures containing structures:      Structure Usage.     (line  43)
* Structures in Forth200x:               Forth200x Structures.
                                                              (line   6)
* structures using address arithmetic:   Why explicit structure support?.
                                                              (line   6)
* sub-list?:                             Locals implementation.
                                                              (line  96)
* super:                                 The OOF base class.  (line  57)
* superclass binding:                    Class Binding.       (line  27)
* Superinstructions:                     Dynamic Superinstructions.
                                                              (line   6)
* sw@:                                   Memory Access.       (line  50)
* swap:                                  Data stack.          (line  16)
* syntax tutorial:                       Syntax Tutorial.     (line   6)
* system:                                Passing Commands to the OS.
                                                              (line  13)
* system dictionary space required, in address units: core-other.
                                                              (line  31)
* system documentation:                  ANS conformance.     (line  47)
* system documentation, block words:     The optional Block word set.
                                                              (line   6)
* system documentation, core words:      The Core Words.      (line   6)
* system documentation, double words:    The optional Double Number word set.
                                                              (line   6)
* system documentation, exception words: The optional Exception word set.
                                                              (line   6)
* system documentation, facility words:  The optional Facility word set.
                                                              (line   6)
* system documentation, file words:      The optional File-Access word set.
                                                              (line   6)
* system documentation, floating-point words: The optional Floating-Point word set.
                                                              (line   6)
* system documentation, locals words:    The optional Locals word set.
                                                              (line   6)
* system documentation, memory-allocation words: The optional Memory-Allocation word set.
                                                              (line   6)
* system documentation, programming-tools words: The optional Programming-Tools word set.
                                                              (line   6)
* system documentation, search-order words: The optional Search-Order word set.
                                                              (line   6)
* system prompt:                         core-idef.           (line 163)
* s\":                                   Displaying characters and strings.
                                                              (line  65)
* table:                                 Word Lists.          (line  60)
* TAGS file:                             Emacs Tags.          (line   6)
* target compiler:                       cross.fs.            (line   6)
* target compiler <1>:                   Cross Compiler.      (line   6)
* terminal buffer, size:                 core-idef.           (line 142)
* terminal input buffer:                 The Text Interpreter.
                                                              (line  20)
* terminal output:                       Terminal output.     (line   6)
* terminal size:                         Terminal output.     (line  15)
* terminology for object-oriented programming: Object-Oriented Terminology.
                                                              (line   6)
* text interpreter:                      Introducing the Text Interpreter.
                                                              (line   6)
* text interpreter <1>:                  Stacks and Postfix notation.
                                                              (line   6)
* text interpreter <2>:                  The Text Interpreter.
                                                              (line   6)
* text interpreter - effect of state:    How does that work?. (line  34)
* text interpreter - input sources:      The Text Interpreter.
                                                              (line 109)
* text interpreter - input sources <1>:  Input Sources.       (line   6)
* THEN:                                  Arbitrary control structures.
                                                              (line  20)
* this:                                  Objects Glossary.    (line 145)
* this and catch:                        Objects Implementation.
                                                              (line  43)
* this implementation:                   Objects Implementation.
                                                              (line  43)
* this usage:                            Method conveniences. (line  12)
* ThisForth performance:                 Performance.         (line  22)
* threaded code implementation:          Threading.           (line   6)
* threading words:                       Threading Words.     (line   6)
* threading, direct or indirect?:        Direct or Indirect Threaded?.
                                                              (line   6)
* threading-method:                      Threading Words.     (line  26)
* throw:                                 Exception Handling.  (line  10)
* THROW-codes used in the system:        exception-idef.      (line   7)
* thru:                                  Blocks.              (line 190)
* tib:                                   The Text Interpreter.
                                                              (line 131)
* tick ('):                              Execution token.     (line   9)
* TILE performance:                      Performance.         (line  22)
* time&date:                             Keeping track of Time.
                                                              (line   9)
* time-related words:                    Keeping track of Time.
                                                              (line   6)
* TMP, TEMP - environment variable:      Environment variables.
                                                              (line  37)
* TO:                                    Values.              (line  19)
* TO on non-VALUEs:                      core-ambcond.        (line 149)
* TO on non-VALUEs and non-locals:       locals-ambcond.      (line  14)
* to-this:                               Objects Glossary.    (line 154)
* tokens for words:                      Tokens for Words.    (line   6)
* TOS definition:                        Stacks and Postfix notation.
                                                              (line  41)
* TOS optimization for primitives:       TOS Optimization.    (line   6)
* toupper:                               Displaying characters and strings.
                                                              (line  21)
* trigonometric operations:              Floating Point.      (line  87)
* true:                                  Boolean Flags.       (line  11)
* truncation of floating-point numbers:  floating-idef.       (line  14)
* try:                                   Exception Handling.  (line  91)
* tuck:                                  Data stack.          (line  14)
* turnkey image files:                   Modifying the Startup Sequence.
                                                              (line  22)
* Tutorial:                              Tutorial.            (line   6)
* type:                                  Displaying characters and strings.
                                                              (line  41)
* types of locals:                       Gforth locals.       (line  32)
* types of stack items:                  Notation.            (line  51)
* types tutorial:                        Types Tutorial.      (line   6)
* typewhite:                             Displaying characters and strings.
                                                              (line  45)
* U+DO:                                  Arbitrary control structures.
                                                              (line  63)
* u, stack item type:                    Notation.            (line  63)
* U-DO:                                  Arbitrary control structures.
                                                              (line  67)
* u.:                                    Simple numeric output.
                                                              (line  22)
* u.r:                                   Simple numeric output.
                                                              (line  32)
* u<:                                    Numeric comparison.  (line  33)
* u<=:                                   Numeric comparison.  (line  35)
* u>:                                    Numeric comparison.  (line  37)
* u>=:                                   Numeric comparison.  (line  39)
* ud, stack item type:                   Notation.            (line  67)
* ud.:                                   Simple numeric output.
                                                              (line  40)
* ud.r:                                  Simple numeric output.
                                                              (line  49)
* ul@:                                   Memory Access.       (line  62)
* um*:                                   Mixed precision.     (line  16)
* um/mod:                                Mixed precision.     (line  22)
* undefined word:                        core-ambcond.        (line   7)
* undefined word, ', POSTPONE, ['], [COMPILE]: core-ambcond.  (line 154)
* under+:                                Single precision.    (line  18)
* unexpected end of the input buffer:    core-ambcond.        (line  99)
* unloop:                                Arbitrary control structures.
                                                              (line  85)
* unmapped block numbers:                file-ambcond.        (line  26)
* UNREACHABLE:                           Where are locals visible by name?.
                                                              (line  49)
* UNTIL:                                 Arbitrary control structures.
                                                              (line  24)
* UNTIL loop:                            Simple Loops.        (line  17)
* unused:                                Dictionary allocation.
                                                              (line  27)
* unwind-protect:                        Exception Handling.  (line 110)
* update:                                Blocks.              (line 169)
* UPDATE, no current block buffer:       block-ambcond.       (line  25)
* updated?:                              Blocks.              (line 172)
* upper and lower case:                  Case insensitivity.  (line   6)
* use:                                   Blocks.              (line 123)
* User:                                  Variables.           (line  42)
* user input device, method of selecting: core-idef.          (line  97)
* user output device, method of selecting: core-idef.         (line 102)
* user space:                            Variables.           (line  37)
* user variables:                        Variables.           (line  37)
* user-defined defining words:           User-defined Defining Words.
                                                              (line   6)
* utime:                                 Keeping track of Time.
                                                              (line  13)
* uw@:                                   Memory Access.       (line  53)
* Value:                                 Values.              (line  17)
* value-flavoured locals:                Gforth locals.       (line  40)
* values:                                Values.              (line   6)
* var:                                   Class Declaration.   (line   8)
* var <1>:                               Basic Mini-OOF Usage.
                                                              (line  17)
* Variable:                              Variables.           (line  31)
* variable-flavoured locals:             Gforth locals.       (line  40)
* variables:                             Variables.           (line   6)
* variadic C functions:                  Declaring C Functions.
                                                              (line  56)
* versions, invoking other versions of Gforth: Invoking Gforth.
                                                              (line 191)
* viewing the documentation of a word in Emacs: Emacs and Gforth.
                                                              (line  29)
* viewing the source of a word in Emacs: Emacs Tags.          (line   6)
* virtual function:                      Object-Oriented Terminology.
                                                              (line  20)
* virtual function table:                Objects Implementation.
                                                              (line  10)
* virtual machine:                       Engine.              (line   6)
* virtual machine instructions, implementation: Primitives.   (line   6)
* visibility of locals:                  Where are locals visible by name?.
                                                              (line   6)
* vlist:                                 Word Lists.          (line 116)
* Vocabularies, detailed explanation:    Vocabularies.        (line   6)
* Vocabulary:                            Word Lists.          (line 124)
* vocs:                                  Word Lists.          (line 133)
* vocstack empty, previous:              search-ambcond.      (line  15)
* vocstack full, also:                   search-ambcond.      (line  18)
* w!:                                    Memory Access.       (line  56)
* w, stack item type:                    Notation.            (line  59)
* w/o:                                   General files.       (line  13)
* where to go next:                      Where to go next.    (line   6)
* WHILE:                                 Arbitrary control structures.
                                                              (line  42)
* WHILE loop:                            Simple Loops.        (line   6)
* wid:                                   Word Lists.          (line  18)
* wid, stack item type:                  Notation.            (line  84)
* Win32Forth performance:                Performance.         (line  22)
* wior type description:                 Notation.            (line  86)
* wior values and meaning:               file-idef.           (line  36)
* with:                                  The OOF base class.  (line  86)
* within:                                Numeric comparison.  (line  41)
* word:                                  Introducing the Text Interpreter.
                                                              (line  47)
* word <1>:                              The Input Stream.    (line  39)
* WORD buffer size:                      core-idef.           (line 129)
* word glossary entry format:            Notation.            (line   6)
* word list for defining locals:         Locals implementation.
                                                              (line  46)
* word lists:                            Word Lists.          (line   6)
* word lists - example:                  Word list example.   (line   6)
* word lists - why use them?:            Why use word lists?. (line   6)
* word name too long:                    core-ambcond.        (line  10)
* WORD, string overflow:                 core-ambcond.        (line 166)
* wordlist:                              Word Lists.          (line  57)
* wordlists tutorial:                    Wordlists and Search Order Tutorial.
                                                              (line   6)
* words:                                 Words.               (line   6)
* words <1>:                             Word Lists.          (line 112)
* words used in your program:            ANS Report.          (line   6)
* words, forgetting:                     Forgetting words.    (line   6)
* wordset:                               Notation.            (line  36)
* write-file:                            General files.       (line  50)
* write-line:                            General files.       (line  52)
* x-size:                                Xchars and Unicode.  (line  34)
* x-width:                               Xchars and Unicode.  (line  74)
* xc!+?:                                 Xchars and Unicode.  (line  42)
* xc-size:                               Xchars and Unicode.  (line  31)
* xc@+:                                  Xchars and Unicode.  (line  38)
* xchar+:                                Xchars and Unicode.  (line  50)
* xchar-:                                Xchars and Unicode.  (line  54)
* xchar-encoding:                        Xchars and Unicode.  (line  89)
* xemit:                                 Xchars and Unicode.  (line  84)
* xkey:                                  Xchars and Unicode.  (line  80)
* xor:                                   Bitwise operations.  (line  10)
* xt:                                    Introducing the Text Interpreter.
                                                              (line  47)
* xt <1>:                                Execution token.     (line   6)
* XT tutorial:                           Execution Tokens Tutorial.
                                                              (line   6)
* xt, stack item type:                   Notation.            (line  82)
* xt-new:                                Objects Glossary.    (line 157)
* xt-see:                                Examining.           (line  58)
* x\string-:                             Xchars and Unicode.  (line  63)
* zero-length string as a name:          core-ambcond.        (line  99)
* Zsoter's object-oriented model:        Comparison with other object models.
                                                              (line  34)

