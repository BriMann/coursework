\ automatically generated by makedoc.fs

make-doc store-backtrace unknown  )

make-doc first-throw unknown  )

make-doc nothrow --  ) gforth
Use this (or the standard sequence @code{['] false catch drop})
after a @code{catch} or @code{endtry} that does not rethrow;
this ensures that the next @code{throw} will record a
backtrace.

make-doc (try) ahandler --  )

make-doc try compilation  -- orig ; run-time  -- R:sys1  ) gforth
Start an exception-catching region.

make-doc (endtry) --  )

make-doc handler-intro, --  )

make-doc iferror compilation  orig1 -- orig2 ; run-time  --  ) gforth
Starts the exception handling code (executed if there is an
exception between @code{try} and @code{endtry}).  This part has
to be finished with @code{then}.

make-doc restore compilation  orig1 -- ; run-time  --  ) gforth
Starts restoring code, that is executed if there is an
exception, and if there is no exception.

make-doc endtry compilation  -- ; run-time  R:sys1 --  ) gforth
End an exception-catching region.

make-doc endtry-iferror compilation  orig1 -- orig2 ; run-time  R:sys1 --  ) gforth
End an exception-catching region while starting
exception-handling code outside that region (executed if there
is an exception between @code{try} and @code{endtry-iferror}).
This part has to be finished with @code{then} (or
@code{else}...@code{then}).

make-doc naligned addr1 n -- addr2  ) gforth
@var{addr2} is the aligned version of @var{addr1} with respect to the
alignment @var{n}.

make-doc nalign unknown  ) old name, obsolete

make-doc dozerofield --  )

make-doc field, align1 offset1 align size --  align2 offset2  )

make-doc create-field align1 offset1 align size --  align2 offset2  )

make-doc field align1 offset1 align size "name" --  align2 offset2  ) gforth
Create a field @var{name} with offset @var{offset1}, and the type
given by @var{align size}. @var{offset2} is the offset of the
next field, and @var{align2} is the alignment of all fields.@*
@code{name} execution: @var{addr1} -- @var{addr2}.@*
@var{addr2}=@var{addr1}+@var{offset1}

make-doc end-struct align size "name" --  ) gforth
Define a structure/type descriptor @var{name} with alignment
@var{align} and size @var{size1} (@var{size} rounded up to be a
multiple of @var{align}).@*
@code{name} execution: -- @var{align size1}@*

make-doc struct -- align size  ) gforth
An empty structure, used to start a structure definition.

make-doc cell% -- align size  ) gforth

make-doc char% -- align size  ) gforth

make-doc float% -- align size  ) gforth

make-doc dfloat% -- align size  ) gforth

make-doc sfloat% -- align size  ) gforth

make-doc double% -- align size  ) gforth

make-doc %alignment align size -- align  ) gforth
The alignment of the structure.

make-doc %size align size -- size  ) gforth
The size of the structure.

make-doc %align align size --  ) gforth
Align the data space pointer to the alignment @var{align}. 

make-doc %allot align size -- addr  ) gforth
Allot @var{size} address units of data space with alignment
@var{align}; the resulting block of data is found at
@var{addr}.

make-doc %allocate align size -- addr ior  ) gforth
Allocate @var{size} address units with alignment @var{align},
similar to @code{allocate}.

make-doc %alloc align size -- addr  ) gforth
Allocate @var{size} address units with alignment @var{align},
giving a data block at @var{addr}; @code{throw} an ior code
if not successful.

make-doc maxvp unknown  ) current size of search order stack

make-doc maxvp-limit unknown  ) upper limit for resizing search order stack

make-doc vp unknown  ) will be initialized later (dynamic)

make-doc get-current -- wid  ) search
@i{wid} is the identifier of the current compilation word list.

make-doc set-current wid --  ) search
Set the compilation word list to the word list identified by @i{wid}.

make-doc vp! u --  )

make-doc definitions --  ) search
Set the compilation word list to be the same as the word list
that is currently at the top of the search order.

make-doc slowvoc unknown  )

make-doc mappedwordlist map-struct -- wid  ) gforth
Create a wordlist with a special map-structure.

make-doc wordlist -- wid  ) search
Create a new, empty word list represented by @i{wid}.

make-doc Vocabulary "name" --  ) gforth
Create a definition "name" and associate a new word list with it.
The run-time effect of "name" is to replace the @i{wid} at the
top of the search order with the @i{wid} associated with the new
word list.

make-doc check-maxvp n --  )

make-doc >order wid --  ) gforth to-order
Push @var{wid} on the search order.

make-doc also --  ) search-ext
Like @code{DUP} for the search order. Usually used before a
vocabulary (e.g., @code{also Forth}); the combined effect is to push
the wordlist represented by the vocabulary on the search order.

make-doc previous --  ) search-ext
Drop the wordlist at the top of the search order.

make-doc (vocfind) addr count wid -- nfa|false  )

make-doc locals-wordlist unknown  )

make-doc (localsvocfind) addr count wid -- nfa|false  )

make-doc vocsearch -- wordlist-map  )

make-doc Forth --  ) search-ext
Replace the @i{wid} at the top of the search order with the
@i{wid} associated with the word list @code{forth-wordlist}.

make-doc Root --  ) gforth
Add the root wordlist to the search order stack.  This vocabulary
makes up the minimum search order and contains only a
search-order words.

make-doc Only --  ) search-ext
Set the search order to the implementation-defined minimum search
order (for Gforth, this is the word list @code{Root}).

make-doc update-image-order --  )

make-doc init-vp --  )

make-doc get-order -- widn .. wid1 n  ) search
Copy the search order to the data stack. The current search order
has @i{n} entries, of which @i{wid1} represents the wordlist
that is searched first (the word list at the top of the search
order) and @i{widn} represents the wordlist that is searched
last.

make-doc set-order widn .. wid1 n --  ) search
If @var{n}=0, empty the search order.  If @var{n}=-1, set the
search order to the implementation-defined minimum search order
(for Gforth, this is the word list @code{Root}). Otherwise,
replace the existing search order with the @var{n} wid entries
such that @var{wid1} represents the word list that will be
searched first and @var{widn} represents the word list that will
be searched last.

make-doc seal --  ) gforth
Remove all word lists from the search order stack other than the word
list that is currently on the top of the search order stack.

make-doc id. nt --  ) gforth  i-d-dot
Print the name of the word represented by @var{nt}.

make-doc .id nt --  ) F83  dot-i-d
F83 name for @code{id.}.

make-doc .name nt --  ) gforth-obsolete  dot-name
Gforth <=0.5.0 name for @code{id.}.

make-doc .voc wid --  ) gforth  dot-voc
print the name of the wordlist represented by @var{wid}.  Can
only print names defined with @code{vocabulary} or
@code{wordlist constant}, otherwise prints @samp{???}.

make-doc order --  )  search-ext
Print the search order and the compilation word list.  The
word lists are printed in the order in which they are searched
(which is reversed with respect to the conventional way of
displaying stacks). The compilation word list is displayed last.

make-doc vocs --  ) gforth
List vocabularies and wordlists defined in the system.

make-doc words --  ) tools
Display a list of all of the definitions in the word list at the top
of the search order.

make-doc --alias-Forth unknown  )search-ext

make-doc forth-wordlist -- wid  ) search
@code{Constant} -- @i{wid} identifies the word list that includes all of the standard words
provided by Gforth. When Gforth is invoked, this word list is the compilation word
list and is at the top of the search order.

make-doc --alias-set-order wid1 ... widu u --  )search

make-doc --alias-order --  )search-ext

make-doc environment --  ) gforth

make-doc environment-wordlist -- wid  ) gforth
@i{wid} identifies the word list that is searched by environmental
queries.

make-doc environment? c-addr u -- false / ... true  ) core environment-query
@i{c-addr, u} specify a counted string. If the string is not
recognised, return a @code{false} flag. Otherwise return a
@code{true} flag and some (string-specific) information about
the queried string.

make-doc e? unknown  )

make-doc $has? unknown  )

make-doc has? unknown  )

make-doc ADDRESS-UNIT-BITS -- n  ) environment
Size of one address unit, in bits.

make-doc MAX-CHAR -- u  ) environment
Maximum value of any character in the character set

make-doc /COUNTED-STRING -- n  ) environment
Maximum size of a counted string, in characters.

make-doc /HOLD -- n  ) environment
Size of the pictured numeric string output buffer, in characters.

make-doc /PAD -- n  ) environment
Size of the scratch area pointed to by @code{PAD}, in characters.

make-doc CORE -- f  ) environment
True if the complete core word set is present. Always true for Gforth.

make-doc CORE-EXT -- f  ) environment
True if the complete core extension word set is present. Always true for Gforth.

make-doc FLOORED -- f  ) environment
True if @code{/} etc. perform floored division

make-doc MAX-N -- n  ) environment
Largest usable signed integer.

make-doc MAX-U -- u  ) environment
Largest usable unsigned integer.

make-doc MAX-D -- d  ) environment
Largest usable signed double.

make-doc MAX-UD -- ud  ) environment
Largest usable unsigned double.

make-doc gforth -- c-addr u  ) gforth-environment
Counted string representing a version string for this version of
Gforth (for versions>0.3.0).  The version strings of the various
versions are guaranteed to be ordered lexicographically.

make-doc return-stack-cells -- n  ) environment
Maximum size of the return stack, in cells.

make-doc stack-cells -- n  ) environment
Maximum size of the data stack, in cells.

make-doc floating-stack -- n  ) environment
@var{n} is non-zero, showing that Gforth maintains a separate
floating-point stack of depth @var{n}.

make-doc #locals unknown  ) 1000 64 /

make-doc wordlists unknown  )

make-doc os-class -- c-addr u  ) gforth-environment
Counted string representing a description of the host operating system.

make-doc os-type -- c-addr u  ) gforth-environment
Counted string equal to "$host_os"

make-doc libtool-command -- c-addr u  ) gforth
name of the GNU libtool command

make-doc libtool-cc -- c-addr u  ) gforth
invocation string of the C compiler used for libtool

make-doc libtool-flags -- c-addr u  ) gforth
force no undefined for cygwin

make-doc ffcall-present unknown  ) libffi present (on building)

make-doc libffi-present unknown  ) ffcall libs present (on building)

make-doc include-ffi.h-string -- c-addr u  )

make-doc linked addr --  )

make-doc errstring addr u n --  )

make-doc next-exception unknown  )

make-doc --exception-exception addr u -- n  )gforth
@var{n} is a previously unused @code{throw} value in the range
(-4095...-256). Consecutive calls to @code{exception} return
consecutive decreasing numbers. Gforth uses the string
@var{addr u} as an error message.

make-doc broken-pipe-error -- n  ) gforth
the error number for a broken pipe

make-doc .( compilation&interpretation "ccc<paren>" --  ) core-ext dot-paren
Compilation and interpretation semantics: Parse a string @i{ccc}
delimited by a @code{)} (right parenthesis). Display the
string. This is often used to display progress information during
compilation; see examples below.

make-doc d>s d -- n  ) double		d_to_s

make-doc m*/ d1 n2 u3 -- dquot  ) double m-star-slash
dquot=(d1*n2)/u3, with the intermediate result being triple-precision.
In ANS Forth u3 can only be a positive signed number.

make-doc case compilation  -- case-sys ; run-time  --  ) core-ext

make-doc of compilation  -- of-sys ; run-time x1 x2 -- |x1  ) core-ext

make-doc endof compilation case-sys1 of-sys -- case-sys2 ; run-time  --  ) core-ext end-of

make-doc endcase compilation case-sys -- ; run-time x --  ) core-ext end-case

make-doc C" compilation "ccc<quote>" -- ; run-time  -- c-addr  ) core-ext c-quote
Compilation: parse a string @i{ccc} delimited by a @code{"}
(double quote). At run-time, return @i{c-addr} which
specifies the counted string @i{ccc}.  Interpretation
semantics are undefined.

make-doc [compile] compilation "name" -- ; run-time ? -- ?  ) core-ext bracket-compile

make-doc convert ud1 c-addr1 -- ud2 c-addr2  ) core-ext-obsolescent
Obsolescent: superseded by @code{>number}.

make-doc erase addr u --  ) core-ext
Clear all bits in @i{u} aus starting at @i{addr}.

make-doc blank c-addr u --  ) string
Store the space character into @i{u} chars starting at @i{c-addr}.

make-doc search c-addr1 u1 c-addr2 u2 -- c-addr3 u3 flag  ) string
Search the string specified by @i{c-addr1, u1} for the string
specified by @i{c-addr2, u2}. If @i{flag} is true: match was found
at @i{c-addr3} with @i{u3} characters remaining. If @i{flag} is false:
no match was found; @i{c-addr3, u3} are equal to @i{c-addr1, u1}.

make-doc span -- c-addr  ) core-ext-obsolescent
@code{Variable} -- @i{c-addr} is the address of a cell that stores the
length of the last string received by @code{expect}. OBSOLESCENT.

make-doc expect c-addr +n --  ) core-ext-obsolescent
Receive a string of at most @i{+n} characters, and store it
in memory starting at @i{c-addr}. The string is
displayed. Input terminates when the <return> key is pressed or
@i{+n} characters have been received. The normal Gforth line
editing capabilites are available. The length of the string is
stored in @code{span}; it does not include the <return>
character. OBSOLESCENT: superceeded by @code{accept}.

make-doc included-files-mark -- u  )

make-doc marker, -- mark  )

make-doc marker! mark --  )

make-doc marker "<spaces> name" --  ) core-ext
Create a definition, @i{name} (called a @i{mark}) whose
execution semantics are to remove itself and everything 
defined after it.

make-doc reserve-mem unknown  )

make-doc hashbits unknown  )

make-doc Hashlen unknown  )

make-doc hash addr len -- key  )

make-doc insRule unknown  )

make-doc revealed unknown  )

make-doc HashPointer unknown  )

make-doc HashIndex unknown  ) Number of wordlists

make-doc HashPop unknown  ) Number of words

make-doc HashTable unknown  )

make-doc hashsearch-map unknown  )

make-doc hash-alloc addr -- addr  )

make-doc DelFix addr root --  )

make-doc NewFix root len # -- addr  )

make-doc bucket addr len wordlist -- bucket-addr  )

make-doc hash-find addr len wordlist -- nfa / false  )

make-doc lastlink! addr link --  )

make-doc (reveal nfa wid --  )

make-doc hash-reveal nfa wid --  )

make-doc inithash wid --  )

make-doc addall --  )

make-doc clearhash --  )

make-doc rehashall wid --  )

make-doc (rehash) wid --  )

make-doc hashdouble --  )

make-doc (hashsearch-map) unknown  )

make-doc make-hash unknown  )

make-doc hash-cold --  )

make-doc .words --  )

make-doc sfalign --  ) float-ext s-f-align
If the data-space pointer is not single-float-aligned, reserve
enough space to align it.

make-doc dfalign --  ) float-ext d-f-align
If the data-space pointer is not double-float-aligned, reserve
enough space to align it.

make-doc sfloat+ sf-addr1 -- sf-addr2  ) float-ext s-float-plus
@code{1 sfloats +}.

make-doc dfloat+ df-addr1 -- df-addr2  ) float-ext d-float-plus
@code{1 dfloats +}.

make-doc f, f --  ) gforth
Reserve data space for one floating-point number and store
@i{f} in the space.

make-doc fconstant r "name" --  ) float f-constant

make-doc fdepth -- +n  ) float f-depth
@i{+n} is the current number of (floating-point) values on the
floating-point stack.

make-doc FLiteral compilation r -- ; run-time -- r  ) float f-literal
Compile appropriate code such that, at run-time, @i{r} is placed
on the (floating-point) stack. Interpretation semantics are undefined.

make-doc precision -- u  ) float-ext
@i{u} is the number of significant digits currently used by
@code{F.} @code{FE.} and @code{FS.} 

make-doc set-precision u --  ) float-ext
Set the number of significant digits currently used by
@code{F.} @code{FE.} and @code{FS.} to @i{u}.

make-doc scratch r -- addr len  )

make-doc zeros n --  )

make-doc -zeros addr u -- addr' u'  )

make-doc f$ f -- n  )

make-doc f. r --  ) float-ext f-dot
Display (the floating-point number) @i{r} without exponent,
followed by a space.

make-doc fe. r --  ) float-ext f-e-dot
Display @i{r} using engineering notation (with exponent dividable
by 3), followed by a space.

make-doc fs. r --  ) float-ext f-s-dot
Display @i{r} using scientific notation (with exponent), followed
by a space.

make-doc sfnumber c-addr u -- r true | false  )

make-doc fvariable "name" --  ) float f-variable

make-doc pi -- r  ) gforth
@code{Fconstant} -- @i{r} is the value pi; the ratio of a circle's area
to its diameter.

make-doc f2* r1 -- r2  ) gforth
Multiply @i{r1} by 2.0e0

make-doc f2/ r1 -- r2  ) gforth
Multiply @i{r1} by 0.5e0

make-doc 1/f r1 -- r2  ) gforth
Divide 1.0e0 by @i{r1}.

make-doc max-float unknown  )

make-doc f~abs r1 r2 r3 -- flag  ) gforth
Approximate equality with absolute error: |r1-r2|<r3.

make-doc f~rel r1 r2 r3 -- flag  ) gforth
Approximate equality with relative error: |r1-r2|<r3*|r1+r2|.

make-doc f~ r1 r2 r3 -- flag  ) float-ext f-proximate
ANS Forth medley for comparing r1 and r2 for equality: r3>0:
@code{f~abs}; r3=0: bitwise comparison; r3<0: @code{fnegate f~rel}.

make-doc FTRUNC r1 -- r2  )

make-doc FMOD r1 r2 -- r  )

make-doc compile-@local n --  ) gforth compile-fetch-local

make-doc compile-f@local n --  ) gforth compile-f-fetch-local

make-doc compile-lp+! n --  ) gforth	compile-l-p-plus-store

make-doc adjust-locals-size n --  ) gforth

make-doc locals unknown  ) this contains the local variables

make-doc locals-buffer unknown  ) !! limited and unsafe

make-doc locals-dp unknown  ) so here's the special dp for locals.

make-doc alignlp-w n1 -- n2  )

make-doc alignlp-f n1 -- n2  )

make-doc compile-pushlocal-w a-addr --  )

make-doc common-list list1 list2 -- list3  ) gforth-internal

make-doc sub-list? list1 list2 -- f  ) gforth-internal

make-doc list-size list -- u  ) gforth-internal

make-doc set-locals-size-list list --  )

make-doc check-begin list --  )

make-doc compile-pushlocal-f a-addr --  )

make-doc compile-pushlocal-d a-addr --  )

make-doc compile-pushlocal-c a-addr --  )

make-doc create-local " name" -- a-addr  )

make-doc lp-offset n1 -- n2  )

make-doc lp-offset, n --  )

make-doc locals-types unknown  ) this contains all the type specifyers, -- and }

make-doc W: "name" -- a-addr xt  ) gforth w-colon

make-doc W^ "name" -- a-addr xt  ) gforth w-caret

make-doc F: "name" -- a-addr xt  ) gforth f-colon

make-doc F^ "name" -- a-addr xt  ) gforth f-caret

make-doc D: "name" -- a-addr xt  ) gforth d-colon

make-doc D^ "name" -- a-addr xt  ) gforth d-caret

make-doc C: "name" -- a-addr xt  ) gforth c-colon

make-doc C^ "name" -- a-addr xt  ) gforth c-caret

make-doc \ compilation 'ccc<newline>' -- ; run-time --  ) core-ext,block-ext backslash
Comment till the end of the line if @code{BLK} contains 0 (i.e.,
while not loading a block), parse and discard the remainder of the
parse area. Otherwise, parse and discard all subsequent characters
in the parse area corresponding to the current line.

make-doc ( compilation 'ccc<close-paren>' -- ; run-time --  ) core,file	paren
Comment, usually till the next @code{)}: parse and discard all
subsequent characters in the parse area until ")" is
encountered. During interactive input, an end-of-line also acts as
a comment terminator. For file input, it does not; if the
end-of-file is encountered whilst parsing for the ")" delimiter,
Gforth will generate a warning.

make-doc some-clocal unknown  )

make-doc some-dlocal unknown  )

make-doc some-flocal unknown  )

make-doc some-wlocal unknown  )

make-doc new-locals-find caddr u w -- nfa  )

make-doc new-locals-reveal --  )

make-doc new-locals-map -- wordlist-map  )

make-doc new-locals-wl unknown  )

make-doc old-dpp unknown  )

make-doc { -- latestxt wid 0  ) gforth open-brace

make-doc } latestxt wid 0 a-addr1 xt1 ... --  ) gforth close-brace

make-doc -- addr wid 0 ... --  ) gforth dash-dash

make-doc scope compilation  -- scope ; run-time  --  ) gforth

make-doc adjust-locals-list wid --  )

make-doc endscope compilation scope -- ; run-time  --  ) gforth

make-doc locals-:-hook sys -- sys addr xt n  )

make-doc locals-;-hook sys addr xt sys -- sys  )

make-doc (then-like) orig --  )

make-doc (begin-like) --  )

make-doc (again-like) dest -- addr  )

make-doc (until-like) list addr xt1 xt2 --  )

make-doc (exit-like) --  )

make-doc (local) addr u --  ) local paren-local-paren

make-doc >definer xt -- definer  ) gforth
@var{Definer} is a unique identifier for the way the @var{xt}
was defined.  Words defined with different @code{does>}-codes
have different definers.  The definer can be used for
comparison and in @code{definer!}.

make-doc definer! definer xt --  ) gforth
The word represented by @var{xt} changes its behaviour to the
behaviour associated with @var{definer}.

make-doc TO c|w|d|r "name" --  ) core-ext,local

make-doc locals| ... "name ..." --  ) local-ext locals-bar

make-doc needs ... "name" -- ...  ) gforth
An alias for @code{require}; exists on other systems (e.g., Win32Forth).

make-doc CSP unknown  )

make-doc !CSP --  )

make-doc ?CSP --  )

make-doc dmin d1 d2 -- d  ) double d-min

make-doc dmax d1 d2 -- d  ) double d-max

make-doc $? -- n  ) gforth dollar-question
@code{Value} -- the exit status returned by the most recently executed
@code{system} command.

make-doc system c-addr u --  ) gforth
Pass the string specified by @var{c-addr u} to the host operating
system for execution in a sub-shell.  The value of the environment
variable @code{GFORTHSYSTEMPREFIX} (or its default value) is
prepended to the string (mainly to support using @code{command.com}
as shell in Windows instead of whatever shell Cygwin uses by
default; @pxref{Environment variables}).

make-doc sh "..." --  ) gforth
Parse a string and use @code{system} to pass it to the host
operating system for execution in a sub-shell.

make-doc ]L compilation: n -- ; run-time: -- n  ) gforth
equivalent to @code{] literal}

make-doc in-return-stack? addr -- f  )

make-doc compile-literals w*u u -- ; run-time: -- w*u  )

make-doc compile-fliterals r*u u -- ; run-time: -- w*u  )

make-doc (const-does>) w*uw r*ur uw ur target "name" --  )

make-doc const-does> run-time: w*uw r*ur uw ur "name" --  ) gforth
Defines @var{name} and returns.
 
@var{name} execution: pushes @var{w*uw r*ur}, then performs the
code following the @code{const-does>}.

make-doc slurp-file c-addr1 u1 -- c-addr2 u2  ) gforth
@var{c-addr1 u1} is the filename, @var{c-addr2 u2} is the file's contents

make-doc slurp-fid fid -- addr u  ) gforth
@var{addr u} is the content of the file @var{fid}

make-doc compile-literal n --  )

make-doc compile-compile-literal n --  )

make-doc compile-2literal n1 n2 --  )

make-doc compile-compile-2literal n1 n2 --  )

make-doc [[ --  )
switch from postpone state to compile state

make-doc postponer1 c-addr u -- ... xt  )

make-doc ]] --  )

make-doc push-right c-addr u1 u2 cfill --  )

make-doc f>buf-rdp-try f: rf c-addr ur nd up um1 -- um2  )

make-doc f>buf-rdp rf c-addr +nr +nd +np --  ) gforth
Convert @i{rf} into a string at @i{c-addr nr}.  The conversion
rules and the meanings of @i{nr nd np} are the same as for
@code{f.rdp}.

make-doc f>str-rdp rf +nr +nd +np -- c-addr nr  ) gforth
Convert @i{rf} into a string at @i{c-addr nr}.  The conversion
rules and the meanings of @i{nr +nd np} are the same as for
@code{f.rdp}.  The result in in the pictured numeric output buffer
and will be destroyed by anything destroying that buffer.

make-doc f.rdp rf +nr +nd +np --  ) gforth
Print float @i{rf} formatted.  The total width of the output is
@i{nr}.  For fixed-point notation, the number of digits after the
decimal point is @i{+nd} and the minimum number of significant
digits is @i{np}.  @code{Set-precision} has no effect on
@code{f.rdp}.  Fixed-point notation is used if the number of
siginicant digits would be at least @i{np} and if the number of
digits before the decimal point would fit.  If fixed-point notation
is not used, exponential notation is used, and if that does not
fit, asterisks are printed.  We recommend using @i{nr}>=7 to avoid
the risk of numbers not fitting at all.  We recommend
@i{nr}>=@i{np}+5 to avoid cases where @code{f.rdp} switches to
exponential notation because fixed-point notation would have too
few significant digits, yet exponential notation offers fewer
significant digits.  We recommend @i{nr}>=@i{nd}+2, if you want to
have fixed-point notation for some numbers.  We recommend
@i{np}>@i{nr}, if you want to have exponential notation for all
numbers.

make-doc f.s --  ) gforth f-dot-s
Display the number of items on the floating-point stack, followed
by a list of the items (but not more than specified by
@code{maxdepth-.s}; TOS is the right-most item.

make-doc action-of interpretation "name" -- xt; compilation "name" -- ; run-time -- xt  ) gforth
@i{Xt} is the XT that is currently assigned to @i{name}.

make-doc what's interpretation "name" -- xt; compilation "name" -- ; run-time -- xt  ) gforth-obsolete
Old name of @code{action-of}

make-doc typewhite addr n --  ) gforth
Like type, but white space is printed instead of the characters.

make-doc /w -- u  ) gforth slash-w
address units for a 16-bit value

make-doc /l -- u  ) gforth slash-l
address units for a 32-bit value

make-doc w@ addr -- u  )

make-doc l@ addr -- u  )

make-doc outfile-execute ... xt file-id -- ...  ) gforth
execute @i{xt} with the output of @code{type} etc. redirected to
@i{file-id}.

make-doc infile-execute ... xt file-id -- ...  ) gforth
execute @i{xt} with the input of @code{key} etc. redirected to
@i{file-id}.

make-doc base-execute i*x xt u -- j*x  ) gforth
execute @i{xt} with the content of @code{BASE} being @i{u}, and
restoring the original @code{BASE} afterwards.

make-doc xt>threaded xt -- x  )
produces the threaded-code cell for the primitive xt

make-doc search-name xt startlfa -- nt|0  )

make-doc threaded>xt ca -- xt|0  )
For the code address ca of a primitive, find the xt (or 0).

make-doc PrimStart unknown  )

make-doc prim>name xt -- nt|0  )

make-doc look xt -- lfa flag  )

make-doc threaded>name ca -- nt|0  )

make-doc >name xt -- nt|0  ) gforth to-name
tries to find the name token @var{nt} of the word represented
by @var{xt}; returns 0 if it fails.  This word is not
absolutely reliable, it may give false positives and produce
wrong nts.

make-doc >head unknown  ) gforth to-head
another name of @code{>name}

make-doc alias? nfa1 -- nfa2|0  )

make-doc var? nfa -- flag  )

make-doc con? nfa -- flag  )

make-doc user? nfa -- flag  )

make-doc does? nfa -- flag  )

make-doc defered? nfa -- flag  )

make-doc colon? nfa -- flag  )

make-doc xtprim? xt -- flag  )

make-doc prim? nfa -- flag  )

make-doc Pri# unknown  ) Primitives

make-doc Con# unknown  ) Constants

make-doc Var# unknown  ) Variables

make-doc Val# unknown  ) Values

make-doc Doe# unknown  ) Does part

make-doc Def# unknown  ) Defer

make-doc Col# unknown  ) Colon def

make-doc Use# unknown  ) User variable

make-doc Ali# unknown  ) Alias

make-doc Str# unknown  ) Structure words

make-doc Com# unknown  ) Compiler directives : ; POSTPONE

make-doc InfoTable unknown  )

make-doc WordInfo nfa --- code  )

make-doc pn unknown  )

make-doc ;pn unknown  )

make-doc ESC[ unknown  )

make-doc at-xy u1 u2 --  ) facility at-x-y
Position the cursor so that subsequent text output will take
place at column @var{u1}, row @var{u2} of the display. (column 0,
row 0 is the top left-hand corner of the display).

make-doc page --  ) facility
Clear the display and set the cursor to the top left-hand
corner.

make-doc O-Buffer unknown  )

make-doc O-PNT unknown  )

make-doc O-TYPE unknown  )

make-doc O-EMIT unknown  )

make-doc EmitXT unknown  )

make-doc TypeXT unknown  )

make-doc O-INIT unknown  )

make-doc O-DEINIT unknown  )

make-doc O-PNT@ unknown  )

make-doc UTF-8-err unknown  )

make-doc max-single-byte unknown  )

make-doc u8len u8 -- n  )

make-doc u8@+ u8addr -- u8addr' u  )

make-doc u8!+ u u8addr -- u8addr'  )

make-doc u8>> u8addr -- u8addr'  )

make-doc u8<< u8addr -- u8addr'  )

make-doc check-xy unknown  )

make-doc u8key -- u  )

make-doc u8emit u --  )

make-doc +u8/string xc-addr1 u1 -- xc-addr2 u2  )

make-doc u8\string- xcaddr u -- xcaddr u'  )

make-doc u8@ c-addr -- u  )

make-doc u8!+? xc xc-addr1 u1 -- xc-addr2 u2 f  )

make-doc u8addrlen u8-addr u -- u  )

make-doc -u8trailing-garbage addr u1 -- addr u2  )

make-doc u8width xcaddr u -- n  )

make-doc set-encoding-utf-8 --  )

make-doc utf-8-cold --  )

make-doc xchar-encoding -- addr u  ) xchar-ext
Returns a printable ASCII string that reperesents the encoding,
and use the preferred MIME name (if any) or the name in
@url{http://www.iana.org/assignments/character-sets} like
``ISO-LATIN-1'' or ``UTF-8'', with the exception of ``ASCII'', where
we prefer the alias ``ASCII''.

make-doc ctrl-i "<char>" -- c  )

make-doc ctrl "<char>" -- ctrl-code  )

make-doc >string span addr pos1 -- span addr pos1 addr2 len  )

make-doc bindkey xt key --  )

make-doc history unknown  ) history file fid

make-doc forward^ unknown  )

make-doc backward^ unknown  )

make-doc end^ unknown  )

make-doc force-open addr len -- fid  )

make-doc history-file -- addr u  )

make-doc back-restore u --  )

make-doc cur-correct addr u --  )

make-doc linew unknown  )

make-doc screenw unknown  )

make-doc linew-off unknown  )

make-doc clear-line max span addr pos1 -- max addr  )

make-doc hist-pos -- ud  )

make-doc hist-setpos ud --  )

make-doc get-line addr len -- len' flag  )

make-doc next-line max span addr pos1 -- max span addr pos2 false  )

make-doc find-prev-line max addr -- max span addr pos2  )

make-doc prev-line max span addr pos1 -- max span addr pos2 false  )

make-doc (enter) max span addr pos1 -- max span addr pos2 true  )

make-doc extract-word addr len -- addr' len'  )

make-doc prefix-found unknown  )

make-doc sgn n -- -1/0/1  )

make-doc capscomp c_addr1 u c_addr2 -- n  )

make-doc word-lex nfa1 nfa2 -- -1/0/1  )

make-doc search-voc addr len nfa1 nfa2 -- addr len nfa3  )

make-doc prefix-off --  )

make-doc prefix-string addr len nfa -- addr' len'  )

make-doc search-prefix addr1 len1 -- addr2 len2  )

make-doc tib-full? max span addr pos addr' len' -- max span addr pos addr1 u flag  )

make-doc kill-prefix key -- key  )

make-doc #esc unknown  )

make-doc at-deltaxy dx dy --  )

make-doc xcur-correct addr u --  )

make-doc xback-restore u --  )

make-doc .rest addr pos1 -- addr pos1  )

make-doc .all span addr pos1 -- span addr pos1  )

make-doc xretype max span addr pos1 -- max span addr pos1 f  )

make-doc <xins> max span addr pos1 xc -- max span addr pos2  )

make-doc (xins) max span addr pos1 xc -- max span addr pos2  )

make-doc xback max span addr pos1 -- max span addr pos2 f  )

make-doc xforw max span addr pos1 -- max span addr pos2 f  )

make-doc (xdel) max span addr pos1 -- max span addr pos2  )

make-doc ?xdel max span addr pos1 -- max span addr pos2 0  )

make-doc <xdel> max span addr pos1 -- max span addr pos2 0  )

make-doc xeof unknown  )

make-doc xfirst-pos max span addr pos1 -- max span addr 0 0  )

make-doc xend-pos max span addr pos1 -- max span addr span 0  )

make-doc xclear-line max span addr pos1 -- max addr  )

make-doc xclear-tib max span addr pos -- max 0 addr 0 false  )

make-doc (xenter) max span addr pos1 -- max span addr pos2 true  )

make-doc xkill-expand max span addr pos1 -- max span addr pos2  )

make-doc insert string length buffer size --  )

make-doc xtab-expand max span addr pos1 -- max span addr pos2 0  )

make-doc xchar-history --  )

make-doc get-history addr len --  )

make-doc history-cold --  )

make-doc translate unknown  )

make-doc transcode unknown  )

make-doc trans: char 'index' --  )

make-doc tcode char index --  )

make-doc vt100-decode max span addr pos1 -- max span addr pos2 flag  )

make-doc loadfilename#>str n -- addr u  )

make-doc str>loadfilename# addr u -- n  )

make-doc current-sourcepos -- nfile nline  )

make-doc compile-sourcepos compile-time: -- ; run-time: -- nfile nline  )

make-doc .sourcepos nfile nline --  )

make-doc printdebugdata --  ) gforth print-debug-data

make-doc .debugline nfile nline --  ) gforth print-debug-line
Print the source code location indicated by @var{nfile nline}, and
additional debugging information; the default @code{.debugline}
prints the additional information with @code{printdebugdata}.

make-doc (.debugline) nfile nline --  )

make-doc .debugline-stderr nfile nline --  )

make-doc ~~ --  ) gforth tilde-tilde
Prints the source code location of the @code{~~} and the stack
contents with @code{.debugline}.

make-doc assert-level -- a-addr  ) gforth
All assertions above this level are turned off.

make-doc assertn n --  ) gforth assert-n

make-doc assert0( --  ) gforth assert-zero
Important assertions that should always be turned on.

make-doc assert1( --  ) gforth assert-one
Normal assertions; turned on by default.

make-doc assert2( --  ) gforth assert-two
Debugging assertions.

make-doc assert3( --  ) gforth assert-three
Slow assertions that you may not want to turn on in normal debugging;
you would turn them on mainly for thorough checking.

make-doc assert( --  ) gforth
Equivalent to @code{assert1(}

make-doc (end-assert) flag nfile nline --  ) gforth-internal

make-doc ) --  ) gforth	close-paren
End an assertion.

make-doc buffer-block unknown  ) the block number

make-doc buffer-fid unknown  ) the block's fid

make-doc buffer-dirty unknown  ) the block dirty flag

make-doc block-buffer unknown  ) the data

make-doc next-buffer unknown  )

make-doc buffer-struct unknown  )

make-doc block-buffers unknown  )

make-doc last-block unknown  )

make-doc buffers unknown  )

make-doc block-limit unknown  )

make-doc block-fid unknown  )

make-doc block-offset -- addr  ) gforth
User variable containing the number of the first block (default
since 0.5.0: 0).  Block files created with Gforth versions before
0.5.0 have the offset 1.  If you use these files you can: @code{1
offset !}; or add 1 to every block number used; or prepend 1024
characters to the file.

make-doc offset unknown  ) !! eliminate this?

make-doc block-cold --  )

make-doc flush-blocks --  ) gforth

make-doc open-blocks c-addr u --  ) gforth
Use the file, whose name is given by @i{c-addr u}, as the blocks file.

make-doc use "file" --  ) gforth
Use @i{file} as the blocks file.

make-doc get-block-fid -- wfileid  ) gforth
Return the file-id of the current blocks file. If no blocks
file has been opened, use @file{blocks.fb} as the default
blocks file.

make-doc block-position u --  ) block
Position the block file to the start of block @i{u}.

make-doc update --  ) block
Mark the state of the current block buffer as assigned-dirty.

make-doc save-buffer buffer --  ) gforth

make-doc empty-buffer buffer --  ) gforth

make-doc save-buffers --  ) block
Transfer the contents of each @code{update}d block buffer to
mass storage, then mark all block buffers as assigned-clean.

make-doc empty-buffers --  ) block-ext
Mark all block buffers as unassigned; if any had been marked as
assigned-dirty (by @code{update}), the changes to those blocks
will be lost.

make-doc flush --  ) block
Perform the functions of @code{save-buffers} then
@code{empty-buffers}.

make-doc get-buffer u -- a-addr  ) gforth

make-doc block u -- a-addr  ) block
If a block buffer is assigned for block @i{u}, return its
start address, @i{a-addr}. Otherwise, assign a block buffer
for block @i{u} (if the assigned block buffer has been
@code{update}d, transfer the contents to mass storage), read
the block into the block buffer and return its start address,
@i{a-addr}.

make-doc buffer u -- a-addr  ) block
If a block buffer is assigned for block @i{u}, return its
start address, @i{a-addr}. Otherwise, assign a block buffer
for block @i{u} (if the assigned block buffer has been
@code{update}d, transfer the contents to mass storage) and
return its start address, @i{a-addr}.  The subtle difference
between @code{buffer} and @code{block} mean that you should
only use @code{buffer} if you don't care about the previous
contents of block @i{u}. In Gforth, this simply calls
@code{block}.

make-doc scr -- a-addr  ) block-ext s-c-r
@code{User} variable -- @i{a-addr} is the address of a cell containing
the block number of the block most recently processed by
@code{list}.

make-doc updated? n -- f  ) gforth
Return true if @code{updated} has been used to mark block @i{n}
as assigned-dirty.

make-doc list u --  ) block-ext
Display block @i{u}. In Gforth, the block is displayed as 16
numbered lines, each of 64 characters.

make-doc block-input unknown  )

make-doc load i*x n -- j*x  ) block
Save the current input source specification. Store @i{n} in
@code{BLK}, set @code{>IN} to 0 and interpret. When the parse
area is exhausted, restore the input source specification.

make-doc thru i*x n1 n2 -- j*x  ) block-ext
@code{load} the blocks @i{n1} through @i{n2} in sequence.

make-doc +load i*x n -- j*x  ) gforth
Used within a block to load the block specified as the
current block + @i{n}.

make-doc +thru i*x n1 n2 -- j*x  ) gforth
Used within a block to load the range of blocks specified as the
current block + @i{n1} thru the current block + @i{n2}.

make-doc --gforthman---> --  )gforth chain
If this symbol is encountered whilst loading block @i{n},
discard the remainder of the block and load block @i{n+1}. Used
for chaining multiple blocks together as a single loadable
unit.  Not recommended, because it destroys the independence of
loading.  Use @code{thru} (which is standard) or @code{+thru}
instead.

make-doc block-included a-addr u --  ) gforth
Use within a block that is to be processed by @code{load}. Save
the current blocks file specification, open the blocks file
specified by @i{a-addr u} and @code{load} block 1 from that
file (which may in turn chain or load other blocks). Finally,
close the blocks file and restore the original blocks file.

make-doc --environment-block unknown  )environment

make-doc block-ext unknown  )

make-doc bye --  ) tools-ext
Return control to the host operating system (if any).

make-doc no-compilation-does-code unknown  )

make-doc no-interpretation-does-code unknown  )

make-doc create-interpret/compile "name" --  ) gforth

make-doc fix-does-code addr ret-addr --  )

make-doc (interpretation>1) addr R:retaddr --  )

make-doc interpretation> compilation. -- orig colon-sys  ) gforth

make-doc <interpretation compilation. orig colon-sys --  ) gforth

make-doc (compilation>1) addr R:retaddr --  )

make-doc compilation> compilation. -- orig colon-sys  ) gforth

make-doc <compilation compilation. orig colon-sys --  ) gforth

make-doc save-mem-dict addr1 u -- addr2 u  )

make-doc delete-prefix c-addr1 u1 c-addr2 u2 -- c-addr3 u3  )

make-doc update-image-included-files --  )

make-doc dump-fi addr u --  )

make-doc savesystem "name" --  ) gforth

make-doc table-find addr len wordlist -- nfa / false  )

make-doc tablesearch-map -- wordlist-map  )

make-doc table -- wid  ) gforth
Create a case-sensitive wordlist.

make-doc keycode u1 "name" -- u2 ; name execution: -- u  )

make-doc k-shift-mask -- u  ) X:ekeys

make-doc k-ctrl-mask -- u  ) X:ekeys

make-doc k-alt-mask -- u  ) X:ekeys

make-doc k-left -- u  ) X:ekeys  

make-doc k-right -- u  ) X:ekeys

make-doc k-up -- u  ) X:ekeys

make-doc k-down -- u  ) X:ekeys

make-doc k-home -- u  ) X:ekeys
aka Pos1

make-doc k-end -- u  ) X:ekeys

make-doc k-prior -- u  ) X:ekeys
aka PgUp

make-doc k-next -- u  ) X:ekeys
aka PgDn    

make-doc k-insert -- u  ) X:ekeys

make-doc k-delete -- u  ) X:ekeys

make-doc k-f1 -- u  ) X:ekeys

make-doc k-f2 -- u  ) X:ekeys

make-doc k-f3 -- u  ) X:ekeys

make-doc k-f4 -- u  ) X:ekeys

make-doc k-f5 -- u  ) X:ekeys

make-doc k-f6 -- u  ) X:ekeys

make-doc k-f7 -- u  ) X:ekeys

make-doc k-f8 -- u  ) X:ekeys

make-doc k-f9 -- u  ) X:ekeys

make-doc k-f10 -- u  ) X:ekeys

make-doc k-f11 -- u  ) X:ekeys

make-doc k-f12 -- u  ) X:ekeys

make-doc k1 -- u  ) gforth-obsolete

make-doc k2 -- u  ) gforth-obsolete

make-doc k3 -- u  ) gforth-obsolete

make-doc k4 -- u  ) gforth-obsolete

make-doc k5 -- u  ) gforth-obsolete

make-doc k6 -- u  ) gforth-obsolete

make-doc k7 -- u  ) gforth-obsolete

make-doc k8 -- u  ) gforth-obsolete

make-doc k9 -- u  ) gforth-obsolete

make-doc k10 -- u  ) gforth-obsolete

make-doc k11 -- u  ) gforth-obsolete

make-doc k12 -- u  ) gforth-obsolete

make-doc s-k1 -- u  ) gforth-obsolete 

make-doc s-k2 -- u  ) gforth-obsolete 

make-doc s-k3 -- u  ) gforth-obsolete 

make-doc s-k4 -- u  ) gforth-obsolete 

make-doc s-k5 -- u  ) gforth-obsolete 

make-doc s-k6 -- u  ) gforth-obsolete 

make-doc s-k7 -- u  ) gforth-obsolete 

make-doc s-k8 -- u  ) gforth-obsolete 

make-doc s-k9 -- u  ) gforth-obsolete 

make-doc s-k10 -- u  ) gforth-obsolete 

make-doc s-k11 -- u  ) gforth-obsolete

make-doc s-k12 -- u  ) gforth-obsolete

make-doc key-buffer unknown  )

make-doc key-buffered unknown  )

make-doc char-append-buffer c addr --  )

make-doc unkey c --  )

make-doc unkeys addr u --  )

make-doc esc-sequences unknown  ) and prefixes

make-doc ekey-buffer unknown  )

make-doc ekey-buffered unknown  )

make-doc esc-prefix -- u  )

make-doc esc-sequence u1 addr u -- ; name execution: -- u2  )

make-doc clear-ekey-buffer --  )

make-doc ekey -- u  ) facility-ext e-key
Receive a keyboard event @var{u} (encoding implementation-defined).

make-doc ekey>char u -- u false | c true  ) facility-ext e-key-to-char
Convert keyboard event @var{u} into character @code{c} if possible.

make-doc ekey>fkey u1 -- u2 f  ) X:ekeys
If u1 is a keyboard event in the special key set, convert
keyboard event @var{u1} into key id @var{u2} and return true;
otherwise return @var{u1} and false.

make-doc ekey? -- flag  ) facility-ext e-key-question
True if a keyboard event is available.

make-doc char/ unknown  )

make-doc parse-num-x c-addr1 umax -- c-addr2 c  )

make-doc parse-num c-addr1 umax base -- c-addr2 c  )

make-doc \-escape-table unknown  )

make-doc \-escape c-addr1 -- c-addr2 c  )

make-doc \"-parse "string"<"> -- c-addr u  ) gforth-internal  backslash-quote-parse
parses string, translating @code{\}-escapes to characters (as in
C).  The resulting string resides at @code{here}.  See @code{S\"}
for the supported @code{\-escapes}.

make-doc s\" compilation 'ccc"' -- ; run-time -- c-addr u  ) gforth	s-backslash-quote
Like @code{S"}, but translates C-like \-escape-sequences, as
follows: @code{\a} BEL (alert), @code{\b} BS, @code{\e} ESC (not in
C99), @code{\f} FF, @code{\n} newline, @code{\r} CR, @code{\t} HT,
@code{\v} VT, @code{\"} ", @code{\\} \, @code{\}[0-7]@{1,3@} octal
numerical character value (non-standard), @code{\x}[0-9a-f]@{0,2@}
hex numerical character value (standard only with two digits); a
@code{\} before any other character is reserved.

make-doc .\" compilation 'ccc"' -- ; run-time --  ) gforth	dot-backslash-quote
Like @code{."}, but translates C-like \-escape-sequences (see
@code{S\"}).

make-doc C-Output unknown  )

make-doc C-Formated unknown  )

make-doc C-Highlight unknown  )

make-doc C-Clearline unknown  )

make-doc XPos unknown  )

make-doc YPos unknown  )

make-doc Level unknown  )

make-doc Format unknown  )

make-doc level+ unknown  )

make-doc level- unknown  )

make-doc nlflag unknown  )

make-doc uppercase unknown  ) structure words are in uppercase

make-doc nlcount unknown  )

make-doc nl unknown  )

make-doc (nl) unknown  )

make-doc warp? len -- len  )

make-doc ctype adr len --  )

make-doc cemit unknown  )

make-doc .string c-addr u n --  )

make-doc (.string) c-addr u n --  )

make-doc c-\type c-addr u --  )

make-doc .struc unknown  )

make-doc RepeatCode unknown  )

make-doc AgainCode unknown  )

make-doc UntilCode unknown  )

make-doc ElseCode unknown  )

make-doc AheadCode unknown  )

make-doc WhileCode2 unknown  )

make-doc Disable unknown  )

make-doc LeaveCode unknown  )

make-doc C-Stop unknown  )

make-doc Branches unknown  )

make-doc BranchPointer unknown  ) point to the end of branch table

make-doc SearchPointer unknown  )

make-doc BranchTable unknown  )

make-doc MaxTable unknown  )

make-doc FirstBranch unknown  )

make-doc (BranchAddr?) a-addr1 -- a-addr2 true | false  )

make-doc BranchAddr? unknown  )

make-doc MoreBranchAddr? unknown  )

make-doc CheckEnd a-addr -- true | false  )

make-doc MyBranch a-addr -- a-addr a-addr2  )

make-doc CheckWhile a-addrw a-addrt -- true | false  )

make-doc ,Branch a-addr --  )

make-doc Type! u --  )

make-doc Branch! a-addr rel -- a-addr  )

make-doc NoOutput unknown  )

make-doc C-Pass unknown  )

make-doc ScanMode unknown  )

make-doc DisplayMode unknown  )

make-doc DebugMode unknown  )

make-doc Scan? -- flag  )

make-doc Display? -- flag  )

make-doc Debug? -- flag  )

make-doc back? addr target -- addr flag  )

make-doc .word addr x -- addr  )

make-doc c-call addr1 -- addr2  )

make-doc c-callxt addr1 -- addr2  )

make-doc c-lit addr1 -- addr2  )

make-doc c-lit+ addr1 -- addr2  )

make-doc .name-without addr -- addr  )

make-doc c-c" unknown  )

make-doc c-string? addr1 -- addr2 f  )

make-doc Forward? a-addr true | false -- a-addr true | false  )

make-doc RepeatCheck a-addr1 a-addr2 true | false -- false  )

make-doc c-branch addr1 -- addr2  )

make-doc DebugBranch unknown  )

make-doc c-?branch unknown  )

make-doc c-for unknown  )

make-doc c-loop unknown  )

make-doc c-do unknown  )

make-doc c-?do addr1 -- addr2  )

make-doc c-exit addr1 -- addr2  )

make-doc c-abort" unknown  )

make-doc c-does> unknown  ) end of create part

make-doc c-(compile) unknown  )

make-doc C-Table unknown  )

make-doc c-extender unknown  )

make-doc DoTable ca/cfa -- flag  )

make-doc BranchTo? a-addr -- a-addr  )

make-doc analyse a-addr1 -- a-addr2  )

make-doc c-init unknown  )

make-doc makepass a-addr --  )

make-doc xt-see-xt xt --  )

make-doc .defname xt c-addr u --  )

make-doc discode addr u --  ) gforth
hook for the disassembler: disassemble code at addr of length u

make-doc next-head addr1 -- addr2  ) gforth
find the next header starting after addr1, up to here (unreliable).

make-doc next-prim addr1 -- addr2  ) gforth
find the next primitive after addr1 (unreliable)

make-doc seecode xt --  )

make-doc seevar xt --  )

make-doc seeuser xt --  )

make-doc seecon xt --  )

make-doc seevalue xt --  )

make-doc seedefer xt --  )

make-doc see-threaded addr --  )

make-doc seedoes xt --  )

make-doc seecol xt --  )

make-doc seefield xt --  )

make-doc xt-see xt --  ) gforth
Decompile the definition represented by @i{xt}.

make-doc (xt-see-xt) xt --  )

make-doc (.immediate) xt --  )

make-doc name-see nfa --  )

make-doc see "<spaces>name" --  ) tools
Locate @var{name} using the current search order. Display the
definition of @var{name}. Since this is achieved by decompiling
the definition, the formatting is mechanised and some source
information (comments, interpreted sequences within definitions
etc.) is lost.

make-doc c-loop-lp+!# unknown  )

make-doc c-?branch-lp+!# unknown  )

make-doc c-branch-lp+!# unknown  )

make-doc c-@local# unknown  )

make-doc c-flit unknown  )

make-doc c-f@local# unknown  )

make-doc c-laddr# unknown  )

make-doc c-lp+!# unknown  )

make-doc c-extend1 unknown  )

make-doc buffer-descriptor unknown  ) addr u

make-doc buffer-length unknown  )

make-doc buffer-address unknown  )

make-doc buffer-maxlength unknown  ) >=length

make-doc buffer% unknown  )

make-doc init-buffer addr --  )

make-doc adjust-buffer u addr --  )
adjust buffer% at addr to length u

make-doc backtrace-rs-buffer unknown  )

make-doc init-backtrace --  )

make-doc backtrace-return-stack -- addr u  )

make-doc print-bt-entry return-stack-item --  )

make-doc print-backtrace addr1 addr2 --  )
print a backtrace for the return stack addr1..addr2

make-doc simple-see-word addr --  )

make-doc simple-see-range addr1 addr2 --  ) gforth

make-doc simple-see "name" --  ) gforth
a simple decompiler that's closer to @code{dump} than @code{see}.

make-doc see-code-next-inline addr1 addr2 -- addr3  )

make-doc see-code-range addr1 addr2 --  ) gforth

make-doc see-code "name" --  ) gforth
like @code{simple-see}, but also shows the dynamic native code for
the inlined primitives (except for the last).

make-doc dbg-ip unknown  ) instruction pointer for debugger

make-doc save-see-flags -- n* cnt  )

make-doc restore-see-flags n* cnt --  )

make-doc scanword body --  )

make-doc .n n --  )

make-doc d.s .. -- ..  )

make-doc NoFine --  )

make-doc Leave-D --  )

make-doc disp-step --  )

make-doc get-next -- n | n n  )

make-doc jump addr --  )

make-doc DebugLoop unknown  )

make-doc breaker-size unknown  ) !!! dependency: ITC

make-doc breaker R:body --  )

make-doc BP unknown  )

make-doc DT unknown  )

make-doc set-bp 0 n | 0 n n --  ) !!! dependency: ITC

make-doc restore-bp --  ) !!! dependency: ITC

make-doc Body unknown  )

make-doc nestXT-checkSpecial xt -- xt2 | cfa xt2  )

make-doc nestXT xt -- true | body false  )
return true if we are not able to debug this, 
body and false otherwise

make-doc Nesting unknown  )

make-doc Unnest unknown  )

make-doc D-KEY -- flag  )

make-doc (_debug) body ip --  )

make-doc (debug) unknown  )

make-doc dbg "name" --  ) gforth 

make-doc break:, --  )

make-doc (break:) unknown  )

make-doc break: --  ) gforth

make-doc (break") unknown  )

make-doc break" 'ccc"' --  ) gforth

make-doc assembler --  ) tools-ext

make-doc init-asm --  ) gforth

make-doc code "name" -- colon-sys  ) tools-ext

make-doc (;code) --  ) gforth

make-doc ;code compilation. colon-sys1 -- colon-sys2  ) tools-ext	semicolon-code

make-doc end-code colon-sys --  ) gforth	end_code

make-doc append-extend-string addr1 u1 addr2 u2 -- addr3 u1+u2  )

make-doc gdb-addr-sep-char -- c  )

make-doc #comma unknown  )

make-doc check-gdb-syntax -- c  )

make-doc disasm-gdb addr u --  )

make-doc mkdir-parents c-addr u mode -- ior  )
create the directory @i{c-addr u} and all its parents with
mode @i{mode} (modified by umask)

make-doc cff-cfr unknown  ) xt of c-function-rt word

make-doc cff-deferred unknown  ) xt of c-function deferred word

make-doc cff-lha unknown  ) address of the lib-handle for the lib that

make-doc cff-rtype unknown  ) return type

make-doc cff-np unknown  ) number of parameters

make-doc cff-ptypes unknown  ) #npar parameter types

make-doc cff% unknown  )

make-doc c-source-file-id unknown  ) contains the source file id of the current batch

make-doc lib-handle-addr unknown  ) points to the library handle of the current batch.

make-doc lib-filename unknown  ) filename without extension

make-doc lib-modulename unknown  ) basename of the file without extension

make-doc libcc-named-dir-v unknown  ) directory for named libcc wrapper libraries

make-doc libcc-path unknown  ) pointer to path of library directories

make-doc replace-rpath c-addr1 u1 -- c-addr2 u2  )

make-doc .nb n --  )

make-doc const+ n1 "name" -- n2  )

make-doc front-string c-addr1 u1 c-addr2 u2 -- c-addr3 u3  )

make-doc front-char c-addr1 u1 c -- c-addr3 u2  )

make-doc s+ addr1 u1 addr2 u2 -- addr u  )

make-doc append addr1 u1 addr2 u2 -- addr u  )

make-doc list-next unknown  )

make-doc list-payload unknown  )

make-doc list% unknown  )

make-doc list-insert node list --  )

make-doc list-append node endlistp --  )

make-doc list-map ... list xt -- ...  )

make-doc c-lib-string unknown  )

make-doc c-lib% unknown  )

make-doc c-libs unknown  ) linked list of library names (without "lib")

make-doc add-lib c-addr u --  ) gforth
Add library lib@i{string} to the list of libraries, where
@i{string} is represented by @i{c-addr u}.

make-doc append-l c-addr1 u1 node -- c-addr2 u2  )

make-doc add-libpath c-addr1 u1 node -- c-addr2 u2  )

make-doc c-prefix-count unknown  )

make-doc c-prefix-chars unknown  )

make-doc c-prefix% unknown  )

make-doc c-prefix-lines unknown  )

make-doc c-prefix-lines-end unknown  )

make-doc print-c-prefix-line node --  )

make-doc print-c-prefix-lines --  )

make-doc save-c-prefix-line c-addr u --  )

make-doc \c "rest-of-line" --  ) gforth backslash-c
One line of C declarations for the C interface

make-doc libcc-types unknown  )

make-doc -- unknown  ) end of arguments

make-doc n unknown  ) integer cell

make-doc a unknown  ) address cell

make-doc d unknown  ) double

make-doc r unknown  ) float

make-doc func unknown  ) C function pointer

make-doc void unknown  )

make-doc parse-libcc-type "libcc-type" -- u  )

make-doc parse-function-types "{libcc-type}" "--" "libcc-type" --  )

make-doc type-letter n -- c  )

make-doc count-stacks-n fp-change1 sp-change1 -- fp-change2 sp-change2  )

make-doc count-stacks-a fp-change1 sp-change1 -- fp-change2 sp-change2  )

make-doc count-stacks-d fp-change1 sp-change1 -- fp-change2 sp-change2  )

make-doc count-stacks-r fp-change1 sp-change1 -- fp-change2 sp-change2  )

make-doc count-stacks-func fp-change1 sp-change1 -- fp-change2 sp-change2  )

make-doc count-stacks-void fp-change1 sp-change1 -- fp-change2 sp-change2  )

make-doc count-stacks-types unknown  )

make-doc count-stacks pars -- fp-change sp-change  )

make-doc gen-par-n fp-depth1 sp-depth1 -- fp-depth2 sp-depth2  )

make-doc gen-par-a fp-depth1 sp-depth1 -- fp-depth2 sp-depth2  )

make-doc gen-par-d fp-depth1 sp-depth1 -- fp-depth2 sp-depth2  )

make-doc gen-par-r fp-depth1 sp-depth1 -- fp-depth2 sp-depth2  )

make-doc gen-par-func fp-depth1 sp-depth1 -- fp-depth2 sp-depth2  )

make-doc gen-par-void fp-depth1 sp-depth1 -- fp-depth2 sp-depth2  )

make-doc gen-par-types unknown  )

make-doc gen-par fp-depth1 sp-depth1 partype -- fp-depth2 sp-depth2  )

make-doc gen-wrapped-call d: pars d: c-name fp-change1 sp-change1 --  )

make-doc gen-wrapped-void pars c-name fp-change1 sp-change1 -- fp-change sp-change  )

make-doc gen-wrapped-n pars c-name fp-change1 sp-change1 -- fp-change sp-change  )

make-doc gen-wrapped-a pars c-name fp-change1 sp-change1 -- fp-change sp-change  )

make-doc gen-wrapped-d pars c-name fp-change1 sp-change1 -- fp-change sp-change  )

make-doc gen-wrapped-r pars c-name fp-change1 sp-change1 -- fp-change sp-change  )

make-doc gen-wrapped-func pars c-name fp-change1 sp-change1 -- fp-change sp-change  )

make-doc gen-wrapped-types unknown  )

make-doc gen-wrapped-stmt pars c-name fp-change1 sp-change1 ret -- fp-change sp-change  )

make-doc wrapper-function-name addr -- c-addr u  )

make-doc gen-wrapper-function addr --  )

make-doc scan-back c-addr u1 c -- c-addr u2  )

make-doc dirname c-addr1 u1 -- c-addr2 u2  )

make-doc basename c-addr1 u1 -- c-addr2 u2  )

make-doc gen-filename x -- c-addr u  )

make-doc libcc-named-dir -- c-addr u  )

make-doc libcc-tmp-dir -- c-addr u  )

make-doc prepend-dirname c-addr1 u1 c-addr2 u2 -- c-addr3 u3  )

make-doc open-wrappers -- addr|0  )

make-doc c-library-name-setup c-addr u --  )

make-doc c-library-name-create --  )

make-doc c-named-library-name c-addr u --  )

make-doc c-tmp-library-name c-addr u --  )

make-doc lib-handle -- addr  )

make-doc init-c-source-file --  )

make-doc c-source-file -- file-id  )

make-doc notype-execute ... xt -- ...  )

make-doc c-source-file-execute ... xt -- ...  )

make-doc .lib-error --  )

make-doc compile-wrapper-function --  )

make-doc compile-wrapper-function1 --  )

make-doc link-wrapper-function cff -- sym  )

make-doc c-function-ft xt-defr xt-cfr "c-name" "{libcc-type}" "--" "libcc-type" --  )

make-doc c-function-rt --  )

make-doc c-function "forth-name" "c-name" "@{type@}" "--" "type" --  ) gforth
Define a Forth word @i{forth-name}.  @i{Forth-name} has the
specified stack effect and calls the C function @code{c-name}.

make-doc clear-libs --  ) gforth
Clear the list of libs

make-doc c-library-incomplete --  )

make-doc c-library-name c-addr u --  ) gforth
Start a C library interface with name @i{c-addr u}.

make-doc c-library "name" --  ) gforth
Parsing version of @code{c-library-name}

make-doc end-c-library --  ) gforth
Finish and (if necessary) build the latest C library interface.

make-doc init-libcc --  )

make-doc +field n1 n2 "name" -- n3  ) X:structures plus-field

make-doc begin-structure "name" -- struct-sys 0  ) X:structures

make-doc end-structure struct-sys +n --  ) X:structures

make-doc cfield: u1 "name" -- u2  ) X:structures

make-doc field: u1 "name" -- u2  ) X:structures

make-doc 2field: u1 "name" -- u2  ) gforth

make-doc ffield: u1 "name" -- u2  ) X:structures

make-doc sffield: u1 "name" -- u2  ) X:structures

make-doc dffield: u1 "name" -- u2  ) X:structures

make-doc double unknown  )

make-doc double-ext unknown  )

make-doc exception unknown  )

make-doc exception-ext unknown  )

make-doc facility unknown  )

make-doc facility-ext unknown  )

make-doc file unknown  )

make-doc file-ext unknown  )

make-doc floating unknown  )

make-doc floating-ext unknown  )

make-doc locals unknown  )

make-doc locals-ext unknown  )

make-doc memory-alloc unknown  )

make-doc memory-alloc-ext unknown  )

make-doc tools unknown  )

make-doc tools-ext unknown  )

make-doc search-order unknown  )

make-doc search-order-ext unknown  )

make-doc string unknown  )

make-doc string-ext unknown  )

make-doc X:deferred unknown  )

make-doc X:defined unknown  )

make-doc X:ekeys unknown  )

make-doc X:extension-query unknown  )

make-doc X:fp-stack unknown  )

make-doc X:number-prefixes unknown  )

make-doc X:parse-name unknown  )

make-doc X:required unknown  )

make-doc X:structures unknown  )

make-doc object-map unknown  )

make-doc object% unknown  )

make-doc interface-map unknown  )

make-doc interface-map-offset unknown  ) aus

make-doc interface-offset unknown  ) aus

make-doc interface% unknown  )

make-doc class-parent unknown  )

make-doc class-wordlist unknown  ) inst-vars and other protected words

make-doc --objects-class-inst-size class -- addr  )objects
Give the size specification for an instance (i.e. an object)
of @var{class};
used as @code{class-inst-size 2@ ( class -- align size )}.

make-doc class% unknown  )

make-doc selector-offset unknown  ) the offset within the (interface) map

make-doc selector-interface unknown  ) the interface offset

make-doc selector% unknown  )

make-doc --objects-current-interface -- addr  )objects
Variable: contains the class or interface currently being
defined.

make-doc no-method --  )

make-doc do-class-method --  )

make-doc do-interface-method --  )

make-doc --objects-method xt "name" --  )objects
@code{name} execution: @code{... object -- ...}@*
Create selector @var{name} and makes @var{xt} its method in
the current class.

make-doc --objects-selector "name" --  )objects
@var{name} execution: @code{... object -- ...}@*
Create selector @var{name} for the current class and its
descendents; you can set a method for the selector in the
current class with @code{overrides}.

make-doc interface-override! xt sel-xt interface-map --  )

make-doc --objects-class->map class -- map  )objects
@var{map} is the pointer to @var{class}'s method map; it
points to the place in the map to which the selector offsets
refer (i.e., where @var{object-map}s point to).

make-doc unique-interface-map class-map offset --  )

make-doc --objects-class-override! xt sel-xt class-map --  )objects
@var{xt} is the new method for the selector @var{sel-xt} in
@var{class-map}.

make-doc --objects-overrides xt "selector" --  )objects
replace default method for @var{selector} in the current class
with @var{xt}. @code{overrides} must not be used during an
interface definition.

make-doc last-interface-offset unknown  )

make-doc --objects-interface --  )objects
Start an interface definition.

make-doc --objects-end-interface-noname -- interface  )objects
End an interface definition. The resulting interface is
@var{interface}.

make-doc --objects-end-interface "name" --  )objects
@code{name} execution: @code{-- interface}@*
End an interface definition. The resulting interface is
@var{interface}.

make-doc public-wordlist unknown  )

make-doc --objects-protected --  )objects
Set the compilation wordlist to the current class's wordlist

make-doc --objects-public --  )objects
Restore the compilation wordlist that was in effect before the
last @code{protected} that actually changed the compilation
wordlist.

make-doc add-class-order n1 class -- wid1 ... widn n+n1  )

make-doc --objects-class>order class --  )objects
Add @var{class}'s wordlists to the head of the search-order.

make-doc push-order unknown  ) old name

make-doc --objects-methods class --  )objects
Makes @var{class} the current class. This is intended to be
used for defining methods to override selectors; you cannot
define new fields or selectors.

make-doc --objects-class parent-class -- align offset  )objects
Start a new class definition as a child of
@var{parent-class}. @var{align offset} are for use by
@var{field} etc.

make-doc remove-class-order wid1 ... widn n+n1 class -- n1  )

make-doc --objects-class-previous class --  )objects
Drop @var{class}'s wordlists from the search order. No
checking is made whether @var{class}'s wordlists are actually
on the search order.

make-doc drop-order unknown  ) old name

make-doc --objects-end-methods --  )objects
Switch back from defining methods of a class to normal mode
(currently this just restores the old search order).

make-doc --objects-end-class-noname align offset -- class  )objects
End a class definition. The resulting class is @var{class}.

make-doc --objects-end-class align offset "name" --  )objects
@var{name} execution: @code{-- class}@*
End a class definition. The resulting class is @var{class}.

make-doc front-extend-mem addr1 u1 u -- addr addr2 u2  )

make-doc --objects-implementation interface --  )objects
The current class implements @var{interface}. I.e., you can
use all selectors of the interface in the current class and its
descendents.

make-doc --objects-this -- object  )objects
the receiving object of the current method (aka active object).

make-doc --objects-to-this object --  )objects
Set @code{this} (used internally, but useful when debugging).

make-doc enterm -- ; run-time: object --  )
method prologue; @var{object} becomes new @code{this}.

make-doc --objects-m: -- xt colon-sys; run-time: object --  )objects
Start a method definition; @var{object} becomes new @code{this}.

make-doc --objects-:m "name" -- xt; run-time: object --  )objects
Start a named method definition; @var{object} becomes new
@code{this}.  Has to be ended with @code{;m}.

make-doc --objects-exitm --  )objects
@code{exit} from a method; restore old @code{this}.

make-doc --objects-;m colon-sys --; run-time: --  )objects
End a method definition; restore old @code{this}.

make-doc catch ... xt -- ... n  ) exception

make-doc inst-something align1 size1 align size xt "name" -- align2 size2  )

make-doc do-inst-var --  )

make-doc --objects-inst-var align1 offset1 align size "name" -- align2 offset2  )objects
@var{name} execution: @code{-- addr}@*
@var{addr} is the address of the field @var{name} in
@code{this} object.

make-doc do-inst-value --  )

make-doc --objects-inst-value align1 offset1 "name" -- align2 offset2  )objects
@var{name} execution: @code{-- w}@*
@var{w} is the value of the field @var{name} in @code{this}
object.

make-doc --objects-<to-inst> w xt --  )objects
store @var{w} into the field @var{xt} in @code{this} object.

make-doc --objects-[to-inst] compile-time: "name" -- ; run-time: w --  )objects
store @var{w} into field @var{name} in @code{this} object.

make-doc --objects-<bind> class selector-xt -- xt  )objects
@var{xt} is the method for the selector @var{selector-xt} in
@var{class}.

make-doc --objects-bind' "class" "selector" -- xt  )objects
@var{xt} is the method for @var{selector} in @var{class}.

make-doc --objects-bind ... "class" "selector" -- ...  )objects
Execute the method for @var{selector} in @var{class}.

make-doc --objects-[bind] compile-time: "class" "selector" -- ; run-time: ... object -- ...  )objects
Compile the method for @var{selector} in @var{class}.

make-doc --objects-current' "selector" -- xt  )objects
@var{xt} is the method for @var{selector} in the current class.

make-doc --objects-[current] compile-time: "selector" -- ; run-time: ... object -- ...  )objects
Compile the method for @var{selector} in the current class.

make-doc --objects-[parent] compile-time: "selector" -- ; run-time: ... object -- ...  )objects
Compile the method for @var{selector} in the parent of the
current class.

make-doc --objects-construct ... object --  )objects
Initialize the data fields of @var{object}. The method for the
class @var{object} just does nothing: @code{( object -- )}.

make-doc --objects-print object --  )objects
Print the object. The method for the class @var{object} prints
the address of the object and the address of its class.

make-doc equal object1 object2 -- flag  )

make-doc --objects-object -- class  )objects
the ancestor of all classes.

make-doc --objects-init-object ... class object --  )objects
Initialize a chunk of memory (@var{object}) to an object of
class @var{class}; then performs @code{construct}.

make-doc --objects-xt-new ... class xt -- object  )objects
Make a new object, using @code{xt ( align size -- addr )} to
get memory.

make-doc --objects-dict-new ... class -- object  )objects
@code{allot} and initialize an object of class @var{class} in
the dictionary.

make-doc --objects-heap-new ... class -- object  )objects
@code{allocate} and initialize an object of class @var{class}.

make-doc define? -- flag  )

make-doc 8aligned n1 -- n2  )

make-doc Objects unknown  )

make-doc types unknown  )

make-doc :wordlist unknown  )

make-doc :parent unknown  )

make-doc :child unknown  )

make-doc :next unknown  )

make-doc :method# unknown  )

make-doc :var# unknown  )

make-doc :newlink unknown  )

make-doc :iface unknown  )

make-doc :init unknown  )

make-doc :inext unknown  )

make-doc :ilist unknown  )

make-doc :ilen unknown  )

make-doc :inum unknown  )

make-doc op unknown  )

make-doc op! o --  )

make-doc ostack unknown  )

make-doc ^ -- o  )

make-doc o@ -- o  )

make-doc >o o --  )

make-doc o> --  )

make-doc o[] n --  )

make-doc #static unknown  )

make-doc #method unknown  )

make-doc #early unknown  )

make-doc #var unknown  )

make-doc #defer unknown  )

make-doc exec? addr -- flag  )

make-doc static? addr -- flag  )

make-doc early? addr -- flag  )

make-doc defer? addr -- flag  )

make-doc oset? unknown  )

make-doc o+, addr offset --  )

make-doc o*, addr offset --  )

make-doc ^+@ offset -- addr  )

make-doc o+@, addr offset --  )

make-doc ^*@ offset -- addr  )

make-doc o+@*, addr offset --  )

make-doc lastob unknown  )

make-doc lastparent unknown  )

make-doc vars unknown  )

make-doc methods unknown  )

make-doc decl unknown  )

make-doc 'link unknown  )

make-doc crash unknown  )

make-doc link, addr --  )

make-doc vallot size -- offset  )

make-doc valign --  )

make-doc vfalign --  )

make-doc mallot -- offset  )

make-doc --oof-static --  )oof
Create a class-wide cell-sized variable.

make-doc --oof-method --  )oof
Create a method selector.

make-doc --oof-early --  )oof
Create a method selector for early binding.

make-doc --oof-var size --  )oof
Create an instance variable

make-doc --oof-defer --  )oof
Create an instance defer

make-doc object-order wid0 .. widm m addr -- wid0 .. widn n  )

make-doc interface-order wid0 .. widm m addr -- wid0 .. widn n  )

make-doc add-order addr -- n  )

make-doc drop-order n --  )

make-doc o, xt early? --  )

make-doc findo string -- cfa n  )

make-doc method? unknown  )

make-doc method, object early? --  )

make-doc cmethod, object early? --  )

make-doc early, object --  )

make-doc late, object --  )

make-doc alloc unknown  )

make-doc ohere unknown  )

make-doc oallot n --  )

make-doc ((new, link --  )

make-doc (new object --  )

make-doc init-instance pos link -- pos  )

make-doc init-object object -- size  )

make-doc (new, object --  )

make-doc size@ objc -- size  )

make-doc (new[], n o -- addr  )

make-doc chunks unknown  )

make-doc DelFix addr root --  )

make-doc NewFix root size # -- addr  )

make-doc >chunk n -- root n'  )

make-doc Dalloc size -- addr  )

make-doc Salloc size -- addr  )

make-doc dispose, addr size --  )

make-doc new, o -- addr  )

make-doc new[], n o -- addr  )

make-doc dynamic unknown  )

make-doc static unknown  )

make-doc instance, o --  )

make-doc ptr, o --  )

make-doc array, n o --  )

make-doc voc# unknown  )

make-doc classlist unknown  )

make-doc old-current unknown  )

make-doc ob-interface unknown  )

make-doc voc! addr --  )

make-doc (class-does> unknown  )

make-doc (class parent --  )

make-doc (is addr --  )

make-doc inherit --  )

make-doc instvar, addr --  )

make-doc instptr> --  )

make-doc instptr, addr --  )

make-doc (o* i addr -- addr'  )

make-doc instarray, addr --  )

make-doc ((link addr -- o addr'  )

make-doc (link -- o addr  )

make-doc parent? class o -- class class'  )

make-doc (bound obj1 obj2 adr2 --  )

make-doc (bind addr --  ) <name>

make-doc (sbound o addr --  )

make-doc bind o --  )

make-doc m-name unknown  )

make-doc last-interface unknown  )

make-doc interface, --  )

make-doc inter, iface --  )

make-doc interfaces, --  )

make-doc lastob! --  )

make-doc thread, --  )

make-doc var, --  )

make-doc parent, -- o parent  )

make-doc 'link, --  )

make-doc cells, --  )

make-doc --oof-how: --  )oof how-to
End declaration, start implementation

make-doc --oof-class; --  )oof end-class
End class declaration or implementation

make-doc --oof-ptr --  )oof
Create an instance pointer

make-doc --oof-asptr class --  )oof
Create an alias to an instance pointer, cast to another class.

make-doc Fpostpone unknown  )

make-doc --oof-: <methodname> --  )oof colon

make-doc --oof-; xt colon-sys --  )oof

make-doc object unknown  ) do not create as subclass

make-doc oblink unknown  ) create offset for backlink

make-doc thread unknown  ) method/variable wordlist

make-doc parento unknown  ) pointer to parent

make-doc childo unknown  ) ptr to first child

make-doc nexto unknown  ) ptr to next child of parent

make-doc method# unknown  ) number of methods (bytes)

make-doc size unknown  ) number of variables (bytes)

make-doc newlink unknown  ) ptr to allocated space

make-doc ilist unknown  ) interface list

make-doc --object-init ... --  )oof

make-doc --object-dispose --  )oof

make-doc --object-class "name" --  )oof

make-doc --object-new -- o  )oof

make-doc --object-new[] n -- o  )oof new-array

make-doc --object-: "name" --  )oof define

make-doc --object-ptr "name" --  )oof

make-doc --object-asptr o "name" --  )oof

make-doc --object-[] n "name" --  )oof array

make-doc --object-:: "name" --  )oof scope

make-doc --object-class? o -- flag  )oof class-query

make-doc --object-super "name" --  )oof

make-doc --object-self -- o  )oof

make-doc --object-bind o "name" --  )oof

make-doc --object-bound class addr "name" --  )oof

make-doc --object-link "name" -- class addr  )oof

make-doc --object-is xt "name" --  )oof

make-doc --object-send xt --  )oof

make-doc --object-with o --  )oof

make-doc --object-endwith --  )oof

make-doc --object-' "name" -- xt  )oof tick

make-doc --object-postpone "name" --  )oof

make-doc --object-definitions --  )oof

make-doc --oof-interface-implement interface --  )oof

make-doc --oof-interface-inter-method, interface --  )oof

make-doc inter-list unknown  )

make-doc lastif unknown  )

make-doc inter# unknown  )

make-doc interfaces unknown  )

make-doc --oof-interface-method --  )oof

make-doc --oof-interface-how: --  )oof

make-doc --oof-interface-interface; --  )oof

make-doc --oof-interface-: <methodname> --  )oof colon

make-doc --oof-interface-; xt colon-sys --  )oof

make-doc interface-does> unknown  )

make-doc --oof-interface-interface --  )oof

make-doc method m v "name" -- m' v  ) mini-oof
Define a selector.

make-doc var m v size "name" -- m v'  ) mini-oof
Define a variable with @var{size} bytes.

make-doc class class -- class selectors vars  ) mini-oof
Start the definition of a class.

make-doc end-class class selectors vars "name" --  ) mini-oof
End the definition of a class.

make-doc defines xt class "name" --  ) mini-oof
Bind @var{xt} to the selector @var{name} in class @var{class}.

make-doc new class -- o  ) mini-oof
Create a new incarnation of the class @var{class}.

make-doc :: class "name" --  ) mini-oof colon-colon
Compile the method for the selector @var{name} of the class
@var{class} (not immediate!).

make-doc object -- a-addr  ) mini-oof
@var{object} is the base class of all objects.

make-doc FORK compilation -- orig ; run-time f --  ) gforth
AHEAD-like control structure: calls the code after JOIN.

make-doc JOIN orig --  ) gforth
THEN-like control structure for FORK

make-doc +bit addr n --  )

make-doc -bit addr n --  )

make-doc @+ addr -- n addr'  )

make-doc cur-class unknown  )

make-doc charclass --  ) regexp-cg
Create a charclass

make-doc +char char --  ) regexp-cg
add a char to the current charclass

make-doc -char char --  ) regexp-cg
remove a char from the current charclass

make-doc ..char start end --  ) regexp-cg
add a range of chars to the current charclass

make-doc or! n addr --  )

make-doc and! n addr --  )

make-doc +class class --  ) regexp-cg
union of charclass @var{class} and the current charclass

make-doc -class class --  ) regexp-cg
subtract the charclass @var{class} from the current charclass

make-doc char? addr class -- addr' flag  )

make-doc c? addr class --  ) regexp-pattern
check @var{addr} for membership in charclass @var{class}

make-doc -c? addr class --  ) regexp-pattern
check @var{addr} for not membership in charclass @var{class}

make-doc digit unknown  )

make-doc blanks unknown  )

make-doc letter unknown  )

make-doc any unknown  )

make-doc \d addr -- addr'  ) regexp-pattern
check for digit

make-doc \s addr -- addr'  ) regexp-pattern
check for blanks

make-doc .? addr -- addr'  ) regexp-pattern
check for any single charachter

make-doc -\d addr -- addr'  ) regexp-pattern
check for not digit

make-doc -\s addr -- addr'  ) regexp-pattern
check for not blank

make-doc ` "char" --  ) regexp-pattern
check for particular char

make-doc $= addr1 addr2 u -- f  )

make-doc ,=" addr u --  )

make-doc =" <string>" --  ) regexp-pattern
check for string

make-doc loops unknown  )

make-doc 3@ addr -- a b c  )

make-doc 3! a b c addr --  )

make-doc loops> -- addr  )

make-doc >loops addr --  )

make-doc BEGIN, --  )

make-doc DONE, --  )

make-doc vars unknown  )

make-doc varstack unknown  )

make-doc varsmax unknown  )

make-doc >var -- addr  )

make-doc var> -- addr  )

make-doc end$ unknown  )

make-doc start$ unknown  )

make-doc !end addr u -- addr  )

make-doc end-rex? addr -- addr flag  )

make-doc start-rex? addr -- addr flag  )

make-doc ?end addr -- addr  )

make-doc \^ addr -- addr  ) regexp-pattern
check for string start

make-doc \$ addr -- addr  ) regexp-pattern
check for string end

make-doc (( addr u --  ) regexp-pattern
start regexp block

make-doc )) -- addr f  ) regexp-pattern
end regexp block

make-doc drops n --  )

make-doc {** addr -- addr addr  ) regexp-pattern
greedy zero-or-more pattern

make-doc {++ addr -- addr addr  ) regexp-pattern
greedy one-or-more pattern

make-doc n*} sys n --  ) regexp-pattern
At least @var{n} pattern

make-doc **} sys --  ) regexp-pattern
end of greedy zero-or-more pattern

make-doc ++} sys --  ) regexp-pattern
end of greedy zero-or-more pattern

make-doc {+ addr -- addr addr  ) regexp-pattern
non-greedy one-or-more pattern

make-doc {* addr -- addr addr  ) regexp-pattern
non-greedy zero-or-more pattern

make-doc *} addr addr' -- addr'  ) regexp-pattern
end of non-greedy zero-or-more pattern

make-doc +} addr addr' -- addr'  ) regexp-pattern
end of non-greedy one-or-more pattern

make-doc // --  ) regexp-pattern
search for string

make-doc THENs sys --  )

make-doc {{ addr -- addr addr  ) regexp-pattern
Start of alternatives

make-doc || addr addr -- addr addr  ) regexp-pattern
separator between alternatives

make-doc }} addr addr -- addr addr  ) regexp-pattern
end of alternatives

make-doc \( addr -- addr  ) regexp-pattern
start of matching variable; variables are referred as \\1--9

make-doc \) addr -- addr  ) regexp-pattern
end of matching variable

make-doc \0 -- addr u  ) regexp-pattern
the whole string

make-doc \: i --  )

make-doc \:s n --  ):  LOOP ;

make-doc \1 unknown  )2 \3 \4 \5 \6 \7 \8 \9

make-doc \2 unknown  )3 \4 \5 \6 \7 \8 \9

make-doc \3 unknown  )4 \5 \6 \7 \8 \9

make-doc \4 unknown  )5 \6 \7 \8 \9

make-doc \5 unknown  )6 \7 \8 \9

make-doc \6 unknown  )7 \8 \9

make-doc \7 unknown  )8 \9

make-doc \8 unknown  )9

make-doc \9 unknown  )

make-doc delete buffer size count --  )

make-doc $padding n -- n'  )

make-doc $! addr1 u addr2 --  )

make-doc $@len addr -- u  )

make-doc $@ addr1 -- addr2 u  )

make-doc $!len u addr --  )

make-doc $del addr off u --  )

make-doc $ins addr1 u addr2 off --  )

make-doc $+! addr1 u addr2 --  )

make-doc $off addr --  )

make-doc $split addr u char -- addr1 u1 addr2 u2  )

make-doc $iter .. $addr char xt -- ..  )

make-doc >>ptr unknown  )

make-doc <<ptr unknown  )

make-doc >>string unknown  )

make-doc >> addr -- addr  ) regexp-replace
Start replace pattern region

make-doc << run-addr addr u -- run-addr  ) regexp-replace
Replace string from start of replace pattern region with
@var{addr} @var{u}

make-doc <<" "string<">" --  ) regexp-replace
Replace string from start of replace pattern region with
@var{string}

make-doc >>string@ -- addr u  )

make-doc >>next -- addr u  )

make-doc s// -- sys  ) regexp-replace
start search/replace loop

make-doc //g sys --  ) regexp-replace
end search/replace loop

make-doc complex' n -- offset  )

make-doc complex+ zaddr -- zaddr'  )

make-doc fl> -- r  )

make-doc zdup z -- z z  )

make-doc zdrop z --  )

make-doc zover z1 z2 -- z1 z2 z1  )

make-doc z>r z -- r:z )

make-doc zr> r:z -- z  )

make-doc zswap z1 z2 -- z2 z1  )

make-doc zpick z1 .. zn n -- z1 .. zn z1  )

make-doc zdepth -- u  )

make-doc zrot z1 z2 z3 -- z2 z3 z1  )

make-doc z-rot z1 z2 z3 -- z3 z1 z2  )

make-doc z@ zaddr -- z  )

make-doc z! z zaddr --  )

make-doc z+ z1 z2 -- z1+z2  )

make-doc z- z1 z2 -- z1-z2  )

make-doc zr- z1 z2 -- z2-z1  )

make-doc x+ z r -- z+r  )

make-doc x- z r -- z-r  )

make-doc z* z1 z2 -- z1*z2  )

make-doc zscale z r -- z*r  )

make-doc znegate z -- -z  )

make-doc zconj rr ri -- rr -ri  )

make-doc z*i z -- z*i  )

make-doc z/i z -- z/i  )

make-doc zsqabs z -- |z|²  )

make-doc 1/z z -- 1/z  )

make-doc z/ z1 z2 -- z1/z2  )

make-doc |z| z -- r  )

make-doc zabs z -- |z|  )

make-doc z2/ z -- z/2  )

make-doc z2* z -- z*2  )

make-doc >polar z -- r theta  )

make-doc polar> r theta -- z  )

make-doc zexp z -- exp[z]  )

make-doc pln z -- pln[z]  )

make-doc zln z -- ln[z]  )

make-doc z0= z -- flag  )

make-doc zsqrt z -- sqrt[z]  )

make-doc z** z1 z2 -- z1**z2  )

make-doc g unknown  )

make-doc -h unknown  )

make-doc zfib z1 -- fib[z1]  )

make-doc zsinh z -- sinh[z]  )

make-doc zcosh z -- cosh[z]  )

make-doc ztanh z -- tanh[z]  )

make-doc zsin z -- sin[z]  )

make-doc zcos z -- cos[z]  )

make-doc ztan z -- tan[z]  )

make-doc Real z -- r  )

make-doc Imag z -- i  )

make-doc Re z -- zr  )

make-doc Im z -- zi  )

make-doc zasinh z -- asinh[z]  )

make-doc zacosh z -- acosh[z]  )

make-doc zatanh z -- atanh[z]  )

make-doc zacoth z -- acoth[z]  )

make-doc pi/2 unknown  )

make-doc zasin z -- -iln[iz+sqrt[1-z^~2]]  )

make-doc zacos z -- pi/2-asin[z]  )

make-doc zatan z -- [ln[1+iz]-ln[1-iz]]/2i  )

make-doc zacot z -- [ln[[z+i]/[z-i]]/2i  )

make-doc fc. unknown  )

make-doc z. z --  )

make-doc z.s z1 .. zn -- z1 .. zn  )

make-doc Carray --  )

make-doc values unknown  )

make-doc expix unknown  )

make-doc r+ unknown  )

make-doc reverse n --  )

make-doc #points unknown  )

make-doc realloc n addr --  )

make-doc points n ---  )

make-doc .values --  )

make-doc .expix --  )

make-doc .rvalues unknown  )

make-doc z2dup+ unknown  )

make-doc butterfly cexpix addr1 addr2 -- cexpix  )

make-doc butterflies cexpix step off end start --  )

make-doc fft-step n flag step steps -- n flag step  )

make-doc (fft n flag --  )

make-doc fftscale r --  )

make-doc normalize --  )

make-doc fft --  )

make-doc rfft --  )

make-doc hamming --  )
